(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };

  // ../node_modules/.pnpm/fastdom@1.0.12/node_modules/fastdom/fastdom.js
  var require_fastdom = __commonJS({
    "../node_modules/.pnpm/fastdom@1.0.12/node_modules/fastdom/fastdom.js"(exports, module) {
      !function(win) {
        "use strict";
        var debug = 0 ? console.log.bind(console, "[fastdom]") : function() {
        };
        var raf = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.msRequestAnimationFrame || function(cb) {
          return setTimeout(cb, 16);
        };
        function FastDom() {
          var self = this;
          self.reads = [];
          self.writes = [];
          self.raf = raf.bind(win);
          debug("initialized", self);
        }
        FastDom.prototype = {
          constructor: FastDom,
          /**
           * We run this inside a try catch
           * so that if any jobs error, we
           * are able to recover and continue
           * to flush the batch until it's empty.
           *
           * @param {Array} tasks
           */
          runTasks: function(tasks) {
            debug("run tasks");
            var task;
            while (task = tasks.shift())
              task();
          },
          /**
           * Adds a job to the read batch and
           * schedules a new frame if need be.
           *
           * @param  {Function} fn
           * @param  {Object} ctx the context to be bound to `fn` (optional).
           * @public
           */
          measure: function(fn, ctx) {
            debug("measure");
            var task = !ctx ? fn : fn.bind(ctx);
            this.reads.push(task);
            scheduleFlush(this);
            return task;
          },
          /**
           * Adds a job to the
           * write batch and schedules
           * a new frame if need be.
           *
           * @param  {Function} fn
           * @param  {Object} ctx the context to be bound to `fn` (optional).
           * @public
           */
          mutate: function(fn, ctx) {
            debug("mutate");
            var task = !ctx ? fn : fn.bind(ctx);
            this.writes.push(task);
            scheduleFlush(this);
            return task;
          },
          /**
           * Clears a scheduled 'read' or 'write' task.
           *
           * @param {Object} task
           * @return {Boolean} success
           * @public
           */
          clear: function(task) {
            debug("clear", task);
            return remove(this.reads, task) || remove(this.writes, task);
          },
          /**
           * Extend this FastDom with some
           * custom functionality.
           *
           * Because fastdom must *always* be a
           * singleton, we're actually extending
           * the fastdom instance. This means tasks
           * scheduled by an extension still enter
           * fastdom's global task queue.
           *
           * The 'super' instance can be accessed
           * from `this.fastdom`.
           *
           * @example
           *
           * var myFastdom = fastdom.extend({
           *   initialize: function() {
           *     // runs on creation
           *   },
           *
           *   // override a method
           *   measure: function(fn) {
           *     // do extra stuff ...
           *
           *     // then call the original
           *     return this.fastdom.measure(fn);
           *   },
           *
           *   ...
           * });
           *
           * @param  {Object} props  properties to mixin
           * @return {FastDom}
           */
          extend: function(props) {
            debug("extend", props);
            if (typeof props != "object")
              throw new Error("expected object");
            var child = Object.create(this);
            mixin(child, props);
            child.fastdom = this;
            if (child.initialize)
              child.initialize();
            return child;
          },
          // override this with a function
          // to prevent Errors in console
          // when tasks throw
          catch: null
        };
        function scheduleFlush(fastdom2) {
          if (!fastdom2.scheduled) {
            fastdom2.scheduled = true;
            fastdom2.raf(flush.bind(null, fastdom2));
            debug("flush scheduled");
          }
        }
        function flush(fastdom2) {
          debug("flush");
          var writes = fastdom2.writes;
          var reads = fastdom2.reads;
          var error;
          try {
            debug("flushing reads", reads.length);
            fastdom2.runTasks(reads);
            debug("flushing writes", writes.length);
            fastdom2.runTasks(writes);
          } catch (e) {
            error = e;
          }
          fastdom2.scheduled = false;
          if (reads.length || writes.length)
            scheduleFlush(fastdom2);
          if (error) {
            debug("task errored", error.message);
            if (fastdom2.catch)
              fastdom2.catch(error);
            else
              throw error;
          }
        }
        function remove(array, item) {
          var index = array.indexOf(item);
          return !!~index && !!array.splice(index, 1);
        }
        function mixin(target, source) {
          for (var key in source) {
            if (source.hasOwnProperty(key))
              target[key] = source[key];
          }
        }
        var exports2 = win.fastdom = win.fastdom || new FastDom();
        if (false)
          (void 0)(function() {
            return exports2;
          });
        else if (typeof module == "object")
          module.exports = exports2;
      }(typeof window !== "undefined" ? window : typeof exports != "undefined" ? exports : globalThis);
    }
  });

  // ../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/dedupe.js
  var require_dedupe = __commonJS({
    "../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/dedupe.js"(exports, module) {
      (function() {
        "use strict";
        var classNames = function() {
          function StorageObject() {
          }
          StorageObject.prototype = /* @__PURE__ */ Object.create(null);
          function _parseArray(resultSet, array) {
            var length = array.length;
            for (var i = 0; i < length; ++i) {
              _parse(resultSet, array[i]);
            }
          }
          var hasOwn = {}.hasOwnProperty;
          function _parseNumber(resultSet, num) {
            resultSet[num] = true;
          }
          function _parseObject(resultSet, object) {
            if (object.toString !== Object.prototype.toString && !object.toString.toString().includes("[native code]")) {
              resultSet[object.toString()] = true;
              return;
            }
            for (var k in object) {
              if (hasOwn.call(object, k)) {
                resultSet[k] = !!object[k];
              }
            }
          }
          var SPACE = /\s+/;
          function _parseString(resultSet, str) {
            var array = str.split(SPACE);
            var length = array.length;
            for (var i = 0; i < length; ++i) {
              resultSet[array[i]] = true;
            }
          }
          function _parse(resultSet, arg) {
            if (!arg)
              return;
            var argType = typeof arg;
            if (argType === "string") {
              _parseString(resultSet, arg);
            } else if (Array.isArray(arg)) {
              _parseArray(resultSet, arg);
            } else if (argType === "object") {
              _parseObject(resultSet, arg);
            } else if (argType === "number") {
              _parseNumber(resultSet, arg);
            }
          }
          function _classNames() {
            var len = arguments.length;
            var args = Array(len);
            for (var i = 0; i < len; i++) {
              args[i] = arguments[i];
            }
            var classSet = new StorageObject();
            _parseArray(classSet, args);
            var list = [];
            for (var k in classSet) {
              if (classSet[k]) {
                list.push(k);
              }
            }
            return list.join(" ");
          }
          return _classNames;
        }();
        if (typeof module !== "undefined" && module.exports) {
          classNames.default = classNames;
          module.exports = classNames;
        } else if (false) {
          (void 0)("classnames", [], function() {
            return classNames;
          });
        } else {
          window.classNames = classNames;
        }
      })();
    }
  });

  // ../node_modules/.pnpm/sniffr@1.2.0/node_modules/sniffr/src/sniffr.js
  var require_sniffr = __commonJS({
    "../node_modules/.pnpm/sniffr@1.2.0/node_modules/sniffr/src/sniffr.js"(exports, module) {
      (function(host) {
        var properties = {
          browser: [
            [/msie ([\.\_\d]+)/, "ie"],
            [/trident\/.*?rv:([\.\_\d]+)/, "ie"],
            [/firefox\/([\.\_\d]+)/, "firefox"],
            [/chrome\/([\.\_\d]+)/, "chrome"],
            [/version\/([\.\_\d]+).*?safari/, "safari"],
            [/mobile safari ([\.\_\d]+)/, "safari"],
            [/android.*?version\/([\.\_\d]+).*?safari/, "com.android.browser"],
            [/crios\/([\.\_\d]+).*?safari/, "chrome"],
            [/opera/, "opera"],
            [/opera\/([\.\_\d]+)/, "opera"],
            [/opera ([\.\_\d]+)/, "opera"],
            [/opera mini.*?version\/([\.\_\d]+)/, "opera.mini"],
            [/opios\/([a-z\.\_\d]+)/, "opera"],
            [/blackberry/, "blackberry"],
            [/blackberry.*?version\/([\.\_\d]+)/, "blackberry"],
            [/bb\d+.*?version\/([\.\_\d]+)/, "blackberry"],
            [/rim.*?version\/([\.\_\d]+)/, "blackberry"],
            [/iceweasel\/([\.\_\d]+)/, "iceweasel"],
            [/edge\/([\.\d]+)/, "edge"]
          ],
          os: [
            [/linux ()([a-z\.\_\d]+)/, "linux"],
            [/mac os x/, "macos"],
            [/mac os x.*?([\.\_\d]+)/, "macos"],
            [/os ([\.\_\d]+) like mac os/, "ios"],
            [/openbsd ()([a-z\.\_\d]+)/, "openbsd"],
            [/android/, "android"],
            [/android ([a-z\.\_\d]+);/, "android"],
            [/mozilla\/[a-z\.\_\d]+ \((?:mobile)|(?:tablet)/, "firefoxos"],
            [/windows\s*(?:nt)?\s*([\.\_\d]+)/, "windows"],
            [/windows phone.*?([\.\_\d]+)/, "windows.phone"],
            [/windows mobile/, "windows.mobile"],
            [/blackberry/, "blackberryos"],
            [/bb\d+/, "blackberryos"],
            [/rim.*?os\s*([\.\_\d]+)/, "blackberryos"]
          ],
          device: [
            [/ipad/, "ipad"],
            [/iphone/, "iphone"],
            [/lumia/, "lumia"],
            [/htc/, "htc"],
            [/nexus/, "nexus"],
            [/galaxy nexus/, "galaxy.nexus"],
            [/nokia/, "nokia"],
            [/ gt\-/, "galaxy"],
            [/ sm\-/, "galaxy"],
            [/xbox/, "xbox"],
            [/(?:bb\d+)|(?:blackberry)|(?: rim )/, "blackberry"]
          ]
        };
        var UNKNOWN = "Unknown";
        var propertyNames = Object.keys(properties);
        function Sniffr2() {
          var self = this;
          propertyNames.forEach(function(propertyName) {
            self[propertyName] = {
              name: UNKNOWN,
              version: [],
              versionString: UNKNOWN
            };
          });
        }
        function determineProperty(self, propertyName, userAgent) {
          properties[propertyName].forEach(function(propertyMatcher) {
            var propertyRegex = propertyMatcher[0];
            var propertyValue = propertyMatcher[1];
            var match = userAgent.match(propertyRegex);
            if (match) {
              self[propertyName].name = propertyValue;
              if (match[2]) {
                self[propertyName].versionString = match[2];
                self[propertyName].version = [];
              } else if (match[1]) {
                self[propertyName].versionString = match[1].replace(/_/g, ".");
                self[propertyName].version = parseVersion(match[1]);
              } else {
                self[propertyName].versionString = UNKNOWN;
                self[propertyName].version = [];
              }
            }
          });
        }
        function parseVersion(versionString) {
          return versionString.split(/[\._]/).map(function(versionPart) {
            return parseInt(versionPart);
          });
        }
        Sniffr2.prototype.sniff = function(userAgentString) {
          var self = this;
          var isBrowser = typeof window !== "undefined";
          var fallbackUserAgent = isBrowser ? navigator.userAgent : "";
          var userAgent = (userAgentString || fallbackUserAgent).toLowerCase();
          propertyNames.forEach(function(propertyName) {
            determineProperty(self, propertyName, userAgent);
          });
          return this;
        };
        if (typeof module !== "undefined" && module.exports) {
          module.exports = Sniffr2;
        } else {
          host.Sniffr = new Sniffr2();
          host.Sniffr.sniff(navigator.userAgent);
        }
      })(exports);
    }
  });

  // ../story/src/dom-helpers/query.ts
  function queryAll(selector, context = null) {
    const queryFrom = getContext(context);
    const nodeList = queryFrom.querySelectorAll(selector);
    return Array.from(nodeList);
  }
  function query(selector, context = null) {
    const results = queryAll(selector, context);
    if (results.length === 0)
      return false;
    return results[0];
  }
  function getContext(defaultContext) {
    if (defaultContext)
      return defaultContext;
    if (window["__shadowRoot"])
      return window["__shadowRoot"].querySelector("article");
    return document;
  }

  // ../story/src/navigation/burger-nav.ts
  function initBurgerNav() {
    const navs = queryAll(".Navigation");
    const burgers = queryAll(".Navigation__hamburger");
    if (!navs.length || !burgers.length) {
      return;
    }
    const nav = navs[0];
    const burger = burgers[0];
    const navItems = queryAll(".Navigation__item", nav);
    if (navItems.length === 0) {
      burger.classList.add("hidden");
      return;
    }
    listenToBurger(burger, nav);
    listenToNavItems(navItems, nav, burger);
    enableBurger(burger);
  }
  function listenToBurger(burger, nav) {
    function handleLastLinkTab(firstLink) {
      return (e) => {
        if (e.key === "Tab" && !e.shiftKey) {
          e.preventDefault();
          firstLink.focus();
        }
      };
    }
    function handleFirstLinkTab(lastLink) {
      return (e) => {
        if (e.key === "Tab" && e.shiftKey) {
          e.preventDefault();
          lastLink.focus();
        }
      };
    }
    burger.addEventListener("click", (event) => {
      event.preventDefault();
      nav.classList.toggle("Navigation--isActive");
      const isNowActive = nav.classList.contains("Navigation--isActive");
      const ariaExpandedValue = isNowActive ? "true" : "false";
      burger.setAttribute("aria-expanded", ariaExpandedValue);
      const navLinks = queryAll("nav.Theme-NavigationBar a");
      const firstLink = navLinks.at(0);
      const lastLink = navLinks.at(-1);
      const firstLinkTabHandler = firstLink ? handleFirstLinkTab(lastLink) : null;
      const lastLinkTabHandler = lastLink ? handleLastLinkTab(firstLink) : null;
      function removeListenerOnBurgerClose() {
        nav.classList.remove("Navigation--isActive");
        burger.setAttribute("aria-expanded", "false");
        burger.focus();
        firstLink == null ? void 0 : firstLink.removeEventListener("keydown", firstLinkTabHandler);
        lastLink == null ? void 0 : lastLink.removeEventListener("keydown", lastLinkTabHandler);
      }
      function handleBurgerOutsideClick(event2) {
        if (!event2.target.closest(".Navigation__hamburger") && !nav.contains(event2.target)) {
          removeListenerOnBurgerClose();
        }
      }
      function handleBurgerEscapeKey(event2) {
        if (event2.key === "Escape") {
          removeListenerOnBurgerClose();
        }
      }
      if (isNowActive) {
        firstLink == null ? void 0 : firstLink.focus();
        firstLink == null ? void 0 : firstLink.addEventListener("keydown", firstLinkTabHandler);
        lastLink == null ? void 0 : lastLink.addEventListener("keydown", lastLinkTabHandler);
        document.addEventListener("click", handleBurgerOutsideClick);
        document.addEventListener("keydown", handleBurgerEscapeKey);
      } else {
        firstLink == null ? void 0 : firstLink.removeEventListener("keydown", firstLinkTabHandler);
        lastLink == null ? void 0 : lastLink.removeEventListener("keydown", lastLinkTabHandler);
        document.removeEventListener("click", handleBurgerOutsideClick);
        document.removeEventListener("keydown", handleBurgerEscapeKey);
        burger.focus();
      }
    });
  }
  function enableBurger(burger) {
    burger.classList.remove("Navigation__hamburger--initializing");
  }
  function listenToNavItems(navItems, nav, burger) {
    const onNavItemClick = () => {
      nav.classList.remove("Navigation--isActive");
      burger.setAttribute("aria-expanded", "false");
    };
    navItems.forEach((i) => i.addEventListener("click", onNavItemClick));
  }

  // ../story/src/core/globals.ts
  if (!window.hasOwnProperty("Shorthand")) {
    window.Shorthand = {};
  }

  // ../story/src/display-container/full-height-flex.ts
  var import_fastdom = __toESM(require_fastdom());

  // ../story/src/device-detect/index.ts
  var import_dedupe = __toESM(require_dedupe());
  var Sniffr = require_sniffr();

  // ../story/src/display-container/index.ts
  var facade = {
    getOrientation() {
      if (!window.Shorthand.displayContainer) {
        return window.innerWidth > window.innerHeight ? "landscape" : "portrait";
      }
      return facade.getWidth() > facade.getHeight() ? "landscape" : "portrait";
    },
    getHeight() {
      return window.Shorthand.displayContainer.getCache().height;
    },
    getWidth() {
      return window.Shorthand.displayContainer.getCache().width;
    },
    getTop() {
      return window.Shorthand.displayContainer.getCache().top;
    },
    getBottom() {
      return window.Shorthand.displayContainer.getCache().bottom;
    },
    getVhUnitsInPixels(vhunits) {
      const oneHundredVhInPixels = facade.getHeight();
      return oneHundredVhInPixels * (vhunits / 100);
    },
    getDisplayContainer() {
      return window.Shorthand.displayContainer;
    }
  };
  var display_container_default = facade;

  // ../story/src/social-share/index.ts
  var CONFIG = {
    facebook: {
      networkName: "Facebook",
      shareAction: "Share",
      popupWidth: 600,
      popupHeight: 420
    },
    twitter: {
      networkName: "Twitter",
      shareAction: "Tweet",
      popupWidth: 600,
      popupHeight: 250
    },
    linkedin: {
      networkName: "LinkedIn",
      shareAction: "Share",
      popupWidth: 600,
      popupHeight: 250
    }
  };
  function showPopup(url, config) {
    const left = Math.round(display_container_default.getWidth() / 2 - config.popupWidth / 2);
    let top = 0;
    if (display_container_default.getHeight() > config.popupHeight) {
      top = Math.round(display_container_default.getHeight() / 3 - config.popupHeight / 2);
    }
    const popupOptions = {
      left,
      top,
      width: config.popupWidth,
      height: config.popupHeight,
      personalbar: 0,
      toolbar: 0,
      scrollbars: 1,
      resizable: 1
    };
    const serializedPopupOptions = Object.keys(popupOptions).map((key) => `${key}=${popupOptions[key]}`).join(",");
    const windowName = "social-widget-" + config.networkName.replace(/\s+/, "-");
    const popup = window.open(url, windowName, serializedPopupOptions);
    if (popup) {
      popup.focus();
    } else {
      location.href = url;
    }
  }
  function onButtonClick(event) {
    event.preventDefault();
    const button = event.currentTarget;
    const buttonType = button.getAttribute("data-social-share");
    const buttonConfig = CONFIG[buttonType];
    const popupUrl = button.href;
    showPopup(popupUrl, buttonConfig);
  }
  function initButton(button) {
    const buttonType = button.getAttribute("data-social-share");
    if (buttonType in CONFIG) {
      button.addEventListener("click", onButtonClick, { passive: false });
    } else {
      console.error(`Social Share button of type ${buttonType} is not supported.`);
    }
  }
  function initSocialShareButtons(selector = "[data-social-share]") {
    const buttons = queryAll(selector);
    buttons.forEach(initButton);
  }

  // ../story/src/project/api.ts
  var ProjectApi = class {
    constructor({ baseUrl, componentsBaseUrl, publishUrl }, index, extensions) {
      this.baseUrl = baseUrl;
      this.publishUrl = publishUrl != null ? publishUrl : "";
      this.componentsBaseUrl = componentsBaseUrl;
      this.index = index;
      this.isEmbed = Boolean("embed" in window.Shorthand);
      this.search = loadSearch(index, extensions == null ? void 0 : extensions.search);
    }
    isEmbedLink(url) {
      return this.isEmbed && url.startsWith(this.publishUrl);
    }
    getHeaderNavigation() {
      return this.compileNavigation(this.index.headerNavigation);
    }
    getFooterNavigation() {
      return this.compileNavigation(this.index.footerNavigation);
    }
    compileNavigation(nav) {
      var _a, _b, _c;
      const items = nav.hasManualItems ? nav.items : this.index.roots.map((id) => {
        const node = this.index.nodes[id];
        return {
          label: node.label,
          nodeId: id,
          url: ""
        };
      });
      return {
        isEnabled: nav.isEnabled,
        option: nav.option,
        hasSocials: nav.hasSocials,
        social: nav.social,
        hasSearch: nav.hasSearch,
        showThemeLogos: nav.showThemeLogos,
        logos: ((_a = nav.logos) != null ? _a : []).map((logo) => this.compileLogo(logo)),
        color: (_b = nav.color) != null ? _b : void 0,
        fontColor: (_c = nav.fontColor) != null ? _c : void 0,
        items: items.reduce((resolvedItems, item) => {
          const resolvedItem = this.compileNavigationItem(item);
          if (resolvedItem) {
            resolvedItems.push(resolvedItem);
          }
          return resolvedItems;
        }, [])
      };
    }
    compileLogo(logo) {
      const result = { media: {} };
      for (const oneMedia of logo.media) {
        if (oneMedia.uri) {
          result.media[oneMedia.sel] = { src: this.getProjectUrl(oneMedia.uri), alt: oneMedia.alt };
        }
      }
      if (logo.link) {
        result.link = __spreadProps(__spreadValues({}, logo.link), { href: this.getProjectUrl(logo.link.href) });
      }
      return result;
    }
    compileNavigationItem({ label, nodeId, url }) {
      var _a, _b, _c;
      if (url)
        return {
          label,
          url,
          children: []
        };
      const node = this.index.nodes[nodeId];
      if (!node) {
        return;
      }
      const children = (_b = (_a = node.children) == null ? void 0 : _a.reduce((all, id) => {
        const childNode = this.index.nodes[id];
        if (childNode == null ? void 0 : childNode.page) {
          all.push({
            label: childNode.label || this.index.pages[childNode.page].title || "Untitled story",
            url: this.getPageUrl(childNode.page)
          });
        }
        return all;
      }, [])) != null ? _b : [];
      if (node.page) {
        url = this.getPageUrl(node.page);
      }
      return {
        label: label || node.label || ((_c = this.index.pages[node.page]) == null ? void 0 : _c.title) || "Untitled story",
        url,
        children
      };
    }
    externalLinkToProjectPage(link) {
      return {
        pageId: link.id,
        url: link.url,
        title: link.title,
        description: link.description,
        publishedAt: /* @__PURE__ */ new Date(),
        tags: [],
        cover: this._compileCover(link.cover)
      };
    }
    getProjectPage(pageId, overrides) {
      var _a;
      const page = this.index.pages[pageId];
      if (page) {
        return {
          pageId,
          url: this.getPageUrl(pageId),
          title: (overrides == null ? void 0 : overrides.title) ? overrides.title : page.title,
          description: (overrides == null ? void 0 : overrides.description) ? overrides.description : page.description,
          publishedAt: new Date(page.at),
          tags: (_a = page.tags) != null ? _a : [],
          cover: (overrides == null ? void 0 : overrides.cover) ? this._compileCover(overrides.cover) : this._compileCover(page.cover, pageId),
          colors: page.colors
        };
      }
    }
    _compileCover(pageCover, pageId) {
      if (pageCover) {
        const { image, sources = [] } = pageCover != null ? pageCover : {};
        return {
          url: pageId ? this.getPageAssetUrl(pageId, image) : image,
          sources: sources.map(({ t: type, s: srcs }) => ({
            type,
            srcSet: srcs.map(({ u: uri, w: width }) => {
              const url = pageId ? this.getPageAssetUrl(pageId, uri) : uri;
              return width ? `${url} ${width}w` : url;
            }).join(",")
          }))
        };
      }
    }
    getProjectPageIds() {
      return Object.keys(this.index.pages);
    }
    getTaggedPageIds(tags, tagRule) {
      const tagSet = new Set(tags);
      return Object.keys(this.index.pages).filter((id) => {
        var _a, _b;
        const tags2 = (_b = (_a = this.index.pages[id]) == null ? void 0 : _a.tags) != null ? _b : [];
        if (tagRule === "all") {
          return tags2.filter((t) => tagSet.has(t)).length >= tagSet.size;
        } else {
          return tags2.find((t) => tagSet.has(t));
        }
      });
    }
    getSubpageIds(relation, relationNodeId, page, includeSelfInList) {
      if (!relationNodeId)
        relationNodeId = this.index.pages[page].nodeId;
      if (relation === "siblings") {
        relationNodeId = Object.entries(this.index.nodes).reduce((targetId, [id, node]) => {
          return node.children.includes(relationNodeId) ? id : targetId;
        }, relationNodeId);
      }
      const pageNodeId = Object.keys(this.index.nodes).find((id) => this.index.nodes[id].page === page);
      const relationNode = this.index.nodes[relationNodeId];
      const children = this._getChildren(relationNode, relation, includeSelfInList ? null : pageNodeId);
      return children.reduce((pages, id) => {
        const node = this.index.nodes[id];
        return node.page ? pages.concat(node.page) : pages;
      }, []);
    }
    _getChildren(node, relation, ignoreNodeId) {
      if (!node)
        return [];
      const children = node.children.filter((id) => id !== ignoreNodeId);
      if (relation === "descendants") {
        return children.reduce((all, id) => all.concat(id).concat(this._getChildren(this.index.nodes[id], relation, ignoreNodeId)), []);
      } else {
        return children;
      }
    }
    /**
     * - if asset uri is absolute, returns asset uri
     * - with base url = project component base url ?? project base url
     * -   returns base url + asset uri
     */
    getPageAssetUrl(pageId, assetUri) {
      var _a;
      if (!assetUri) {
        return;
      }
      const page = this.index.pages[pageId];
      const node = this.index.nodes[page == null ? void 0 : page.nodeId];
      if (!page || !node) {
        return;
      }
      if (/^(https?:\/\/|\/)/.exec(assetUri)) {
        return assetUri;
      }
      if (this.isEmbed) {
        return `${this.publishUrl}${node.uri}${assetUri}`;
      }
      return `${(_a = this.componentsBaseUrl) != null ? _a : this.baseUrl}${node.uri}${assetUri}`;
    }
    /**
     * - if page or node aren't defined, returns undefined
     * - if page.uri is set and absolute, returns page.uri
     * - if page.uri is set and relative, returns base.url + page.uri
     * - returns base.url + node.uri + index.html
     *
     * (Page URLs don't use the components URL as a base)
     */
    getPageUrl(pageId) {
      var _a;
      const page = this.index.pages[pageId];
      const node = this.index.nodes[page == null ? void 0 : page.nodeId];
      if (!page || !node) {
        return;
      }
      const pageUri = (_a = page.uri) != null ? _a : `${node.uri}index.html`;
      if (/^(https?:\/\/|\/)/.exec(pageUri)) {
        return pageUri;
      }
      if (this.isEmbed) {
        return `${this.publishUrl}${pageUri}`;
      }
      return `${this.baseUrl}${pageUri}`;
    }
    getProjectUrl(uri) {
      if (/^(https?:\/\/|\/)/.exec(uri)) {
        return uri;
      }
      return `${this.baseUrl}${uri}`;
    }
    hasSearch() {
      var _a;
      return (_a = this.index.features.searchEnabled) != null ? _a : false;
    }
    getSearch() {
      return __async(this, null, function* () {
        if (!this.index.features.searchEnabled) {
          console.error("Project search is not enabled.");
        }
        return this.search.then((search) => {
          if (!search) {
            throw new Error("No search has been loaded");
          }
          return search;
        });
      });
    }
  };
  function loadSearch(index, loader) {
    if (index.features.searchEnabled && loader) {
      return loader();
    } else {
      if (index.features.searchEnabled) {
        console.error("Project search is enabled but no search extension is provided.");
      }
      return null;
    }
  }

  // ../story/src/project/analytics.ts
  function shaLogEvent(data) {
    var _a, _b, _c;
    if ((_c = (_b = (_a = window.Shorthand) == null ? void 0 : _a.analytics) == null ? void 0 : _b.api) == null ? void 0 : _c.ready) {
      window.Shorthand.analytics.api.addEvent(data);
    }
  }

  // ../story/src/project/search-sidebar.ts
  function initProjectSearchNav(projectSearchButton, projectSideBar) {
    listenToProjectSearchButton(projectSearchButton, projectSideBar);
    listenToSideBarCloseButton(projectSideBar);
    document.addEventListener(
      "mousedown",
      (event) => {
        if (!projectSideBar.contains(event.target) && !projectSearchButton.contains(event.target)) {
          projectSideBar.classList.remove("project-search--isActive");
        }
      },
      true
    );
  }
  function listenToProjectSearchButton(projectSearchButton, projectSideBar) {
    projectSearchButton.addEventListener("click", (event) => {
      event.preventDefault();
      projectSideBar.classList.add("project-search--isActive");
    });
  }
  function listenToSideBarCloseButton(projectSideBar) {
    const sideBarCloseButton = document.querySelector(".project-search-close-button");
    sideBarCloseButton.addEventListener("click", (event) => {
      event.preventDefault();
      projectSideBar.classList.remove("project-search--isActive");
    });
  }

  // ../story/src/project/utils.ts
  function applyEmbedNavigationIfNeeded(navigationParent) {
    queryAll("a[data-path]", navigationParent).forEach((anchor) => {
      anchor.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        const path = anchor.getAttribute("data-path");
        window.Shorthand.navigateInProject(path, anchor.href);
      });
    });
  }
  function setProjectPageLink(api, itemUrl, itemLink) {
    if (api.isEmbedLink(itemUrl)) {
      const { path, url } = getEmbedUrl(api, itemUrl);
      itemLink.setAttribute("data-path", path);
      itemLink.href = url;
    } else {
      itemLink.href = itemUrl;
    }
  }
  function getEmbedUrl(api, url) {
    const path = "/" + url.replace(api.publishUrl, "").replace(/\/?index\.html/, "");
    const fullUrl = new URL(document.location.href);
    fullUrl.searchParams.set("shpath", path);
    return {
      path,
      url: decodeURIComponent(fullUrl.toString())
    };
  }

  // ../story/src/project/search.ts
  function createSearch(api, navElement, nav) {
    return __async(this, null, function* () {
      const searchButton = query(".project-search-button", navElement);
      const sideBarElement = query("div[data-project-search-sidebar]", navElement);
      const searchElement = sideBarElement && query("div[data-project-search]", sideBarElement);
      const searchCloseButton = query("button[data-project-search-close-button]");
      function remove() {
        searchButton && searchButton.remove();
        sideBarElement && sideBarElement.remove();
      }
      if (!api.hasSearch() || !nav.hasSearch || !searchButton || !sideBarElement || !searchElement || !searchCloseButton) {
        return remove();
      }
      initProjectSearchNav(searchButton, sideBarElement);
      return api.getSearch().then((search) => createSearchElement(api, searchElement, sideBarElement, searchCloseButton, search)).catch((error) => {
        console.error(`Could not set up search: ${error}.`);
        remove();
      });
    });
  }
  function createSearchElement(api, elem, sidebarElement, closeSidebarButton, search) {
    const searchTerm = elem.querySelector("input[data-item-searchterm]");
    const deleteButton = elem.querySelector(".project-search-delete-btn");
    const enterButton = elem.querySelector(".project-search-enter-btn");
    function canSearch(searchValue) {
      return !enterButton.disabled && searchValue.length > 0;
    }
    function startSearch(searchValue) {
      return __async(this, null, function* () {
        enterButton.disabled = true;
        const startTime = Date.now();
        const results = yield search.search(searchValue);
        shaLogEvent({
          id: "project-search:show-results",
          el: enterButton,
          data: {
            termLength: searchValue.length,
            termWordCount: searchValue.split(" ").filter((w) => w).length,
            searchTime: Date.now() - startTime,
            resultsStoryCount: results.length
          }
        });
        return results;
      });
    }
    function endSearch() {
      enterButton.disabled = false;
    }
    function toggleSearchAndDeleteButtons(showEnterButton) {
      enterButton.style.display = showEnterButton ? "inline" : "none";
      deleteButton.style.display = showEnterButton ? "none" : "inline";
    }
    function clearInputAndSearchResults(input) {
      input.value = "";
      clearSearchResults(sidebarElement);
      toggleSearchAndDeleteButtons(false);
    }
    function updateSearchResults(input) {
      return __async(this, null, function* () {
        const searchValue = input.value.trim();
        if (canSearch(searchValue)) {
          try {
            clearSearchResults(sidebarElement);
            const template = sidebarElement.querySelector("template[data-project-search-results-template]");
            const searchResults = yield startSearch(searchValue);
            const list = createSearchResultList(api, searchResults, template);
            sidebarElement.querySelector(".project-sidebar-container").append(list);
            applyEmbedNavigationIfNeeded(sidebarElement);
          } catch (err) {
            console.error(`Error searching project: ${err}`);
          } finally {
            toggleSearchAndDeleteButtons(false);
            endSearch();
          }
        }
      });
    }
    function checkIfInputDeleted(input) {
      if (input.value.trim() === "") {
        toggleSearchAndDeleteButtons(false);
        clearSearchResults(sidebarElement);
      } else if (!sidebarElement.querySelector(".project-search-results")) {
        toggleSearchAndDeleteButtons(true);
      }
    }
    searchTerm.onkeydown = (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        updateSearchResults(searchTerm);
      }
    };
    searchTerm.addEventListener("input", () => {
      checkIfInputDeleted(searchTerm);
    });
    deleteButton.onclick = () => {
      clearInputAndSearchResults(searchTerm);
    };
    closeSidebarButton.onclick = () => {
      clearInputAndSearchResults(searchTerm);
    };
    enterButton.onclick = () => {
      updateSearchResults(searchTerm);
    };
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && sidebarElement.classList.contains("project-search--isActive")) {
        sidebarElement.classList.remove("project-search--isActive");
        clearInputAndSearchResults(searchTerm);
      }
    });
  }
  function clearSearchResults(sidebarElement) {
    const existingResults = sidebarElement.querySelector(".project-search-results");
    if (existingResults) {
      existingResults.remove();
    }
  }
  function createSearchResultList(api, results, template) {
    const resultItems = document.createElement("ul");
    resultItems.className = "project-search-results";
    const noResultListItem = `
   <li class="no-result-list--item">
      <span class="no-results-heading"> No matching results </span>
      <span>You could try: </span>
  
      <span class="search-options">related, or more general words</span>
      <span class="search-options">alternate spelling</span>
    </li>
  `;
    if ("content" in template && results.length > 0) {
      results.forEach((result, idx) => {
        resultItems.append(createSearchResultListItem(api, result, idx, template));
      });
    } else {
      resultItems.innerHTML = noResultListItem;
    }
    return resultItems;
  }
  function createSearchResultListItem(api, result, idx, template) {
    var _a, _b, _c, _d, _e, _f;
    const projectPage = api.getProjectPage(result.getPageId());
    const matchedSnippet = result.getSnippet();
    const item = document.createElement("li");
    item.className = "project-story-list-item";
    const storyTextContainer = template == null ? void 0 : template.content.cloneNode(true);
    const storyLink = storyTextContainer.querySelector(".project-image-link");
    setProjectPageLink(api, projectPage.url, storyLink);
    storyLink.addEventListener("click", () => {
      shaLogEvent({
        id: "project-search:select-result",
        el: storyLink,
        data: {
          url: projectPage.url,
          location: window.location.href,
          resultIdx: idx,
          publishUrl: api.publishUrl,
          isEmbed: api.isEmbed
        }
      });
    });
    const storyImage = storyTextContainer.querySelector("[data-project-search-result-image]");
    if (storyImage) {
      storyImage.src = (_b = (_a = projectPage.cover) == null ? void 0 : _a.url) != null ? _b : "";
      storyImage.alt = `Cover for ${projectPage.title}`;
    }
    const storySwatch = storyTextContainer.querySelector("[data-project-search-result-swatch]");
    if (storySwatch) {
      storySwatch.style.backgroundColor = (_d = (_c = projectPage.colors) == null ? void 0 : _c.backgroundColor) != null ? _d : "white";
    }
    if (projectPage.cover) {
      storySwatch == null ? void 0 : storySwatch.remove();
    } else {
      storyImage == null ? void 0 : storyImage.remove();
    }
    storyTextContainer.querySelector(".project-match-snippet-container").innerHTML = matchedSnippet;
    storyTextContainer.querySelector(".project-story-title").textContent = projectPage.title;
    storyTextContainer.querySelector(".project-story-description").textContent = ((_e = projectPage.description) == null ? void 0 : _e.length) > 50 ? ((_f = projectPage.description) == null ? void 0 : _f.substring(0, 50)) + "..." : projectPage.description;
    item.appendChild(storyTextContainer);
    return item;
  }

  // ../story/src/project/index.ts
  function initProject() {
    if (!window.hasOwnProperty("$shproject") || window.$shproject === void 0) {
      return;
    }
    let created = false;
    const project = {
      create: () => __async(this, null, function* () {
        if (!created) {
          created = true;
          const config = window.$shproject;
          let api = Promise.resolve(null);
          if (config.index) {
            api = Promise.resolve(
              new ProjectApi(config, config.index, {
                search: () => __async(this, null, function* () {
                  return {
                    search: () => __async(this, null, function* () {
                      return [];
                    })
                  };
                })
              })
            );
          } else {
            const baseUrl = config.publishUrl.replace(config.pageUri, "");
            const loader = makeScriptLoader(baseUrl);
            api = loader("project.js").then(
              () => new ProjectApi(window.$shproject, window.$shproject.index, {
                search: () => __async(this, null, function* () {
                  yield loader(window.$shproject.index.manifest["project-search.js"]);
                  return window.$shproject_ext_search(baseUrl);
                })
              })
            );
          }
          window.Shorthand.project.get = () => api;
        }
      }),
      get: () => __async(this, null, function* () {
        console.error("Project API is not ready yet");
        return null;
      })
    };
    if (!window.hasOwnProperty("Shorthand")) {
      window.Shorthand = { project };
    } else if (!window.Shorthand.hasOwnProperty("project")) {
      window.Shorthand.project = project;
    }
    if (!window.Shorthand.project.get) {
      window.Shorthand.project.get = project.get;
    }
    if (!window.Shorthand.project.create) {
      window.Shorthand.project.create = project.create;
    }
    window.Shorthand.project.create().catch(console.error);
    window.Shorthand.project.get().then((api) => {
      if (!api)
        return;
      initHeader(api);
      initFooter(api);
      initSocialShareButtons();
      populateRelatedStories(api);
    }).catch(console.error);
  }
  function makeScriptLoader(baseUrl) {
    return function loadScript(uri) {
      return new Promise((resolve, reject) => {
        const script = document.createElement("script");
        script.src = `${baseUrl}${uri}`;
        script.addEventListener("load", () => {
          resolve();
        });
        script.addEventListener("error", reject);
        query("#article").appendChild(script);
      });
    };
  }
  function initHeader(api) {
    const headerElement = query("[data-project-header]");
    const header = api.getHeaderNavigation();
    const projectHasNav = header.option !== "D";
    if (!headerElement || !header.isEnabled)
      return;
    headerElement.classList.remove("Theme-HeaderContainer--hidden");
    applyNavigationConfig(api, headerElement, header);
    if (projectHasNav) {
      createNavigation(api, headerElement, header, "header");
    } else {
      headerElement.querySelector(".Navigation__hamburger").remove();
    }
    createSearch(api, headerElement, header);
    createSocials(headerElement, header, "header");
    const navLinks = queryAll(".Project-Header--center a");
    navLinks.forEach(
      (navLink) => navLink.addEventListener("focus", function() {
        const hamburger = query(".Navigation__hamburger");
        if (!hamburger)
          return;
        const isHamburgerVisibleClosed = hamburger.style.display != "none" && hamburger.getAttribute("aria-expanded") === "false";
        if (isHamburgerVisibleClosed) {
          hamburger.focus();
        }
      })
    );
    initBurgerNav();
  }
  function initFooter(api) {
    const footerElement = query("[data-project-footer]");
    const footer = api.getFooterNavigation();
    if (!footerElement || !footer.isEnabled)
      return;
    applyNavigationConfig(api, footerElement, footer);
    createNavigation(api, footerElement, footer, "footer");
    createSocials(footerElement, footer, "footer");
  }
  function applyNavigationConfig(api, navigationElement, navigation) {
    var _a;
    navigationElement.style.removeProperty("display");
    const storyNav = queryAll(".Theme-NavigationBar")[1];
    if (navigation.color) {
      navigationElement.style.backgroundColor = (_a = navigation.color) == null ? void 0 : _a.color;
      if (storyNav && navigation.color) {
        storyNav.style.backgroundColor = navigation.color.color;
      }
    }
    if (navigation.fontColor && storyNav) {
      Array.from(storyNav.querySelectorAll(".Theme-NavigationBarItem")).forEach((item) => {
        item.style.color = navigation.fontColor.color;
      });
    }
    navigationElement.classList.add(`ProjectNavigation--${navigation.option}`);
    const logosElement = query("[data-project-logos]", navigationElement);
    if (logosElement) {
      populateLogos(api, navigation.logos, navigation.showThemeLogos, logosElement);
    }
  }
  function createNavigation(api, navigationElement, navigation, target) {
    const navListWrapper = navigationElement.querySelector(".Navigation");
    if (navigation.color) {
      navListWrapper.style.backgroundColor = navigation.color.color;
    }
    const navList = navigationElement.querySelector("ul");
    navigation.items.forEach((item) => {
      var _a, _b, _c;
      const navItem = document.createElement("li");
      navItem.style.color = (_a = navigation.fontColor) == null ? void 0 : _a.color;
      navItem.className = "Navigation__item Theme-NavigationBarItem";
      const navLink = document.createElement(item.url ? "a" : "span");
      navLink.className = "Theme-NavigationLink";
      navLink.setAttribute("data-story-nav-item", "true");
      navLink.textContent = item.label;
      if (item.url) {
        setProjectPageLink(api, item.url, navLink);
      }
      navItem.appendChild(navLink);
      navList.appendChild(navItem);
      if (item.children.length > 0) {
        let handleDropDownTrap = function(firstLink2, lastLink2) {
          return (e) => {
            if (e.key === "Tab") {
              if (e.shiftKey) {
                if (document.activeElement === firstLink2) {
                  e.preventDefault();
                  lastLink2.focus();
                }
              } else {
                if (document.activeElement === lastLink2) {
                  e.preventDefault();
                  firstLink2.focus();
                }
              }
            } else if (e.key === "Escape") {
              navItem.classList.remove("isOpen");
              const navButton = document.querySelector(".Navigation__button");
              navButton.setAttribute("aria-expanded", "false");
              lastActiveElement == null ? void 0 : lastActiveElement.focus();
            }
          };
        };
        navItem.classList.add("hasMenu");
        const childrenList = document.createElement("ul");
        childrenList.className = `Navigation__subMenu Theme-ProjectNavigation-subMenu`;
        childrenList.style.backgroundColor = (_b = navigation.color) == null ? void 0 : _b.color;
        childrenList.setAttribute("role", "menu");
        let firstLink;
        let lastLink;
        let lastActiveElement;
        if (target === "header") {
          const button = document.createElement("button");
          button.className = "Navigation__button";
          button.style.color = (_c = navigation.fontColor) == null ? void 0 : _c.color;
          button.setAttribute("aria-label", `show submenu for ${item.label}`);
          button.addEventListener("click", function() {
            const parent = this.parentNode;
            if (parent.className.includes("isOpen")) {
              parent.classList.remove("isOpen");
              this.setAttribute("aria-expanded", "false");
            } else {
              parent.classList.add("isOpen");
              this.setAttribute("aria-expanded", "true");
              lastActiveElement = document.activeElement;
              if (firstLink && lastLink) {
                navItem.addEventListener("keydown", handleDropDownTrap(firstLink, lastLink));
              }
            }
          });
          const span = document.createElement("span");
          span.className = "menuCaret";
          button.appendChild(span);
          navItem.addEventListener("mouseenter", function() {
            this.classList.add("isOpen");
            button.setAttribute("aria-expanded", "true");
          });
          navItem.addEventListener("mouseleave", function() {
            this.classList.remove("isOpen");
            button.setAttribute("aria-expanded", "false");
          });
          navItem.appendChild(button);
        }
        item.children.forEach((child, index) => {
          const childItem = document.createElement("li");
          childItem.className = "Navigation__item Theme-NavigationBarItem Theme-ProjectNavigation-subItem";
          childItem.setAttribute("role", "menuitem");
          const childLink = document.createElement("a");
          childLink.className = "Theme-NavigationLink";
          childLink.textContent = child.label;
          if (target === "header") {
            firstLink = index === 0 ? childLink : firstLink;
            lastLink = index === item.children.length - 1 ? childLink : lastLink;
          }
          setProjectPageLink(api, child.url, childLink);
          childItem.appendChild(childLink);
          childrenList.appendChild(childItem);
        });
        navItem.appendChild(childrenList);
      }
    });
    applyEmbedNavigationIfNeeded(navList);
  }
  function createSocials(navElement, navigation, target) {
    const url = encodeURIComponent(document.location.href);
    const themeSocialIcons = target === "header" ? navElement.querySelector(".Project-Header--right .Theme-SocialIcons") : navElement.querySelector(".Project-Footer--right .Theme-SocialIcons");
    if (navigation.social.showTwitter) {
      const data = JSON.parse(themeSocialIcons.getAttribute("data-text"));
      const span = document.createElement("span");
      span.className = "Theme-SocialButton";
      const link = document.createElement("a");
      link.className = "Theme-TwitterButton";
      link.href = `https://twitter.com/intent/tweet?url=${url}${data.text}${data.via}`;
      link.setAttribute("data-social-share", "twitter");
      link.setAttribute("data-testid", "Header--btn-Twitter");
      span.appendChild(link);
      themeSocialIcons.appendChild(span);
    }
    if (navigation.social.showFacebook) {
      const span = document.createElement("span");
      span.className = "Theme-SocialButton";
      const link = document.createElement("a");
      link.className = "Theme-FacebookButton Theme-FaceboookButton";
      link.href = `https://www.facebook.com/sharer/sharer.php?u=${url}`;
      link.setAttribute("data-social-share", "facebook");
      link.setAttribute("data-testid", "Header--btn-Facebook");
      span.appendChild(link);
      themeSocialIcons.appendChild(span);
    }
    if (navigation.social.showLinkedIn) {
      const span = document.createElement("span");
      span.className = "Theme-SocialButton";
      const link = document.createElement("a");
      link.className = "Theme-LIButton";
      link.href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}`;
      link.setAttribute("data-social-share", "linkedin");
      link.setAttribute("data-testid", "Header--btn-LinkedIn");
      span.appendChild(link);
      themeSocialIcons.appendChild(span);
    }
  }
  function insecureShuffle(arr) {
    let idx = arr.length;
    while (idx > 0) {
      const randomIdx = Math.floor(Math.random() * idx);
      idx--;
      const a = arr[idx];
      arr[idx] = arr[randomIdx];
      arr[randomIdx] = a;
    }
    return arr;
  }
  function populateRelatedStories(api) {
    queryAll("[data-related-stories]").forEach((sec) => {
      const ul = query("ul[data-related-stories-list]", sec);
      if (ul) {
        return populateRelatedStoriesList(api, sec, ul);
      }
      const ulMap = query("ul[data-related-stories-site-map]", sec);
      if (ulMap) {
        return populateSiteMap(api, ulMap);
      }
    });
  }
  function populateRelatedStoriesList(api, sec, ul) {
    var _a, _b, _c;
    const page = ul.getAttribute("data-page");
    const listStyle = ul.getAttribute("data-style");
    const filter = (_a = ul.getAttribute("data-filter")) != null ? _a : "list";
    const hasCardTitles = ul.getAttribute("data-content-titles") !== "false";
    const hasCardDescriptions = ul.getAttribute("data-content-descriptions") !== "false";
    const sortOrder = (_b = ul.getAttribute("data-sort-order")) != null ? _b : "Recently published";
    const pages = ul.hasAttribute("data-filter-pages") ? JSON.parse(ul.getAttribute("data-filter-pages")) : [];
    const defaultShape = ul.getAttribute("data-default-shape");
    const defaultCorners = JSON.parse(ul.getAttribute("data-default-corners"));
    const externalLinks = ul.hasAttribute("data-external-links") ? JSON.parse(ul.getAttribute("data-external-links")) : [];
    const itemOverrides = ul.hasAttribute("data-item-overrides") ? JSON.parse(ul.getAttribute("data-item-overrides")) : [];
    let limit;
    if (ul.hasAttribute("data-limit")) {
      limit = (_c = parseInt(ul.getAttribute("data-limit"))) != null ? _c : void 0;
    }
    let relatedPageIds = pages;
    switch (filter) {
      case "subtree":
        const { relation, relationNodeId, includeSelfInList } = ul.hasAttribute("data-filter-subtree") ? JSON.parse(ul.getAttribute("data-filter-subtree")) : { relation: "children", relationNodeId: page, includeSelfInList: false };
        relatedPageIds = api.getSubpageIds(relation, relationNodeId, page, includeSelfInList);
        break;
      case "tags":
        const tagRule = ul.hasAttribute("data-filter-tag-rule") ? ul.getAttribute("data-filter-tag-rule") : "any";
        const tags = ul.hasAttribute("data-filter-tags") ? JSON.parse(ul.getAttribute("data-filter-tags")) : [];
        relatedPageIds = api.getTaggedPageIds(tags, tagRule).filter((id) => id !== page);
        break;
    }
    let relatedPages = relatedPageIds.map((id) => {
      const link = externalLinks.find((l) => l.id === id);
      const itemOverride = itemOverrides == null ? void 0 : itemOverrides.find((o) => o.id === id);
      return link ? api.externalLinkToProjectPage(link) : api.getProjectPage(id, itemOverride);
    }).filter((p) => p);
    switch (sortOrder) {
      case "Recently published":
        relatedPages.sort((a, b) => b.publishedAt.getTime() - a.publishedAt.getTime());
        break;
      case "A - Z":
        relatedPages.sort((a, b) => a.title.localeCompare(b.title));
        break;
      case "Z - A":
        relatedPages.sort((a, b) => b.title.localeCompare(a.title));
        break;
      case "Random":
        insecureShuffle(relatedPages);
        break;
      case "Manually sorted":
        const sortedPages = [];
        let unsortedPages = [...relatedPages];
        for (const pageId of pages) {
          const sortedPage = relatedPages.find((p) => p.pageId === pageId);
          if (sortedPage) {
            sortedPages.push(sortedPage);
            unsortedPages = unsortedPages.filter((p) => p.pageId !== pageId);
          }
        }
        relatedPages = sortedPages.concat(unsortedPages);
    }
    const relatedItems = relatedPages.slice(0, limit);
    if (relatedItems.length === 0) {
      sec.remove();
      return;
    }
    const template = query('[data-template="item"]', ul);
    if (!template) {
      sec.remove();
      return;
    }
    queryAll("[data-template]", ul).forEach((t) => {
      t.removeAttribute("data-template");
      template.remove();
      template.style.removeProperty("display");
    });
    function applyShaping(t, item) {
      var _a2;
      const itemOverride = (_a2 = externalLinks.find((i) => i.id === item.pageId)) != null ? _a2 : itemOverrides.find((i) => i.id == item.pageId);
      let shape = defaultShape || (itemOverride == null ? void 0 : itemOverride.shape);
      if (!["List", "Card"].includes(listStyle))
        shape = "uncropped";
      if (shape) {
        t.classList.add(`crop-${shape}`);
      }
      if (shape !== "circle") {
        const corners = __spreadValues({
          topLeft: 0,
          topRight: 0,
          bottomLeft: 0,
          bottomRight: 0
        }, defaultShape ? defaultCorners : itemOverride == null ? void 0 : itemOverride.corners);
        t.style.overflow = "hidden";
        t.style.borderTopLeftRadius = corners.topLeft + "rem";
        t.style.borderTopRightRadius = corners.topRight + "rem";
        t.style.borderBottomLeftRadius = corners.bottomLeft + "rem";
        t.style.borderBottomRightRadius = corners.bottomRight + "rem";
      }
    }
    relatedItems.forEach((item) => {
      const clone = template.cloneNode(true);
      ul.appendChild(clone);
      const templateUrl = queryAll("a[data-item-url]", clone);
      const templateMedia = queryAll("img[data-item-media]", clone);
      const templateTitle = queryAll("[data-item-title]", clone);
      const templateDescription = queryAll("[data-item-description]", clone);
      const templateImage = queryAll("[data-item-image]", clone);
      templateUrl.forEach((t) => {
        setProjectPageLink(api, item.url, t);
        if (item.cover) {
          t.style.backgroundColor = "transparent";
        } else if (!["Card", "List"].includes(listStyle)) {
          t.style.backgroundColor = "black";
          applyShaping(t, item);
        }
      });
      if (item.cover) {
        templateMedia.forEach((t) => t.setAttribute("src", item.cover.url));
        templateMedia.forEach((t) => t.setAttribute("alt", `Cover image for ${item.title}`));
      }
      templateTitle.forEach((t) => {
        t.textContent = item.title;
        if (!hasCardTitles)
          t.style.display = "none";
      });
      templateDescription.forEach((t) => {
        var _a2;
        t.textContent = (_a2 = item.description) != null ? _a2 : "";
        if (!hasCardDescriptions)
          t.style.display = "none";
      });
      templateImage.forEach((t) => {
        applyShaping(t, item);
      });
      templateTitle.forEach((t) => t.textContent = item.title);
      templateDescription.forEach((t) => {
        var _a2;
        return t.textContent = (_a2 = item.description) != null ? _a2 : "";
      });
      applyEmbedNavigationIfNeeded(clone);
      if (item.cover) {
        queryAll("source[data-item-mediasource]", clone).forEach((templateSource) => {
          item.cover.sources.forEach((source) => {
            const sourceElem = templateSource.cloneNode();
            const nextNode = templateSource.nextSibling;
            sourceElem.srcset = source.srcSet;
            sourceElem.type = source.type;
            templateSource.parentElement.insertBefore(sourceElem, nextNode);
          });
          templateSource.remove();
        });
      } else {
        queryAll(".related-story-image", clone).forEach((div) => div.remove());
      }
    });
  }
  function populateSiteMap(api, ulOuter) {
    const templates = queryAll("[data-template]", ulOuter);
    const pageTemplate = query('[data-template="page"]', ulOuter);
    const nodeTemplate = query('[data-template="node"]', ulOuter);
    templates.forEach((t) => {
      t.removeAttribute("data-template");
      t.remove();
      t.style.removeProperty("display");
    });
    function renderNodeToList(id, ul) {
      var _a;
      const node = api.index.nodes[id];
      if (!node) {
        return;
      }
      const page = api.index.pages[node.page];
      if (!page && !node)
        return;
      const template = page ? pageTemplate : nodeTemplate;
      const elem = template.cloneNode(true);
      const url = node.page ? api.getPageUrl(node.page) : "";
      const label = page ? page.title : node.label;
      queryAll("[data-item-title]", elem).forEach((e) => {
        e.textContent = label;
      });
      queryAll("a[data-item-url]", elem).forEach((e) => {
        e.setAttribute("href", url);
      });
      const ul2 = query("ul[data-item-children]", elem);
      ul2 && ((_a = node.children) != null ? _a : []).forEach((childId) => renderNodeToList(childId, ul2));
      ul.appendChild(elem);
    }
    api.index.roots.forEach((id) => renderNodeToList(id, ulOuter));
  }
  function populateLogos(api, logos, showThemeLogos, root) {
    const templates = queryAll("[data-template]", root);
    const linkTemplate = query('[data-template="link"]', root);
    const nolinkTemplate = query('[data-template="no-link"]', root);
    if (!linkTemplate || !nolinkTemplate) {
      root.remove();
      return;
    }
    if (!showThemeLogos) {
      const themeLogos = queryAll("[data-themelogos]", root);
      themeLogos.forEach((t) => t.remove());
    }
    templates.forEach((t) => t.remove());
    for (const { link, media } of logos) {
      const template = link ? linkTemplate : nolinkTemplate;
      const clone = template.cloneNode(true);
      const altDefault = Object.values(media).reduce((a, { alt }) => a || alt, "");
      for (const img of queryAll("img[data-logo-img]", clone)) {
        if (!applyLogoMediaToImage(api, img, media, altDefault)) {
          img.remove();
        }
      }
      if (link) {
        for (const a of queryAll("a[data-logo-link]", clone)) {
          applyLogoLinkToAnchor(a, link);
        }
      }
      root.appendChild(clone);
    }
  }
  function applyLogoMediaToImage(api, img, media, altTextDefault) {
    const type = img.getAttribute("data-logo-img");
    if (type in media) {
      const { src, alt } = media[type];
      img.setAttribute("src", api.publishUrl + src.replace(api.baseUrl, ""));
      if (alt || altTextDefault) {
        img.setAttribute("alt", alt || altTextDefault);
      }
      return true;
    }
    return false;
  }
  function applyLogoLinkToAnchor(a, link) {
    var _a;
    a.setAttribute("href", link.href);
    if (link.blank) {
      a.setAttribute("target", "_blank");
    }
    const rels = new Set((_a = a.getAttribute("rel")) != null ? _a : []);
    if (link.noreferrer) {
      rels.add("noreferrer");
    }
    if (link.nofollow) {
      rels.add("nofollow");
    }
    if (rels.size > 0) {
      a.setAttribute("rels", Array.from(rels).join(" "));
    }
  }

  // ../story/src/project.entry.js
  initProject();
})();
/*! Bundled license information:

classnames/dedupe.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=project.local.min.js.map
