(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../node_modules/.pnpm/fastdom@1.0.12/node_modules/fastdom/fastdom.js
  var require_fastdom = __commonJS({
    "../node_modules/.pnpm/fastdom@1.0.12/node_modules/fastdom/fastdom.js"(exports, module) {
      !function(win) {
        "use strict";
        var debug = 0 ? console.log.bind(console, "[fastdom]") : function() {
        };
        var raf = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.msRequestAnimationFrame || function(cb) {
          return setTimeout(cb, 16);
        };
        function FastDom() {
          var self = this;
          self.reads = [];
          self.writes = [];
          self.raf = raf.bind(win);
          debug("initialized", self);
        }
        FastDom.prototype = {
          constructor: FastDom,
          /**
           * We run this inside a try catch
           * so that if any jobs error, we
           * are able to recover and continue
           * to flush the batch until it's empty.
           *
           * @param {Array} tasks
           */
          runTasks: function(tasks) {
            debug("run tasks");
            var task;
            while (task = tasks.shift())
              task();
          },
          /**
           * Adds a job to the read batch and
           * schedules a new frame if need be.
           *
           * @param  {Function} fn
           * @param  {Object} ctx the context to be bound to `fn` (optional).
           * @public
           */
          measure: function(fn, ctx) {
            debug("measure");
            var task = !ctx ? fn : fn.bind(ctx);
            this.reads.push(task);
            scheduleFlush(this);
            return task;
          },
          /**
           * Adds a job to the
           * write batch and schedules
           * a new frame if need be.
           *
           * @param  {Function} fn
           * @param  {Object} ctx the context to be bound to `fn` (optional).
           * @public
           */
          mutate: function(fn, ctx) {
            debug("mutate");
            var task = !ctx ? fn : fn.bind(ctx);
            this.writes.push(task);
            scheduleFlush(this);
            return task;
          },
          /**
           * Clears a scheduled 'read' or 'write' task.
           *
           * @param {Object} task
           * @return {Boolean} success
           * @public
           */
          clear: function(task) {
            debug("clear", task);
            return remove(this.reads, task) || remove(this.writes, task);
          },
          /**
           * Extend this FastDom with some
           * custom functionality.
           *
           * Because fastdom must *always* be a
           * singleton, we're actually extending
           * the fastdom instance. This means tasks
           * scheduled by an extension still enter
           * fastdom's global task queue.
           *
           * The 'super' instance can be accessed
           * from `this.fastdom`.
           *
           * @example
           *
           * var myFastdom = fastdom.extend({
           *   initialize: function() {
           *     // runs on creation
           *   },
           *
           *   // override a method
           *   measure: function(fn) {
           *     // do extra stuff ...
           *
           *     // then call the original
           *     return this.fastdom.measure(fn);
           *   },
           *
           *   ...
           * });
           *
           * @param  {Object} props  properties to mixin
           * @return {FastDom}
           */
          extend: function(props) {
            debug("extend", props);
            if (typeof props != "object")
              throw new Error("expected object");
            var child = Object.create(this);
            mixin(child, props);
            child.fastdom = this;
            if (child.initialize)
              child.initialize();
            return child;
          },
          // override this with a function
          // to prevent Errors in console
          // when tasks throw
          catch: null
        };
        function scheduleFlush(fastdom3) {
          if (!fastdom3.scheduled) {
            fastdom3.scheduled = true;
            fastdom3.raf(flush.bind(null, fastdom3));
            debug("flush scheduled");
          }
        }
        function flush(fastdom3) {
          debug("flush");
          var writes = fastdom3.writes;
          var reads = fastdom3.reads;
          var error;
          try {
            debug("flushing reads", reads.length);
            fastdom3.runTasks(reads);
            debug("flushing writes", writes.length);
            fastdom3.runTasks(writes);
          } catch (e) {
            error = e;
          }
          fastdom3.scheduled = false;
          if (reads.length || writes.length)
            scheduleFlush(fastdom3);
          if (error) {
            debug("task errored", error.message);
            if (fastdom3.catch)
              fastdom3.catch(error);
            else
              throw error;
          }
        }
        function remove(array, item) {
          var index = array.indexOf(item);
          return !!~index && !!array.splice(index, 1);
        }
        function mixin(target, source) {
          for (var key in source) {
            if (source.hasOwnProperty(key))
              target[key] = source[key];
          }
        }
        var exports2 = win.fastdom = win.fastdom || new FastDom();
        if (false)
          (void 0)(function() {
            return exports2;
          });
        else if (typeof module == "object")
          module.exports = exports2;
      }(typeof window !== "undefined" ? window : typeof exports != "undefined" ? exports : globalThis);
    }
  });

  // ../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/dedupe.js
  var require_dedupe = __commonJS({
    "../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/dedupe.js"(exports, module) {
      (function() {
        "use strict";
        var classNames = function() {
          function StorageObject() {
          }
          StorageObject.prototype = /* @__PURE__ */ Object.create(null);
          function _parseArray(resultSet, array) {
            var length = array.length;
            for (var i = 0; i < length; ++i) {
              _parse(resultSet, array[i]);
            }
          }
          var hasOwn = {}.hasOwnProperty;
          function _parseNumber(resultSet, num) {
            resultSet[num] = true;
          }
          function _parseObject(resultSet, object) {
            if (object.toString !== Object.prototype.toString && !object.toString.toString().includes("[native code]")) {
              resultSet[object.toString()] = true;
              return;
            }
            for (var k in object) {
              if (hasOwn.call(object, k)) {
                resultSet[k] = !!object[k];
              }
            }
          }
          var SPACE = /\s+/;
          function _parseString(resultSet, str) {
            var array = str.split(SPACE);
            var length = array.length;
            for (var i = 0; i < length; ++i) {
              resultSet[array[i]] = true;
            }
          }
          function _parse(resultSet, arg) {
            if (!arg)
              return;
            var argType = typeof arg;
            if (argType === "string") {
              _parseString(resultSet, arg);
            } else if (Array.isArray(arg)) {
              _parseArray(resultSet, arg);
            } else if (argType === "object") {
              _parseObject(resultSet, arg);
            } else if (argType === "number") {
              _parseNumber(resultSet, arg);
            }
          }
          function _classNames() {
            var len = arguments.length;
            var args = Array(len);
            for (var i = 0; i < len; i++) {
              args[i] = arguments[i];
            }
            var classSet = new StorageObject();
            _parseArray(classSet, args);
            var list = [];
            for (var k in classSet) {
              if (classSet[k]) {
                list.push(k);
              }
            }
            return list.join(" ");
          }
          return _classNames;
        }();
        if (typeof module !== "undefined" && module.exports) {
          classNames.default = classNames;
          module.exports = classNames;
        } else if (false) {
          (void 0)("classnames", [], function() {
            return classNames;
          });
        } else {
          window.classNames = classNames;
        }
      })();
    }
  });

  // ../node_modules/.pnpm/sniffr@1.2.0/node_modules/sniffr/src/sniffr.js
  var require_sniffr = __commonJS({
    "../node_modules/.pnpm/sniffr@1.2.0/node_modules/sniffr/src/sniffr.js"(exports, module) {
      (function(host) {
        var properties = {
          browser: [
            [/msie ([\.\_\d]+)/, "ie"],
            [/trident\/.*?rv:([\.\_\d]+)/, "ie"],
            [/firefox\/([\.\_\d]+)/, "firefox"],
            [/chrome\/([\.\_\d]+)/, "chrome"],
            [/version\/([\.\_\d]+).*?safari/, "safari"],
            [/mobile safari ([\.\_\d]+)/, "safari"],
            [/android.*?version\/([\.\_\d]+).*?safari/, "com.android.browser"],
            [/crios\/([\.\_\d]+).*?safari/, "chrome"],
            [/opera/, "opera"],
            [/opera\/([\.\_\d]+)/, "opera"],
            [/opera ([\.\_\d]+)/, "opera"],
            [/opera mini.*?version\/([\.\_\d]+)/, "opera.mini"],
            [/opios\/([a-z\.\_\d]+)/, "opera"],
            [/blackberry/, "blackberry"],
            [/blackberry.*?version\/([\.\_\d]+)/, "blackberry"],
            [/bb\d+.*?version\/([\.\_\d]+)/, "blackberry"],
            [/rim.*?version\/([\.\_\d]+)/, "blackberry"],
            [/iceweasel\/([\.\_\d]+)/, "iceweasel"],
            [/edge\/([\.\d]+)/, "edge"]
          ],
          os: [
            [/linux ()([a-z\.\_\d]+)/, "linux"],
            [/mac os x/, "macos"],
            [/mac os x.*?([\.\_\d]+)/, "macos"],
            [/os ([\.\_\d]+) like mac os/, "ios"],
            [/openbsd ()([a-z\.\_\d]+)/, "openbsd"],
            [/android/, "android"],
            [/android ([a-z\.\_\d]+);/, "android"],
            [/mozilla\/[a-z\.\_\d]+ \((?:mobile)|(?:tablet)/, "firefoxos"],
            [/windows\s*(?:nt)?\s*([\.\_\d]+)/, "windows"],
            [/windows phone.*?([\.\_\d]+)/, "windows.phone"],
            [/windows mobile/, "windows.mobile"],
            [/blackberry/, "blackberryos"],
            [/bb\d+/, "blackberryos"],
            [/rim.*?os\s*([\.\_\d]+)/, "blackberryos"]
          ],
          device: [
            [/ipad/, "ipad"],
            [/iphone/, "iphone"],
            [/lumia/, "lumia"],
            [/htc/, "htc"],
            [/nexus/, "nexus"],
            [/galaxy nexus/, "galaxy.nexus"],
            [/nokia/, "nokia"],
            [/ gt\-/, "galaxy"],
            [/ sm\-/, "galaxy"],
            [/xbox/, "xbox"],
            [/(?:bb\d+)|(?:blackberry)|(?: rim )/, "blackberry"]
          ]
        };
        var UNKNOWN = "Unknown";
        var propertyNames = Object.keys(properties);
        function Sniffr2() {
          var self = this;
          propertyNames.forEach(function(propertyName) {
            self[propertyName] = {
              name: UNKNOWN,
              version: [],
              versionString: UNKNOWN
            };
          });
        }
        function determineProperty(self, propertyName, userAgent) {
          properties[propertyName].forEach(function(propertyMatcher) {
            var propertyRegex = propertyMatcher[0];
            var propertyValue = propertyMatcher[1];
            var match = userAgent.match(propertyRegex);
            if (match) {
              self[propertyName].name = propertyValue;
              if (match[2]) {
                self[propertyName].versionString = match[2];
                self[propertyName].version = [];
              } else if (match[1]) {
                self[propertyName].versionString = match[1].replace(/_/g, ".");
                self[propertyName].version = parseVersion(match[1]);
              } else {
                self[propertyName].versionString = UNKNOWN;
                self[propertyName].version = [];
              }
            }
          });
        }
        function parseVersion(versionString) {
          return versionString.split(/[\._]/).map(function(versionPart) {
            return parseInt(versionPart);
          });
        }
        Sniffr2.prototype.sniff = function(userAgentString) {
          var self = this;
          var isBrowser = typeof window !== "undefined";
          var fallbackUserAgent = isBrowser ? navigator.userAgent : "";
          var userAgent = (userAgentString || fallbackUserAgent).toLowerCase();
          propertyNames.forEach(function(propertyName) {
            determineProperty(self, propertyName, userAgent);
          });
          return this;
        };
        if (typeof module !== "undefined" && module.exports) {
          module.exports = Sniffr2;
        } else {
          host.Sniffr = new Sniffr2();
          host.Sniffr.sniff(navigator.userAgent);
        }
      })(exports);
    }
  });

  // ../node_modules/.pnpm/lodash.once@4.1.1/node_modules/lodash.once/index.js
  var require_lodash = __commonJS({
    "../node_modules/.pnpm/lodash.once@4.1.1/node_modules/lodash.once/index.js"(exports, module) {
      var FUNC_ERROR_TEXT = "Expected a function";
      var INFINITY = 1 / 0;
      var MAX_INTEGER = 17976931348623157e292;
      var NAN = 0 / 0;
      var symbolTag = "[object Symbol]";
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      function before(n, func) {
        var result;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = void 0;
          }
          return result;
        };
      }
      function once3(func) {
        return before(2, func);
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      function toInteger(value) {
        var result = toFinite(value), remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, "");
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module.exports = once3;
    }
  });

  // ../story/src/device-detect/ios-iframe-hack.ts
  function initIosIframeHack() {
    const isIos = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    const isIframe = window.top !== window;
    if (isIos && isIframe) {
      document.documentElement.classList.add("DeviceDetect--isiOS", "DeviceDetect--isiFrame");
    }
  }

  // ../story/src/focal-point/index.ts
  var import_fastdom2 = __toESM(require_fastdom());

  // ../story/src/core/globals.ts
  if (!window.hasOwnProperty("Shorthand")) {
    window.Shorthand = {};
  }

  // ../story/src/display-container/full-height-flex.ts
  var import_fastdom = __toESM(require_fastdom());

  // ../story/src/device-detect/index.ts
  var import_dedupe = __toESM(require_dedupe());

  // ../story/src/utils/dom-event-once.ts
  function once(target, eventName, listener, options) {
    function deregister() {
      target.removeEventListener(eventName, handler, options);
    }
    function handler() {
      deregister();
      return listener.apply(this, arguments);
    }
    target.addEventListener(eventName, handler, options);
    return deregister;
  }

  // ../story/src/device-detect/index.ts
  var Sniffr = require_sniffr();

  // ../story/src/dom-helpers/query.ts
  function queryAll(selector, context = null) {
    const queryFrom = getContext(context);
    const nodeList = queryFrom.querySelectorAll(selector);
    return Array.from(nodeList);
  }
  function getContext(defaultContext) {
    if (defaultContext)
      return defaultContext;
    if (window["__shadowRoot"])
      return window["__shadowRoot"].querySelector("article");
    return document;
  }

  // ../story/src/display-container/index.ts
  var facade = {
    getOrientation() {
      if (!window.Shorthand.displayContainer) {
        return window.innerWidth > window.innerHeight ? "landscape" : "portrait";
      }
      return facade.getWidth() > facade.getHeight() ? "landscape" : "portrait";
    },
    getHeight() {
      return window.Shorthand.displayContainer.getCache().height;
    },
    getWidth() {
      return window.Shorthand.displayContainer.getCache().width;
    },
    getTop() {
      return window.Shorthand.displayContainer.getCache().top;
    },
    getBottom() {
      return window.Shorthand.displayContainer.getCache().bottom;
    },
    getVhUnitsInPixels(vhunits) {
      const oneHundredVhInPixels = facade.getHeight();
      return oneHundredVhInPixels * (vhunits / 100);
    },
    getDisplayContainer() {
      return window.Shorthand.displayContainer;
    }
  };
  var display_container_default = facade;

  // ../story/src/focal-point/index.ts
  function initFocalPoints() {
    window.addEventListener("resize", () => setFocalPoints(), { passive: true });
    setFocalPoints();
  }
  function setFocalPoints() {
    import_fastdom2.default.measure(() => {
      const orientation = display_container_default.getOrientation();
      import_fastdom2.default.mutate(() => {
        queryAll("[data-landscape-focal]").forEach((element) => {
          const focal = element.dataset[`${orientation}Focal`];
          if (focal) {
            const target = element.tagName === "PICTURE" ? element.querySelector("img") : element;
            target == null ? void 0 : target.style.setProperty("object-position", focal);
          }
        });
      });
    });
  }
  function exposeInitFocalPointPicture() {
    window.Shorthand.initFocalPointPictures = initFocalPoints;
  }

  // ../story/src/instant-image/index.ts
  var import_dedupe2 = __toESM(require_dedupe());

  // ../story/src/utils/request-animation-frame.ts
  var setTimeout2 = window.setTimeout;
  var clearTimeout = window.clearTimeout;
  var lastTime = 0;
  var rafFallback = (fn) => {
    const currTime = Date.now();
    const timeToCall = Math.max(0, 16 - (currTime - lastTime));
    const id = setTimeout2(() => fn(currTime + timeToCall), timeToCall);
    lastTime = currTime + timeToCall;
    return id;
  };
  var cancelRafFallback = (id) => clearTimeout(id);
  var requestAnimationFrame = window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : rafFallback;
  var cancelAnimationFrame = window.requestAnimationFrame ? window.cancelAnimationFrame.bind(window) : cancelRafFallback;

  // ../story/src/instant-image/index.ts
  function initInstantImages() {
    window.Shorthand.initInstantImage = initInstantImage;
    if (window.SHPreloadInstantImages) {
      window.SHPreloadInstantImages.forEach((el) => {
        initInstantImage(el);
      });
      delete window.SHPreloadInstantImages;
    }
  }
  function hideInstantImage(container) {
    const classNames = {
      "InstantImage--isLoading": false,
      "InstantImage--isLoaded": true
    };
    container.className = (0, import_dedupe2.default)(container.className, classNames);
  }
  function initInstantImage(container) {
    const realImg = container.querySelector("[data-instant-image-real-img]");
    const isRealImgLoaded = realImg.complete;
    const onLoad = () => {
      requestAnimationFrame(() => hideInstantImage(container));
    };
    if (isRealImgLoaded) {
      onLoad();
    } else {
      once(realImg, "load", onLoad);
    }
  }

  // ../story/src/videoplayer/youtube-api-ready-hack.ts
  var import_lodash = __toESM(require_lodash());
  function initYouTubeAPIReadyHack() {
    if (window._onYouTubeIframeAPIReadyWasReplaced)
      return;
    const existingCallback = window.onYouTubeIframeAPIReady;
    const callbacks = existingCallback ? [(0, import_lodash.default)(existingCallback)] : [];
    try {
      Object.defineProperty(window, "onYouTubeIframeAPIReady", {
        set(newCallback) {
          callbacks.push((0, import_lodash.default)(newCallback));
        },
        get() {
          return () => callbacks.forEach((cb) => cb());
        }
      });
    } catch (e) {
    }
    window._onYouTubeIframeAPIReadyWasReplaced = true;
  }

  // ../story/src/head.entry.js
  if (!Object.entries) {
    (function() {
      var hasOwn = Object.prototype.hasOwnProperty;
      Object.entries = function(obj) {
        var entrys = [];
        for (var name in obj) {
          if (hasOwn.call(obj, name)) {
            entrys.push([name, obj[name]]);
          }
        }
        return entrys;
      };
    })();
  }
  initInstantImages();
  exposeInitFocalPointPicture();
  initIosIframeHack();
  initYouTubeAPIReadyHack();
})();
/*! Bundled license information:

classnames/dedupe.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=head.local.min.js.map
