(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/global.js
  var require_global = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/global.js"(exports, module) {
      var check = function(it) {
        return it && it.Math == Math && it;
      };
      module.exports = // eslint-disable-next-line es/no-global-this -- safe
      check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
      check(typeof self == "object" && self) || check(typeof global == "object" && global) || // eslint-disable-next-line no-new-func -- fallback
      function() {
        return this;
      }() || Function("return this")();
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/fails.js
  var require_fails = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/fails.js"(exports, module) {
      module.exports = function(exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/descriptors.js
  var require_descriptors = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/descriptors.js"(exports, module) {
      var fails = require_fails();
      module.exports = !fails(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] != 7;
      });
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-bind-native.js
  var require_function_bind_native = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-bind-native.js"(exports, module) {
      var fails = require_fails();
      module.exports = !fails(function() {
        var test = function() {
        }.bind();
        return typeof test != "function" || test.hasOwnProperty("prototype");
      });
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-call.js
  var require_function_call = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-call.js"(exports, module) {
      var NATIVE_BIND = require_function_bind_native();
      var call = Function.prototype.call;
      module.exports = NATIVE_BIND ? call.bind(call) : function() {
        return call.apply(call, arguments);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-property-is-enumerable.js
  var require_object_property_is_enumerable = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-property-is-enumerable.js"(exports) {
      "use strict";
      var $propertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : $propertyIsEnumerable;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/create-property-descriptor.js
  var require_create_property_descriptor = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/create-property-descriptor.js"(exports, module) {
      module.exports = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-uncurry-this.js
  var require_function_uncurry_this = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-uncurry-this.js"(exports, module) {
      var NATIVE_BIND = require_function_bind_native();
      var FunctionPrototype = Function.prototype;
      var call = FunctionPrototype.call;
      var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
      module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
        return function() {
          return call.apply(fn, arguments);
        };
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/classof-raw.js
  var require_classof_raw = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/classof-raw.js"(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var toString = uncurryThis({}.toString);
      var stringSlice = uncurryThis("".slice);
      module.exports = function(it) {
        return stringSlice(toString(it), 8, -1);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/indexed-object.js
  var require_indexed_object = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/indexed-object.js"(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var classof = require_classof_raw();
      var $Object = Object;
      var split = uncurryThis("".split);
      module.exports = fails(function() {
        return !$Object("z").propertyIsEnumerable(0);
      }) ? function(it) {
        return classof(it) == "String" ? split(it, "") : $Object(it);
      } : $Object;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-null-or-undefined.js
  var require_is_null_or_undefined = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-null-or-undefined.js"(exports, module) {
      module.exports = function(it) {
        return it === null || it === void 0;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/require-object-coercible.js
  var require_require_object_coercible = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/require-object-coercible.js"(exports, module) {
      var isNullOrUndefined = require_is_null_or_undefined();
      var $TypeError = TypeError;
      module.exports = function(it) {
        if (isNullOrUndefined(it))
          throw $TypeError("Can't call method on " + it);
        return it;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-indexed-object.js
  var require_to_indexed_object = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-indexed-object.js"(exports, module) {
      var IndexedObject = require_indexed_object();
      var requireObjectCoercible = require_require_object_coercible();
      module.exports = function(it) {
        return IndexedObject(requireObjectCoercible(it));
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/document-all.js
  var require_document_all = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/document-all.js"(exports, module) {
      var documentAll = typeof document == "object" && document.all;
      var IS_HTMLDDA = typeof documentAll == "undefined" && documentAll !== void 0;
      module.exports = {
        all: documentAll,
        IS_HTMLDDA
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-callable.js
  var require_is_callable = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-callable.js"(exports, module) {
      var $documentAll = require_document_all();
      var documentAll = $documentAll.all;
      module.exports = $documentAll.IS_HTMLDDA ? function(argument) {
        return typeof argument == "function" || argument === documentAll;
      } : function(argument) {
        return typeof argument == "function";
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-object.js
  var require_is_object = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-object.js"(exports, module) {
      var isCallable = require_is_callable();
      var $documentAll = require_document_all();
      var documentAll = $documentAll.all;
      module.exports = $documentAll.IS_HTMLDDA ? function(it) {
        return typeof it == "object" ? it !== null : isCallable(it) || it === documentAll;
      } : function(it) {
        return typeof it == "object" ? it !== null : isCallable(it);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/get-built-in.js
  var require_get_built_in = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/get-built-in.js"(exports, module) {
      var global2 = require_global();
      var isCallable = require_is_callable();
      var aFunction = function(argument) {
        return isCallable(argument) ? argument : void 0;
      };
      module.exports = function(namespace, method) {
        return arguments.length < 2 ? aFunction(global2[namespace]) : global2[namespace] && global2[namespace][method];
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-is-prototype-of.js
  var require_object_is_prototype_of = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-is-prototype-of.js"(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      module.exports = uncurryThis({}.isPrototypeOf);
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/engine-user-agent.js
  var require_engine_user_agent = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/engine-user-agent.js"(exports, module) {
      var getBuiltIn = require_get_built_in();
      module.exports = getBuiltIn("navigator", "userAgent") || "";
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/engine-v8-version.js
  var require_engine_v8_version = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/engine-v8-version.js"(exports, module) {
      var global2 = require_global();
      var userAgent = require_engine_user_agent();
      var process = global2.process;
      var Deno = global2.Deno;
      var versions = process && process.versions || Deno && Deno.version;
      var v8 = versions && versions.v8;
      var match;
      var version;
      if (v8) {
        match = v8.split(".");
        version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
      }
      if (!version && userAgent) {
        match = userAgent.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
          match = userAgent.match(/Chrome\/(\d+)/);
          if (match)
            version = +match[1];
        }
      }
      module.exports = version;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/symbol-constructor-detection.js
  var require_symbol_constructor_detection = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/symbol-constructor-detection.js"(exports, module) {
      var V8_VERSION = require_engine_v8_version();
      var fails = require_fails();
      module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
        var symbol = Symbol();
        return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
        !Symbol.sham && V8_VERSION && V8_VERSION < 41;
      });
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/use-symbol-as-uid.js
  var require_use_symbol_as_uid = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/use-symbol-as-uid.js"(exports, module) {
      var NATIVE_SYMBOL = require_symbol_constructor_detection();
      module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-symbol.js
  var require_is_symbol = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-symbol.js"(exports, module) {
      var getBuiltIn = require_get_built_in();
      var isCallable = require_is_callable();
      var isPrototypeOf = require_object_is_prototype_of();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var $Object = Object;
      module.exports = USE_SYMBOL_AS_UID ? function(it) {
        return typeof it == "symbol";
      } : function(it) {
        var $Symbol = getBuiltIn("Symbol");
        return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/try-to-string.js
  var require_try_to_string = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/try-to-string.js"(exports, module) {
      var $String = String;
      module.exports = function(argument) {
        try {
          return $String(argument);
        } catch (error) {
          return "Object";
        }
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/a-callable.js
  var require_a_callable = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/a-callable.js"(exports, module) {
      var isCallable = require_is_callable();
      var tryToString = require_try_to_string();
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isCallable(argument))
          return argument;
        throw $TypeError(tryToString(argument) + " is not a function");
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/get-method.js
  var require_get_method = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/get-method.js"(exports, module) {
      var aCallable = require_a_callable();
      var isNullOrUndefined = require_is_null_or_undefined();
      module.exports = function(V, P) {
        var func = V[P];
        return isNullOrUndefined(func) ? void 0 : aCallable(func);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/ordinary-to-primitive.js
  var require_ordinary_to_primitive = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/ordinary-to-primitive.js"(exports, module) {
      var call = require_function_call();
      var isCallable = require_is_callable();
      var isObject = require_is_object();
      var $TypeError = TypeError;
      module.exports = function(input, pref) {
        var fn, val;
        if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
          return val;
        if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input)))
          return val;
        if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
          return val;
        throw $TypeError("Can't convert object to primitive value");
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-pure.js
  var require_is_pure = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-pure.js"(exports, module) {
      module.exports = false;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/define-global-property.js
  var require_define_global_property = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/define-global-property.js"(exports, module) {
      var global2 = require_global();
      var defineProperty = Object.defineProperty;
      module.exports = function(key, value) {
        try {
          defineProperty(global2, key, { value, configurable: true, writable: true });
        } catch (error) {
          global2[key] = value;
        }
        return value;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/shared-store.js
  var require_shared_store = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/shared-store.js"(exports, module) {
      var global2 = require_global();
      var defineGlobalProperty = require_define_global_property();
      var SHARED = "__core-js_shared__";
      var store = global2[SHARED] || defineGlobalProperty(SHARED, {});
      module.exports = store;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/shared.js
  var require_shared = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/shared.js"(exports, module) {
      var IS_PURE = require_is_pure();
      var store = require_shared_store();
      (module.exports = function(key, value) {
        return store[key] || (store[key] = value !== void 0 ? value : {});
      })("versions", []).push({
        version: "3.27.1",
        mode: IS_PURE ? "pure" : "global",
        copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.27.1/LICENSE",
        source: "https://github.com/zloirock/core-js"
      });
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-object.js
  var require_to_object = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-object.js"(exports, module) {
      var requireObjectCoercible = require_require_object_coercible();
      var $Object = Object;
      module.exports = function(argument) {
        return $Object(requireObjectCoercible(argument));
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/has-own-property.js
  var require_has_own_property = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/has-own-property.js"(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var toObject = require_to_object();
      var hasOwnProperty = uncurryThis({}.hasOwnProperty);
      module.exports = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty(toObject(it), key);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/uid.js
  var require_uid = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/uid.js"(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var id = 0;
      var postfix = Math.random();
      var toString = uncurryThis(1 .toString);
      module.exports = function(key) {
        return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/well-known-symbol.js
  var require_well_known_symbol = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/well-known-symbol.js"(exports, module) {
      var global2 = require_global();
      var shared = require_shared();
      var hasOwn = require_has_own_property();
      var uid = require_uid();
      var NATIVE_SYMBOL = require_symbol_constructor_detection();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var WellKnownSymbolsStore = shared("wks");
      var Symbol2 = global2.Symbol;
      var symbolFor = Symbol2 && Symbol2["for"];
      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
      module.exports = function(name) {
        if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")) {
          var description = "Symbol." + name;
          if (NATIVE_SYMBOL && hasOwn(Symbol2, name)) {
            WellKnownSymbolsStore[name] = Symbol2[name];
          } else if (USE_SYMBOL_AS_UID && symbolFor) {
            WellKnownSymbolsStore[name] = symbolFor(description);
          } else {
            WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
          }
        }
        return WellKnownSymbolsStore[name];
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-primitive.js
  var require_to_primitive = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-primitive.js"(exports, module) {
      var call = require_function_call();
      var isObject = require_is_object();
      var isSymbol = require_is_symbol();
      var getMethod = require_get_method();
      var ordinaryToPrimitive = require_ordinary_to_primitive();
      var wellKnownSymbol = require_well_known_symbol();
      var $TypeError = TypeError;
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      module.exports = function(input, pref) {
        if (!isObject(input) || isSymbol(input))
          return input;
        var exoticToPrim = getMethod(input, TO_PRIMITIVE);
        var result;
        if (exoticToPrim) {
          if (pref === void 0)
            pref = "default";
          result = call(exoticToPrim, input, pref);
          if (!isObject(result) || isSymbol(result))
            return result;
          throw $TypeError("Can't convert object to primitive value");
        }
        if (pref === void 0)
          pref = "number";
        return ordinaryToPrimitive(input, pref);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-property-key.js
  var require_to_property_key = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-property-key.js"(exports, module) {
      var toPrimitive = require_to_primitive();
      var isSymbol = require_is_symbol();
      module.exports = function(argument) {
        var key = toPrimitive(argument, "string");
        return isSymbol(key) ? key : key + "";
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/document-create-element.js
  var require_document_create_element = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/document-create-element.js"(exports, module) {
      var global2 = require_global();
      var isObject = require_is_object();
      var document2 = global2.document;
      var EXISTS = isObject(document2) && isObject(document2.createElement);
      module.exports = function(it) {
        return EXISTS ? document2.createElement(it) : {};
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/ie8-dom-define.js
  var require_ie8_dom_define = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/ie8-dom-define.js"(exports, module) {
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      var createElement = require_document_create_element();
      module.exports = !DESCRIPTORS && !fails(function() {
        return Object.defineProperty(createElement("div"), "a", {
          get: function() {
            return 7;
          }
        }).a != 7;
      });
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-get-own-property-descriptor.js
  var require_object_get_own_property_descriptor = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-get-own-property-descriptor.js"(exports) {
      var DESCRIPTORS = require_descriptors();
      var call = require_function_call();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var createPropertyDescriptor = require_create_property_descriptor();
      var toIndexedObject = require_to_indexed_object();
      var toPropertyKey = require_to_property_key();
      var hasOwn = require_has_own_property();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPropertyKey(P);
        if (IE8_DOM_DEFINE)
          try {
            return $getOwnPropertyDescriptor(O, P);
          } catch (error) {
          }
        if (hasOwn(O, P))
          return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/v8-prototype-define-bug.js
  var require_v8_prototype_define_bug = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/v8-prototype-define-bug.js"(exports, module) {
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      module.exports = DESCRIPTORS && fails(function() {
        return Object.defineProperty(function() {
        }, "prototype", {
          value: 42,
          writable: false
        }).prototype != 42;
      });
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/an-object.js
  var require_an_object = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/an-object.js"(exports, module) {
      var isObject = require_is_object();
      var $String = String;
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isObject(argument))
          return argument;
        throw $TypeError($String(argument) + " is not an object");
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-define-property.js
  var require_object_define_property = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-define-property.js"(exports) {
      var DESCRIPTORS = require_descriptors();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
      var anObject = require_an_object();
      var toPropertyKey = require_to_property_key();
      var $TypeError = TypeError;
      var $defineProperty = Object.defineProperty;
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var ENUMERABLE = "enumerable";
      var CONFIGURABLE = "configurable";
      var WRITABLE = "writable";
      exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
          var current = $getOwnPropertyDescriptor(O, P);
          if (current && current[WRITABLE]) {
            O[P] = Attributes.value;
            Attributes = {
              configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
              enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
              writable: false
            };
          }
        }
        return $defineProperty(O, P, Attributes);
      } : $defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (IE8_DOM_DEFINE)
          try {
            return $defineProperty(O, P, Attributes);
          } catch (error) {
          }
        if ("get" in Attributes || "set" in Attributes)
          throw $TypeError("Accessors not supported");
        if ("value" in Attributes)
          O[P] = Attributes.value;
        return O;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/create-non-enumerable-property.js
  var require_create_non_enumerable_property = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/create-non-enumerable-property.js"(exports, module) {
      var DESCRIPTORS = require_descriptors();
      var definePropertyModule = require_object_define_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      module.exports = DESCRIPTORS ? function(object, key, value) {
        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
      } : function(object, key, value) {
        object[key] = value;
        return object;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-name.js
  var require_function_name = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-name.js"(exports, module) {
      var DESCRIPTORS = require_descriptors();
      var hasOwn = require_has_own_property();
      var FunctionPrototype = Function.prototype;
      var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
      var EXISTS = hasOwn(FunctionPrototype, "name");
      var PROPER = EXISTS && function something() {
      }.name === "something";
      var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
      module.exports = {
        EXISTS,
        PROPER,
        CONFIGURABLE
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/inspect-source.js
  var require_inspect_source = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/inspect-source.js"(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var isCallable = require_is_callable();
      var store = require_shared_store();
      var functionToString = uncurryThis(Function.toString);
      if (!isCallable(store.inspectSource)) {
        store.inspectSource = function(it) {
          return functionToString(it);
        };
      }
      module.exports = store.inspectSource;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/weak-map-basic-detection.js
  var require_weak_map_basic_detection = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/weak-map-basic-detection.js"(exports, module) {
      var global2 = require_global();
      var isCallable = require_is_callable();
      var WeakMap2 = global2.WeakMap;
      module.exports = isCallable(WeakMap2) && /native code/.test(String(WeakMap2));
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/shared-key.js
  var require_shared_key = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/shared-key.js"(exports, module) {
      var shared = require_shared();
      var uid = require_uid();
      var keys = shared("keys");
      module.exports = function(key) {
        return keys[key] || (keys[key] = uid(key));
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/hidden-keys.js
  var require_hidden_keys = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/hidden-keys.js"(exports, module) {
      module.exports = {};
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/internal-state.js
  var require_internal_state = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/internal-state.js"(exports, module) {
      var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
      var global2 = require_global();
      var isObject = require_is_object();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var hasOwn = require_has_own_property();
      var shared = require_shared_store();
      var sharedKey = require_shared_key();
      var hiddenKeys = require_hidden_keys();
      var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
      var TypeError2 = global2.TypeError;
      var WeakMap2 = global2.WeakMap;
      var set;
      var get;
      var has;
      var enforce = function(it) {
        return has(it) ? get(it) : set(it, {});
      };
      var getterFor = function(TYPE) {
        return function(it) {
          var state9;
          if (!isObject(it) || (state9 = get(it)).type !== TYPE) {
            throw TypeError2("Incompatible receiver, " + TYPE + " required");
          }
          return state9;
        };
      };
      if (NATIVE_WEAK_MAP || shared.state) {
        store = shared.state || (shared.state = new WeakMap2());
        store.get = store.get;
        store.has = store.has;
        store.set = store.set;
        set = function(it, metadata) {
          if (store.has(it))
            throw TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          store.set(it, metadata);
          return metadata;
        };
        get = function(it) {
          return store.get(it) || {};
        };
        has = function(it) {
          return store.has(it);
        };
      } else {
        STATE = sharedKey("state");
        hiddenKeys[STATE] = true;
        set = function(it, metadata) {
          if (hasOwn(it, STATE))
            throw TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };
        get = function(it) {
          return hasOwn(it, STATE) ? it[STATE] : {};
        };
        has = function(it) {
          return hasOwn(it, STATE);
        };
      }
      var store;
      var STATE;
      module.exports = {
        set,
        get,
        has,
        enforce,
        getterFor
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/make-built-in.js
  var require_make_built_in = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/make-built-in.js"(exports, module) {
      var fails = require_fails();
      var isCallable = require_is_callable();
      var hasOwn = require_has_own_property();
      var DESCRIPTORS = require_descriptors();
      var CONFIGURABLE_FUNCTION_NAME = require_function_name().CONFIGURABLE;
      var inspectSource = require_inspect_source();
      var InternalStateModule = require_internal_state();
      var enforceInternalState = InternalStateModule.enforce;
      var getInternalState = InternalStateModule.get;
      var defineProperty = Object.defineProperty;
      var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function() {
        return defineProperty(function() {
        }, "length", { value: 8 }).length !== 8;
      });
      var TEMPLATE = String(String).split("String");
      var makeBuiltIn = module.exports = function(value, name, options) {
        if (String(name).slice(0, 7) === "Symbol(") {
          name = "[" + String(name).replace(/^Symbol\(([^)]*)\)/, "$1") + "]";
        }
        if (options && options.getter)
          name = "get " + name;
        if (options && options.setter)
          name = "set " + name;
        if (!hasOwn(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
          if (DESCRIPTORS)
            defineProperty(value, "name", { value: name, configurable: true });
          else
            value.name = name;
        }
        if (CONFIGURABLE_LENGTH && options && hasOwn(options, "arity") && value.length !== options.arity) {
          defineProperty(value, "length", { value: options.arity });
        }
        try {
          if (options && hasOwn(options, "constructor") && options.constructor) {
            if (DESCRIPTORS)
              defineProperty(value, "prototype", { writable: false });
          } else if (value.prototype)
            value.prototype = void 0;
        } catch (error) {
        }
        var state9 = enforceInternalState(value);
        if (!hasOwn(state9, "source")) {
          state9.source = TEMPLATE.join(typeof name == "string" ? name : "");
        }
        return value;
      };
      Function.prototype.toString = makeBuiltIn(function toString() {
        return isCallable(this) && getInternalState(this).source || inspectSource(this);
      }, "toString");
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/define-built-in.js
  var require_define_built_in = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/define-built-in.js"(exports, module) {
      var isCallable = require_is_callable();
      var definePropertyModule = require_object_define_property();
      var makeBuiltIn = require_make_built_in();
      var defineGlobalProperty = require_define_global_property();
      module.exports = function(O, key, value, options) {
        if (!options)
          options = {};
        var simple = options.enumerable;
        var name = options.name !== void 0 ? options.name : key;
        if (isCallable(value))
          makeBuiltIn(value, name, options);
        if (options.global) {
          if (simple)
            O[key] = value;
          else
            defineGlobalProperty(key, value);
        } else {
          try {
            if (!options.unsafe)
              delete O[key];
            else if (O[key])
              simple = true;
          } catch (error) {
          }
          if (simple)
            O[key] = value;
          else
            definePropertyModule.f(O, key, {
              value,
              enumerable: false,
              configurable: !options.nonConfigurable,
              writable: !options.nonWritable
            });
        }
        return O;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/math-trunc.js
  var require_math_trunc = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/math-trunc.js"(exports, module) {
      var ceil = Math.ceil;
      var floor = Math.floor;
      module.exports = Math.trunc || function trunc(x) {
        var n = +x;
        return (n > 0 ? floor : ceil)(n);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-integer-or-infinity.js
  var require_to_integer_or_infinity = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-integer-or-infinity.js"(exports, module) {
      var trunc = require_math_trunc();
      module.exports = function(argument) {
        var number = +argument;
        return number !== number || number === 0 ? 0 : trunc(number);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-absolute-index.js
  var require_to_absolute_index = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-absolute-index.js"(exports, module) {
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var max = Math.max;
      var min = Math.min;
      module.exports = function(index, length) {
        var integer = toIntegerOrInfinity(index);
        return integer < 0 ? max(integer + length, 0) : min(integer, length);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-length.js
  var require_to_length = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-length.js"(exports, module) {
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var min = Math.min;
      module.exports = function(argument) {
        return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/length-of-array-like.js
  var require_length_of_array_like = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/length-of-array-like.js"(exports, module) {
      var toLength = require_to_length();
      module.exports = function(obj) {
        return toLength(obj.length);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/array-includes.js
  var require_array_includes = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/array-includes.js"(exports, module) {
      var toIndexedObject = require_to_indexed_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var lengthOfArrayLike = require_length_of_array_like();
      var createMethod = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = lengthOfArrayLike(O);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          if (IS_INCLUDES && el != el)
            while (length > index) {
              value = O[index++];
              if (value != value)
                return true;
            }
          else
            for (; length > index; index++) {
              if ((IS_INCLUDES || index in O) && O[index] === el)
                return IS_INCLUDES || index || 0;
            }
          return !IS_INCLUDES && -1;
        };
      };
      module.exports = {
        // `Array.prototype.includes` method
        // https://tc39.es/ecma262/#sec-array.prototype.includes
        includes: createMethod(true),
        // `Array.prototype.indexOf` method
        // https://tc39.es/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod(false)
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-keys-internal.js
  var require_object_keys_internal = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-keys-internal.js"(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var hasOwn = require_has_own_property();
      var toIndexedObject = require_to_indexed_object();
      var indexOf = require_array_includes().indexOf;
      var hiddenKeys = require_hidden_keys();
      var push = uncurryThis([].push);
      module.exports = function(object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O)
          !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
        while (names.length > i)
          if (hasOwn(O, key = names[i++])) {
            ~indexOf(result, key) || push(result, key);
          }
        return result;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/enum-bug-keys.js
  var require_enum_bug_keys = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/enum-bug-keys.js"(exports, module) {
      module.exports = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
      ];
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-get-own-property-names.js
  var require_object_get_own_property_names = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-get-own-property-names.js"(exports) {
      var internalObjectKeys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      var hiddenKeys = enumBugKeys.concat("length", "prototype");
      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-get-own-property-symbols.js
  var require_object_get_own_property_symbols = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-get-own-property-symbols.js"(exports) {
      exports.f = Object.getOwnPropertySymbols;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/own-keys.js
  var require_own_keys = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/own-keys.js"(exports, module) {
      var getBuiltIn = require_get_built_in();
      var uncurryThis = require_function_uncurry_this();
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var anObject = require_an_object();
      var concat = uncurryThis([].concat);
      module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule.f(anObject(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/copy-constructor-properties.js
  var require_copy_constructor_properties = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/copy-constructor-properties.js"(exports, module) {
      var hasOwn = require_has_own_property();
      var ownKeys = require_own_keys();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var definePropertyModule = require_object_define_property();
      module.exports = function(target, source, exceptions) {
        var keys = ownKeys(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
            defineProperty(target, key, getOwnPropertyDescriptor(source, key));
          }
        }
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-forced.js
  var require_is_forced = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-forced.js"(exports, module) {
      var fails = require_fails();
      var isCallable = require_is_callable();
      var replacement = /#|\.prototype\./;
      var isForced = function(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
      };
      var normalize = isForced.normalize = function(string) {
        return String(string).replace(replacement, ".").toLowerCase();
      };
      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = "N";
      var POLYFILL = isForced.POLYFILL = "P";
      module.exports = isForced;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/export.js
  var require_export = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/export.js"(exports, module) {
      var global2 = require_global();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var defineBuiltIn = require_define_built_in();
      var defineGlobalProperty = require_define_global_property();
      var copyConstructorProperties = require_copy_constructor_properties();
      var isForced = require_is_forced();
      module.exports = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED, target, key, targetProperty, sourceProperty, descriptor;
        if (GLOBAL) {
          target = global2;
        } else if (STATIC) {
          target = global2[TARGET] || defineGlobalProperty(TARGET, {});
        } else {
          target = (global2[TARGET] || {}).prototype;
        }
        if (target)
          for (key in source) {
            sourceProperty = source[key];
            if (options.dontCallGetSet) {
              descriptor = getOwnPropertyDescriptor(target, key);
              targetProperty = descriptor && descriptor.value;
            } else
              targetProperty = target[key];
            FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
            if (!FORCED && targetProperty !== void 0) {
              if (typeof sourceProperty == typeof targetProperty)
                continue;
              copyConstructorProperties(sourceProperty, targetProperty);
            }
            if (options.sham || targetProperty && targetProperty.sham) {
              createNonEnumerableProperty(sourceProperty, "sham", true);
            }
            defineBuiltIn(target, key, sourceProperty, options);
          }
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-array.js
  var require_is_array = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-array.js"(exports, module) {
      var classof = require_classof_raw();
      module.exports = Array.isArray || function isArray(argument) {
        return classof(argument) == "Array";
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/does-not-exceed-safe-integer.js
  var require_does_not_exceed_safe_integer = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/does-not-exceed-safe-integer.js"(exports, module) {
      var $TypeError = TypeError;
      var MAX_SAFE_INTEGER = 9007199254740991;
      module.exports = function(it) {
        if (it > MAX_SAFE_INTEGER)
          throw $TypeError("Maximum allowed index exceeded");
        return it;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-uncurry-this-clause.js
  var require_function_uncurry_this_clause = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-uncurry-this-clause.js"(exports, module) {
      var classofRaw = require_classof_raw();
      var uncurryThis = require_function_uncurry_this();
      module.exports = function(fn) {
        if (classofRaw(fn) === "Function")
          return uncurryThis(fn);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-bind-context.js
  var require_function_bind_context = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/function-bind-context.js"(exports, module) {
      var uncurryThis = require_function_uncurry_this_clause();
      var aCallable = require_a_callable();
      var NATIVE_BIND = require_function_bind_native();
      var bind = uncurryThis(uncurryThis.bind);
      module.exports = function(fn, that) {
        aCallable(fn);
        return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {
          return fn.apply(that, arguments);
        };
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/flatten-into-array.js
  var require_flatten_into_array = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/flatten-into-array.js"(exports, module) {
      "use strict";
      var isArray = require_is_array();
      var lengthOfArrayLike = require_length_of_array_like();
      var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
      var bind = require_function_bind_context();
      var flattenIntoArray = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? bind(mapper, thisArg) : false;
        var element, elementLen;
        while (sourceIndex < sourceLen) {
          if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
            if (depth > 0 && isArray(element)) {
              elementLen = lengthOfArrayLike(element);
              targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;
            } else {
              doesNotExceedSafeInteger(targetIndex + 1);
              target[targetIndex] = element;
            }
            targetIndex++;
          }
          sourceIndex++;
        }
        return targetIndex;
      };
      module.exports = flattenIntoArray;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-string-tag-support.js
  var require_to_string_tag_support = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-string-tag-support.js"(exports, module) {
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var test = {};
      test[TO_STRING_TAG] = "z";
      module.exports = String(test) === "[object z]";
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/classof.js
  var require_classof = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/classof.js"(exports, module) {
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var isCallable = require_is_callable();
      var classofRaw = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var $Object = Object;
      var CORRECT_ARGUMENTS = classofRaw(function() {
        return arguments;
      }()) == "Arguments";
      var tryGet = function(it, key) {
        try {
          return it[key];
        } catch (error) {
        }
      };
      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
        var O, tag, result;
        return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && isCallable(O.callee) ? "Arguments" : result;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-constructor.js
  var require_is_constructor = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-constructor.js"(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var isCallable = require_is_callable();
      var classof = require_classof();
      var getBuiltIn = require_get_built_in();
      var inspectSource = require_inspect_source();
      var noop3 = function() {
      };
      var empty = [];
      var construct = getBuiltIn("Reflect", "construct");
      var constructorRegExp = /^\s*(?:class|function)\b/;
      var exec = uncurryThis(constructorRegExp.exec);
      var INCORRECT_TO_STRING = !constructorRegExp.exec(noop3);
      var isConstructorModern = function isConstructor(argument) {
        if (!isCallable(argument))
          return false;
        try {
          construct(noop3, empty, argument);
          return true;
        } catch (error) {
          return false;
        }
      };
      var isConstructorLegacy = function isConstructor(argument) {
        if (!isCallable(argument))
          return false;
        switch (classof(argument)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
        } catch (error) {
          return true;
        }
      };
      isConstructorLegacy.sham = true;
      module.exports = !construct || fails(function() {
        var called;
        return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
          called = true;
        }) || called;
      }) ? isConstructorLegacy : isConstructorModern;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/array-species-constructor.js
  var require_array_species_constructor = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/array-species-constructor.js"(exports, module) {
      var isArray = require_is_array();
      var isConstructor = require_is_constructor();
      var isObject = require_is_object();
      var wellKnownSymbol = require_well_known_symbol();
      var SPECIES = wellKnownSymbol("species");
      var $Array = Array;
      module.exports = function(originalArray) {
        var C;
        if (isArray(originalArray)) {
          C = originalArray.constructor;
          if (isConstructor(C) && (C === $Array || isArray(C.prototype)))
            C = void 0;
          else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null)
              C = void 0;
          }
        }
        return C === void 0 ? $Array : C;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/array-species-create.js
  var require_array_species_create = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/array-species-create.js"(exports, module) {
      var arraySpeciesConstructor = require_array_species_constructor();
      module.exports = function(originalArray, length) {
        return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/modules/es.array.flat-map.js
  var require_es_array_flat_map = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/modules/es.array.flat-map.js"() {
      "use strict";
      var $ = require_export();
      var flattenIntoArray = require_flatten_into_array();
      var aCallable = require_a_callable();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var arraySpeciesCreate = require_array_species_create();
      $({ target: "Array", proto: true }, {
        flatMap: function flatMap(callbackfn) {
          var O = toObject(this);
          var sourceLen = lengthOfArrayLike(O);
          var A;
          aCallable(callbackfn);
          A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          return A;
        }
      });
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-keys.js
  var require_object_keys = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-keys.js"(exports, module) {
      var internalObjectKeys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      module.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-define-properties.js
  var require_object_define_properties = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-define-properties.js"(exports) {
      var DESCRIPTORS = require_descriptors();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
      var definePropertyModule = require_object_define_property();
      var anObject = require_an_object();
      var toIndexedObject = require_to_indexed_object();
      var objectKeys = require_object_keys();
      exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var props = toIndexedObject(Properties);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while (length > index)
          definePropertyModule.f(O, key = keys[index++], props[key]);
        return O;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/html.js
  var require_html = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/html.js"(exports, module) {
      var getBuiltIn = require_get_built_in();
      module.exports = getBuiltIn("document", "documentElement");
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-create.js
  var require_object_create = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/object-create.js"(exports, module) {
      var anObject = require_an_object();
      var definePropertiesModule = require_object_define_properties();
      var enumBugKeys = require_enum_bug_keys();
      var hiddenKeys = require_hidden_keys();
      var html = require_html();
      var documentCreateElement = require_document_create_element();
      var sharedKey = require_shared_key();
      var GT = ">";
      var LT = "<";
      var PROTOTYPE = "prototype";
      var SCRIPT = "script";
      var IE_PROTO = sharedKey("IE_PROTO");
      var EmptyConstructor = function() {
      };
      var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
      };
      var NullProtoObjectViaActiveX = function(activeXDocument2) {
        activeXDocument2.write(scriptTag(""));
        activeXDocument2.close();
        var temp = activeXDocument2.parentWindow.Object;
        activeXDocument2 = null;
        return temp;
      };
      var NullProtoObjectViaIFrame = function() {
        var iframe = documentCreateElement("iframe");
        var JS = "java" + SCRIPT + ":";
        var iframeDocument;
        iframe.style.display = "none";
        html.appendChild(iframe);
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag("document.F=Object"));
        iframeDocument.close();
        return iframeDocument.F;
      };
      var activeXDocument;
      var NullProtoObject = function() {
        try {
          activeXDocument = new ActiveXObject("htmlfile");
        } catch (error) {
        }
        NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
        var length = enumBugKeys.length;
        while (length--)
          delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        return NullProtoObject();
      };
      hiddenKeys[IE_PROTO] = true;
      module.exports = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null;
          result[IE_PROTO] = O;
        } else
          result = NullProtoObject();
        return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/add-to-unscopables.js
  var require_add_to_unscopables = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/add-to-unscopables.js"(exports, module) {
      var wellKnownSymbol = require_well_known_symbol();
      var create = require_object_create();
      var defineProperty = require_object_define_property().f;
      var UNSCOPABLES = wellKnownSymbol("unscopables");
      var ArrayPrototype = Array.prototype;
      if (ArrayPrototype[UNSCOPABLES] == void 0) {
        defineProperty(ArrayPrototype, UNSCOPABLES, {
          configurable: true,
          value: create(null)
        });
      }
      module.exports = function(key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/modules/es.array.unscopables.flat-map.js
  var require_es_array_unscopables_flat_map = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/modules/es.array.unscopables.flat-map.js"() {
      var addToUnscopables = require_add_to_unscopables();
      addToUnscopables("flatMap");
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/entry-unbind.js
  var require_entry_unbind = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/entry-unbind.js"(exports, module) {
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      module.exports = function(CONSTRUCTOR, METHOD) {
        return uncurryThis(global2[CONSTRUCTOR].prototype[METHOD]);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/es/array/flat-map.js
  var require_flat_map = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/es/array/flat-map.js"(exports, module) {
      require_es_array_flat_map();
      require_es_array_unscopables_flat_map();
      var entryUnbind = require_entry_unbind();
      module.exports = entryUnbind("Array", "flatMap");
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/stable/array/flat-map.js
  var require_flat_map2 = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/stable/array/flat-map.js"(exports, module) {
      var parent = require_flat_map();
      module.exports = parent;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/actual/array/flat-map.js
  var require_flat_map3 = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/actual/array/flat-map.js"(exports, module) {
      var parent = require_flat_map2();
      module.exports = parent;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/modules/es.array.includes.js
  var require_es_array_includes = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/modules/es.array.includes.js"() {
      "use strict";
      var $ = require_export();
      var $includes = require_array_includes().includes;
      var fails = require_fails();
      var addToUnscopables = require_add_to_unscopables();
      var BROKEN_ON_SPARSE = fails(function() {
        return !Array(1).includes();
      });
      $({ target: "Array", proto: true, forced: BROKEN_ON_SPARSE }, {
        includes: function includes(el) {
          return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      addToUnscopables("includes");
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/es/array/includes.js
  var require_includes = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/es/array/includes.js"(exports, module) {
      require_es_array_includes();
      var entryUnbind = require_entry_unbind();
      module.exports = entryUnbind("Array", "includes");
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/stable/array/includes.js
  var require_includes2 = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/stable/array/includes.js"(exports, module) {
      var parent = require_includes();
      module.exports = parent;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/actual/array/includes.js
  var require_includes3 = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/actual/array/includes.js"(exports, module) {
      var parent = require_includes2();
      module.exports = parent;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-regexp.js
  var require_is_regexp = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/is-regexp.js"(exports, module) {
      var isObject = require_is_object();
      var classof = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var MATCH = wellKnownSymbol("match");
      module.exports = function(it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) == "RegExp");
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/not-a-regexp.js
  var require_not_a_regexp = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/not-a-regexp.js"(exports, module) {
      var isRegExp = require_is_regexp();
      var $TypeError = TypeError;
      module.exports = function(it) {
        if (isRegExp(it)) {
          throw $TypeError("The method doesn't accept regular expressions");
        }
        return it;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-string.js
  var require_to_string = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/to-string.js"(exports, module) {
      var classof = require_classof();
      var $String = String;
      module.exports = function(argument) {
        if (classof(argument) === "Symbol")
          throw TypeError("Cannot convert a Symbol value to a string");
        return $String(argument);
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/correct-is-regexp-logic.js
  var require_correct_is_regexp_logic = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/correct-is-regexp-logic.js"(exports, module) {
      var wellKnownSymbol = require_well_known_symbol();
      var MATCH = wellKnownSymbol("match");
      module.exports = function(METHOD_NAME) {
        var regexp = /./;
        try {
          "/./"[METHOD_NAME](regexp);
        } catch (error1) {
          try {
            regexp[MATCH] = false;
            return "/./"[METHOD_NAME](regexp);
          } catch (error2) {
          }
        }
        return false;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/modules/es.string.includes.js
  var require_es_string_includes = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/modules/es.string.includes.js"() {
      "use strict";
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var notARegExp = require_not_a_regexp();
      var requireObjectCoercible = require_require_object_coercible();
      var toString = require_to_string();
      var correctIsRegExpLogic = require_correct_is_regexp_logic();
      var stringIndexOf = uncurryThis("".indexOf);
      $({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
        includes: function includes(searchString) {
          return !!~stringIndexOf(
            toString(requireObjectCoercible(this)),
            toString(notARegExp(searchString)),
            arguments.length > 1 ? arguments[1] : void 0
          );
        }
      });
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/es/string/includes.js
  var require_includes4 = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/es/string/includes.js"(exports, module) {
      require_es_string_includes();
      var entryUnbind = require_entry_unbind();
      module.exports = entryUnbind("String", "includes");
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/stable/string/includes.js
  var require_includes5 = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/stable/string/includes.js"(exports, module) {
      var parent = require_includes4();
      module.exports = parent;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/actual/string/includes.js
  var require_includes6 = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/actual/string/includes.js"(exports, module) {
      var parent = require_includes5();
      module.exports = parent;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/string-repeat.js
  var require_string_repeat = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/string-repeat.js"(exports, module) {
      "use strict";
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toString = require_to_string();
      var requireObjectCoercible = require_require_object_coercible();
      var $RangeError = RangeError;
      module.exports = function repeat(count) {
        var str = toString(requireObjectCoercible(this));
        var result = "";
        var n = toIntegerOrInfinity(count);
        if (n < 0 || n == Infinity)
          throw $RangeError("Wrong number of repetitions");
        for (; n > 0; (n >>>= 1) && (str += str))
          if (n & 1)
            result += str;
        return result;
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/string-pad.js
  var require_string_pad = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/string-pad.js"(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var toLength = require_to_length();
      var toString = require_to_string();
      var $repeat = require_string_repeat();
      var requireObjectCoercible = require_require_object_coercible();
      var repeat = uncurryThis($repeat);
      var stringSlice = uncurryThis("".slice);
      var ceil = Math.ceil;
      var createMethod = function(IS_END) {
        return function($this, maxLength, fillString) {
          var S = toString(requireObjectCoercible($this));
          var intMaxLength = toLength(maxLength);
          var stringLength = S.length;
          var fillStr = fillString === void 0 ? " " : toString(fillString);
          var fillLen, stringFiller;
          if (intMaxLength <= stringLength || fillStr == "")
            return S;
          fillLen = intMaxLength - stringLength;
          stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));
          if (stringFiller.length > fillLen)
            stringFiller = stringSlice(stringFiller, 0, fillLen);
          return IS_END ? S + stringFiller : stringFiller + S;
        };
      };
      module.exports = {
        // `String.prototype.padStart` method
        // https://tc39.es/ecma262/#sec-string.prototype.padstart
        start: createMethod(false),
        // `String.prototype.padEnd` method
        // https://tc39.es/ecma262/#sec-string.prototype.padend
        end: createMethod(true)
      };
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/string-pad-webkit-bug.js
  var require_string_pad_webkit_bug = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/internals/string-pad-webkit-bug.js"(exports, module) {
      var userAgent = require_engine_user_agent();
      module.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/modules/es.string.pad-start.js
  var require_es_string_pad_start = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/modules/es.string.pad-start.js"() {
      "use strict";
      var $ = require_export();
      var $padStart = require_string_pad().start;
      var WEBKIT_BUG = require_string_pad_webkit_bug();
      $({ target: "String", proto: true, forced: WEBKIT_BUG }, {
        padStart: function padStart(maxLength) {
          return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/es/string/pad-start.js
  var require_pad_start = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/es/string/pad-start.js"(exports, module) {
      require_es_string_pad_start();
      var entryUnbind = require_entry_unbind();
      module.exports = entryUnbind("String", "padStart");
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/stable/string/pad-start.js
  var require_pad_start2 = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/stable/string/pad-start.js"(exports, module) {
      var parent = require_pad_start();
      module.exports = parent;
    }
  });

  // ../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/actual/string/pad-start.js
  var require_pad_start3 = __commonJS({
    "../node_modules/.pnpm/core-js@3.27.1/node_modules/core-js/actual/string/pad-start.js"(exports, module) {
      var parent = require_pad_start2();
      module.exports = parent;
    }
  });

  // ../node_modules/.pnpm/tiny-emitter@2.1.0/node_modules/tiny-emitter/index.js
  var require_tiny_emitter = __commonJS({
    "../node_modules/.pnpm/tiny-emitter@2.1.0/node_modules/tiny-emitter/index.js"(exports, module) {
      function E() {
      }
      E.prototype = {
        on: function(name, callback, ctx) {
          var e = this.e || (this.e = {});
          (e[name] || (e[name] = [])).push({
            fn: callback,
            ctx
          });
          return this;
        },
        once: function(name, callback, ctx) {
          var self2 = this;
          function listener() {
            self2.off(name, listener);
            callback.apply(ctx, arguments);
          }
          ;
          listener._ = callback;
          return this.on(name, listener, ctx);
        },
        emit: function(name) {
          var data = [].slice.call(arguments, 1);
          var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
          var i = 0;
          var len = evtArr.length;
          for (i; i < len; i++) {
            evtArr[i].fn.apply(evtArr[i].ctx, data);
          }
          return this;
        },
        off: function(name, callback) {
          var e = this.e || (this.e = {});
          var evts = e[name];
          var liveEvents = [];
          if (evts && callback) {
            for (var i = 0, len = evts.length; i < len; i++) {
              if (evts[i].fn !== callback && evts[i].fn._ !== callback)
                liveEvents.push(evts[i]);
            }
          }
          liveEvents.length ? e[name] = liveEvents : delete e[name];
          return this;
        }
      };
      module.exports = E;
      module.exports.TinyEmitter = E;
    }
  });

  // ../node_modules/.pnpm/fastdom@1.0.12/node_modules/fastdom/fastdom.js
  var require_fastdom = __commonJS({
    "../node_modules/.pnpm/fastdom@1.0.12/node_modules/fastdom/fastdom.js"(exports, module) {
      !function(win) {
        "use strict";
        var debug = 0 ? console.log.bind(console, "[fastdom]") : function() {
        };
        var raf = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.msRequestAnimationFrame || function(cb) {
          return setTimeout(cb, 16);
        };
        function FastDom() {
          var self2 = this;
          self2.reads = [];
          self2.writes = [];
          self2.raf = raf.bind(win);
          debug("initialized", self2);
        }
        FastDom.prototype = {
          constructor: FastDom,
          /**
           * We run this inside a try catch
           * so that if any jobs error, we
           * are able to recover and continue
           * to flush the batch until it's empty.
           *
           * @param {Array} tasks
           */
          runTasks: function(tasks) {
            debug("run tasks");
            var task;
            while (task = tasks.shift())
              task();
          },
          /**
           * Adds a job to the read batch and
           * schedules a new frame if need be.
           *
           * @param  {Function} fn
           * @param  {Object} ctx the context to be bound to `fn` (optional).
           * @public
           */
          measure: function(fn, ctx) {
            debug("measure");
            var task = !ctx ? fn : fn.bind(ctx);
            this.reads.push(task);
            scheduleFlush(this);
            return task;
          },
          /**
           * Adds a job to the
           * write batch and schedules
           * a new frame if need be.
           *
           * @param  {Function} fn
           * @param  {Object} ctx the context to be bound to `fn` (optional).
           * @public
           */
          mutate: function(fn, ctx) {
            debug("mutate");
            var task = !ctx ? fn : fn.bind(ctx);
            this.writes.push(task);
            scheduleFlush(this);
            return task;
          },
          /**
           * Clears a scheduled 'read' or 'write' task.
           *
           * @param {Object} task
           * @return {Boolean} success
           * @public
           */
          clear: function(task) {
            debug("clear", task);
            return remove(this.reads, task) || remove(this.writes, task);
          },
          /**
           * Extend this FastDom with some
           * custom functionality.
           *
           * Because fastdom must *always* be a
           * singleton, we're actually extending
           * the fastdom instance. This means tasks
           * scheduled by an extension still enter
           * fastdom's global task queue.
           *
           * The 'super' instance can be accessed
           * from `this.fastdom`.
           *
           * @example
           *
           * var myFastdom = fastdom.extend({
           *   initialize: function() {
           *     // runs on creation
           *   },
           *
           *   // override a method
           *   measure: function(fn) {
           *     // do extra stuff ...
           *
           *     // then call the original
           *     return this.fastdom.measure(fn);
           *   },
           *
           *   ...
           * });
           *
           * @param  {Object} props  properties to mixin
           * @return {FastDom}
           */
          extend: function(props) {
            debug("extend", props);
            if (typeof props != "object")
              throw new Error("expected object");
            var child = Object.create(this);
            mixin(child, props);
            child.fastdom = this;
            if (child.initialize)
              child.initialize();
            return child;
          },
          // override this with a function
          // to prevent Errors in console
          // when tasks throw
          catch: null
        };
        function scheduleFlush(fastdom15) {
          if (!fastdom15.scheduled) {
            fastdom15.scheduled = true;
            fastdom15.raf(flush.bind(null, fastdom15));
            debug("flush scheduled");
          }
        }
        function flush(fastdom15) {
          debug("flush");
          var writes = fastdom15.writes;
          var reads = fastdom15.reads;
          var error;
          try {
            debug("flushing reads", reads.length);
            fastdom15.runTasks(reads);
            debug("flushing writes", writes.length);
            fastdom15.runTasks(writes);
          } catch (e) {
            error = e;
          }
          fastdom15.scheduled = false;
          if (reads.length || writes.length)
            scheduleFlush(fastdom15);
          if (error) {
            debug("task errored", error.message);
            if (fastdom15.catch)
              fastdom15.catch(error);
            else
              throw error;
          }
        }
        function remove(array, item) {
          var index = array.indexOf(item);
          return !!~index && !!array.splice(index, 1);
        }
        function mixin(target, source) {
          for (var key in source) {
            if (source.hasOwnProperty(key))
              target[key] = source[key];
          }
        }
        var exports2 = win.fastdom = win.fastdom || new FastDom();
        if (false)
          (void 0)(function() {
            return exports2;
          });
        else if (typeof module == "object")
          module.exports = exports2;
      }(typeof window !== "undefined" ? window : typeof exports != "undefined" ? exports : globalThis);
    }
  });

  // ../node_modules/.pnpm/clamp@1.0.1/node_modules/clamp/index.js
  var require_clamp = __commonJS({
    "../node_modules/.pnpm/clamp@1.0.1/node_modules/clamp/index.js"(exports, module) {
      module.exports = clamp3;
      function clamp3(value, min, max) {
        return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;
      }
    }
  });

  // ../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/dedupe.js
  var require_dedupe = __commonJS({
    "../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/dedupe.js"(exports, module) {
      (function() {
        "use strict";
        var classNames = function() {
          function StorageObject() {
          }
          StorageObject.prototype = /* @__PURE__ */ Object.create(null);
          function _parseArray(resultSet, array) {
            var length = array.length;
            for (var i = 0; i < length; ++i) {
              _parse(resultSet, array[i]);
            }
          }
          var hasOwn = {}.hasOwnProperty;
          function _parseNumber(resultSet, num) {
            resultSet[num] = true;
          }
          function _parseObject(resultSet, object) {
            if (object.toString !== Object.prototype.toString && !object.toString.toString().includes("[native code]")) {
              resultSet[object.toString()] = true;
              return;
            }
            for (var k in object) {
              if (hasOwn.call(object, k)) {
                resultSet[k] = !!object[k];
              }
            }
          }
          var SPACE = /\s+/;
          function _parseString(resultSet, str) {
            var array = str.split(SPACE);
            var length = array.length;
            for (var i = 0; i < length; ++i) {
              resultSet[array[i]] = true;
            }
          }
          function _parse(resultSet, arg) {
            if (!arg)
              return;
            var argType = typeof arg;
            if (argType === "string") {
              _parseString(resultSet, arg);
            } else if (Array.isArray(arg)) {
              _parseArray(resultSet, arg);
            } else if (argType === "object") {
              _parseObject(resultSet, arg);
            } else if (argType === "number") {
              _parseNumber(resultSet, arg);
            }
          }
          function _classNames() {
            var len = arguments.length;
            var args = Array(len);
            for (var i = 0; i < len; i++) {
              args[i] = arguments[i];
            }
            var classSet = new StorageObject();
            _parseArray(classSet, args);
            var list = [];
            for (var k in classSet) {
              if (classSet[k]) {
                list.push(k);
              }
            }
            return list.join(" ");
          }
          return _classNames;
        }();
        if (typeof module !== "undefined" && module.exports) {
          classNames.default = classNames;
          module.exports = classNames;
        } else if (false) {
          (void 0)("classnames", [], function() {
            return classNames;
          });
        } else {
          window.classNames = classNames;
        }
      })();
    }
  });

  // ../node_modules/.pnpm/sniffr@1.2.0/node_modules/sniffr/src/sniffr.js
  var require_sniffr = __commonJS({
    "../node_modules/.pnpm/sniffr@1.2.0/node_modules/sniffr/src/sniffr.js"(exports, module) {
      (function(host) {
        var properties = {
          browser: [
            [/msie ([\.\_\d]+)/, "ie"],
            [/trident\/.*?rv:([\.\_\d]+)/, "ie"],
            [/firefox\/([\.\_\d]+)/, "firefox"],
            [/chrome\/([\.\_\d]+)/, "chrome"],
            [/version\/([\.\_\d]+).*?safari/, "safari"],
            [/mobile safari ([\.\_\d]+)/, "safari"],
            [/android.*?version\/([\.\_\d]+).*?safari/, "com.android.browser"],
            [/crios\/([\.\_\d]+).*?safari/, "chrome"],
            [/opera/, "opera"],
            [/opera\/([\.\_\d]+)/, "opera"],
            [/opera ([\.\_\d]+)/, "opera"],
            [/opera mini.*?version\/([\.\_\d]+)/, "opera.mini"],
            [/opios\/([a-z\.\_\d]+)/, "opera"],
            [/blackberry/, "blackberry"],
            [/blackberry.*?version\/([\.\_\d]+)/, "blackberry"],
            [/bb\d+.*?version\/([\.\_\d]+)/, "blackberry"],
            [/rim.*?version\/([\.\_\d]+)/, "blackberry"],
            [/iceweasel\/([\.\_\d]+)/, "iceweasel"],
            [/edge\/([\.\d]+)/, "edge"]
          ],
          os: [
            [/linux ()([a-z\.\_\d]+)/, "linux"],
            [/mac os x/, "macos"],
            [/mac os x.*?([\.\_\d]+)/, "macos"],
            [/os ([\.\_\d]+) like mac os/, "ios"],
            [/openbsd ()([a-z\.\_\d]+)/, "openbsd"],
            [/android/, "android"],
            [/android ([a-z\.\_\d]+);/, "android"],
            [/mozilla\/[a-z\.\_\d]+ \((?:mobile)|(?:tablet)/, "firefoxos"],
            [/windows\s*(?:nt)?\s*([\.\_\d]+)/, "windows"],
            [/windows phone.*?([\.\_\d]+)/, "windows.phone"],
            [/windows mobile/, "windows.mobile"],
            [/blackberry/, "blackberryos"],
            [/bb\d+/, "blackberryos"],
            [/rim.*?os\s*([\.\_\d]+)/, "blackberryos"]
          ],
          device: [
            [/ipad/, "ipad"],
            [/iphone/, "iphone"],
            [/lumia/, "lumia"],
            [/htc/, "htc"],
            [/nexus/, "nexus"],
            [/galaxy nexus/, "galaxy.nexus"],
            [/nokia/, "nokia"],
            [/ gt\-/, "galaxy"],
            [/ sm\-/, "galaxy"],
            [/xbox/, "xbox"],
            [/(?:bb\d+)|(?:blackberry)|(?: rim )/, "blackberry"]
          ]
        };
        var UNKNOWN = "Unknown";
        var propertyNames = Object.keys(properties);
        function Sniffr2() {
          var self2 = this;
          propertyNames.forEach(function(propertyName) {
            self2[propertyName] = {
              name: UNKNOWN,
              version: [],
              versionString: UNKNOWN
            };
          });
        }
        function determineProperty(self2, propertyName, userAgent) {
          properties[propertyName].forEach(function(propertyMatcher) {
            var propertyRegex = propertyMatcher[0];
            var propertyValue = propertyMatcher[1];
            var match = userAgent.match(propertyRegex);
            if (match) {
              self2[propertyName].name = propertyValue;
              if (match[2]) {
                self2[propertyName].versionString = match[2];
                self2[propertyName].version = [];
              } else if (match[1]) {
                self2[propertyName].versionString = match[1].replace(/_/g, ".");
                self2[propertyName].version = parseVersion(match[1]);
              } else {
                self2[propertyName].versionString = UNKNOWN;
                self2[propertyName].version = [];
              }
            }
          });
        }
        function parseVersion(versionString) {
          return versionString.split(/[\._]/).map(function(versionPart) {
            return parseInt(versionPart);
          });
        }
        Sniffr2.prototype.sniff = function(userAgentString) {
          var self2 = this;
          var isBrowser = typeof window !== "undefined";
          var fallbackUserAgent = isBrowser ? navigator.userAgent : "";
          var userAgent = (userAgentString || fallbackUserAgent).toLowerCase();
          propertyNames.forEach(function(propertyName) {
            determineProperty(self2, propertyName, userAgent);
          });
          return this;
        };
        if (typeof module !== "undefined" && module.exports) {
          module.exports = Sniffr2;
        } else {
          host.Sniffr = new Sniffr2();
          host.Sniffr.sniff(navigator.userAgent);
        }
      })(exports);
    }
  });

  // ../node_modules/.pnpm/array-from@2.1.1/node_modules/array-from/polyfill.js
  var require_polyfill = __commonJS({
    "../node_modules/.pnpm/array-from@2.1.1/node_modules/array-from/polyfill.js"(exports, module) {
      module.exports = function() {
        var isCallable = function(fn) {
          return typeof fn === "function";
        };
        var toInteger = function(value) {
          var number = Number(value);
          if (isNaN(number)) {
            return 0;
          }
          if (number === 0 || !isFinite(number)) {
            return number;
          }
          return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
        };
        var maxSafeInteger = Math.pow(2, 53) - 1;
        var toLength = function(value) {
          var len = toInteger(value);
          return Math.min(Math.max(len, 0), maxSafeInteger);
        };
        var iteratorProp = function(value) {
          if (value != null) {
            if (["string", "number", "boolean", "symbol"].indexOf(typeof value) > -1) {
              return Symbol.iterator;
            } else if (typeof Symbol !== "undefined" && "iterator" in Symbol && Symbol.iterator in value) {
              return Symbol.iterator;
            } else if ("@@iterator" in value) {
              return "@@iterator";
            }
          }
        };
        var getMethod = function(O, P) {
          if (O != null && P != null) {
            var func = O[P];
            if (func == null) {
              return void 0;
            }
            if (!isCallable(func)) {
              throw new TypeError(func + " is not a function");
            }
            return func;
          }
        };
        var iteratorStep = function(iterator) {
          var result = iterator.next();
          var done = Boolean(result.done);
          if (done) {
            return false;
          }
          return result;
        };
        return function from(items) {
          "use strict";
          var C = this;
          var mapFn = arguments.length > 1 ? arguments[1] : void 0;
          var T;
          if (typeof mapFn !== "undefined") {
            if (!isCallable(mapFn)) {
              throw new TypeError(
                "Array.from: when provided, the second argument must be a function"
              );
            }
            if (arguments.length > 2) {
              T = arguments[2];
            }
          }
          var A, k;
          var usingIterator = getMethod(items, iteratorProp(items));
          if (usingIterator !== void 0) {
            A = isCallable(C) ? Object(new C()) : [];
            var iterator = usingIterator.call(items);
            if (iterator == null) {
              throw new TypeError(
                "Array.from requires an array-like or iterable object"
              );
            }
            k = 0;
            var next, nextValue;
            while (true) {
              next = iteratorStep(iterator);
              if (!next) {
                A.length = k;
                return A;
              }
              nextValue = next.value;
              if (mapFn) {
                A[k] = mapFn.call(T, nextValue, k);
              } else {
                A[k] = nextValue;
              }
              k++;
            }
          } else {
            var arrayLike = Object(items);
            if (items == null) {
              throw new TypeError(
                "Array.from requires an array-like object - not null or undefined"
              );
            }
            var len = toLength(arrayLike.length);
            A = isCallable(C) ? Object(new C(len)) : new Array(len);
            k = 0;
            var kValue;
            while (k < len) {
              kValue = arrayLike[k];
              if (mapFn) {
                A[k] = mapFn.call(T, kValue, k);
              } else {
                A[k] = kValue;
              }
              k++;
            }
            A.length = len;
          }
          return A;
        };
      }();
    }
  });

  // ../node_modules/.pnpm/page-visibility-shim@1.0.2/node_modules/page-visibility-shim/index.js
  var require_page_visibility_shim = __commonJS({
    "../node_modules/.pnpm/page-visibility-shim@1.0.2/node_modules/page-visibility-shim/index.js"(exports, module) {
      var hidden;
      var visibilityChange;
      if (typeof document.hidden !== "undefined") {
        hidden = "hidden";
        visibilityChange = "visibilitychange";
      } else if (typeof document.mozHidden !== "undefined") {
        hidden = "mozHidden";
        visibilityChange = "mozvisibilitychange";
      } else if (typeof document.msHidden !== "undefined") {
        hidden = "msHidden";
        visibilityChange = "msvisibilitychange";
      } else if (typeof document.webkitHidden !== "undefined") {
        hidden = "webkitHidden";
        visibilityChange = "webkitvisibilitychange";
      }
      module.exports = {
        hidden,
        visibilityChange
      };
    }
  });

  // ../node_modules/.pnpm/@taoqf+javascript-state-machine@3.1.6/node_modules/@taoqf/javascript-state-machine/dist/state-machine.min.js
  var require_state_machine_min = __commonJS({
    "../node_modules/.pnpm/@taoqf+javascript-state-machine@3.1.6/node_modules/@taoqf/javascript-state-machine/dist/state-machine.min.js"(exports, module) {
      !function(t, n) {
        "object" == typeof exports && "object" == typeof module ? module.exports = n() : false ? (void 0)([], n) : "object" == typeof exports ? exports.StateMachine = n() : t.StateMachine = n();
      }(exports, function() {
        return s = {}, e.m = i = [function(t, n, i2) {
          "use strict";
          t.exports = function(t2, n2) {
            for (var i3, e2, s2 = 1; s2 < arguments.length; s2++)
              for (e2 in i3 = arguments[s2])
                i3.hasOwnProperty(e2) && (t2[e2] = i3[e2]);
            return t2;
          };
        }, function(t, n, i2) {
          "use strict";
          var o = i2(0);
          t.exports = { build: function(t2, n2) {
            for (var i3, e2 = n2.plugins, s2 = 0, r2 = e2.length; s2 < r2; s2++)
              (i3 = e2[s2]).methods && o(t2, i3.methods), i3.properties && Object.defineProperties(t2, i3.properties);
          }, hook: function(t2, n2, i3) {
            var e2, s2, r2, o2, a = t2.config.plugins, f = [t2.context];
            for (i3 && (f = f.concat(i3)), e2 = 0, s2 = a.length; e2 < s2; e2++)
              o2 = a[e2], (r2 = a[e2][n2]) && r2.apply(o2, f);
          } };
        }, function(t, n, i2) {
          "use strict";
          function e2(t2) {
            if (0 === t2.length)
              return t2;
            var n2, i3, e3 = t2.split(/[_-]/);
            if (1 === e3.length && e3[0][0].toLowerCase() === e3[0][0])
              return t2;
            for (i3 = e3[0].toLowerCase(), n2 = 1; n2 < e3.length; n2++)
              i3 = i3 + e3[n2].charAt(0).toUpperCase() + e3[n2].substring(1).toLowerCase();
            return i3;
          }
          e2.prepended = function(t2, n2) {
            return t2 + (n2 = e2(n2))[0].toUpperCase() + n2.substring(1);
          }, t.exports = e2;
        }, function(t, n, i2) {
          "use strict";
          var e2 = i2(0), s2 = i2(2);
          function r2(t2, n2) {
            t2 = t2 || {}, this.options = t2, this.defaults = n2.defaults, this.states = [], this.transitions = [], this.map = {}, this.lifecycle = this.configureLifecycle(), this.init = this.configureInitTransition(t2.init), this.data = this.configureData(t2.data), this.methods = this.configureMethods(t2.methods), this.map[this.defaults.wildcard] = {}, this.configureTransitions(t2.transitions || []), this.plugins = this.configurePlugins(t2.plugins, n2.plugin);
          }
          e2(r2.prototype, { addState: function(t2) {
            this.map[t2] || (this.states.push(t2), this.addStateLifecycleNames(t2), this.map[t2] = {});
          }, addStateLifecycleNames: function(t2) {
            this.lifecycle.onEnter[t2] = s2.prepended("onEnter", t2), this.lifecycle.onLeave[t2] = s2.prepended("onLeave", t2), this.lifecycle.on[t2] = s2.prepended("on", t2);
          }, addTransition: function(t2) {
            this.transitions.indexOf(t2) < 0 && (this.transitions.push(t2), this.addTransitionLifecycleNames(t2));
          }, addTransitionLifecycleNames: function(t2) {
            this.lifecycle.onBefore[t2] = s2.prepended("onBefore", t2), this.lifecycle.onAfter[t2] = s2.prepended("onAfter", t2), this.lifecycle.on[t2] = s2.prepended("on", t2);
          }, mapTransition: function(t2) {
            var n2 = t2.name, i3 = t2.from, e3 = t2.to;
            return this.addState(i3), "function" != typeof e3 && this.addState(e3), this.addTransition(n2), this.map[i3][n2] = t2;
          }, configureLifecycle: function() {
            return { onBefore: { transition: "onBeforeTransition" }, onAfter: { transition: "onAfterTransition" }, onEnter: { state: "onEnterState" }, onLeave: { state: "onLeaveState" }, on: { transition: "onTransition" } };
          }, configureInitTransition: function(t2) {
            return "string" == typeof t2 ? this.mapTransition(e2({}, this.defaults.init, { to: t2, active: true })) : "object" == typeof t2 ? this.mapTransition(e2({}, this.defaults.init, t2, { active: true })) : (this.addState(this.defaults.init.from), this.defaults.init);
          }, configureData: function(t2) {
            return "function" == typeof t2 ? t2 : "object" == typeof t2 ? function() {
              return t2;
            } : function() {
              return {};
            };
          }, configureMethods: function(t2) {
            return t2 || {};
          }, configurePlugins: function(t2, n2) {
            for (var i3, e3 = 0, s3 = (t2 = t2 || []).length; e3 < s3; e3++)
              "function" == typeof (i3 = t2[e3]) && (t2[e3] = i3 = i3()), i3.configure && i3.configure(this);
            return t2;
          }, configureTransitions: function(t2) {
            for (var n2, i3, e3, s3, r3 = this.defaults.wildcard, o = 0; o < t2.length; o++)
              for (i3 = t2[o], e3 = Array.isArray(i3.from) ? i3.from : [i3.from || r3], s3 = i3.to || r3, n2 = 0; n2 < e3.length; n2++)
                this.mapTransition({ name: i3.name, from: e3[n2], to: s3 });
          }, transitionFor: function(t2, n2) {
            var i3 = this.defaults.wildcard;
            return this.map[t2][n2] || this.map[i3][n2];
          }, transitionsFor: function(t2) {
            var n2 = this.defaults.wildcard;
            return Object.keys(this.map[t2]).concat(Object.keys(this.map[n2]));
          }, allStates: function() {
            return this.states;
          }, allTransitions: function() {
            return this.transitions;
          } }), t.exports = r2;
        }, function(t, n, i2) {
          var e2 = i2(0), s2 = i2(6), a = i2(1), o = [null, []];
          function r2(t2, n2) {
            this.context = t2, this.config = n2, this.state = n2.init.from, this.observers = [t2];
          }
          e2(r2.prototype, { init: function(t2) {
            if (e2(this.context, this.config.data.apply(this.context, t2)), a.hook(this, "init"), this.config.init.active)
              return this.fire(this.config.init.name, []);
          }, is: function(t2) {
            return Array.isArray(t2) ? 0 <= t2.indexOf(this.state) : this.state === t2;
          }, isPending: function() {
            return this.pending;
          }, can: function(t2) {
            return !this.isPending() && !!this.seek(t2);
          }, cannot: function(t2) {
            return !this.can(t2);
          }, allStates: function() {
            return this.config.allStates();
          }, allTransitions: function() {
            return this.config.allTransitions();
          }, transitions: function() {
            return this.config.transitionsFor(this.state);
          }, seek: function(t2, n2) {
            var i3 = this.config.defaults.wildcard, t2 = this.config.transitionFor(this.state, t2), t2 = t2 && t2.to;
            return "function" == typeof t2 ? t2.apply(this.context, n2) : t2 === i3 ? this.state : t2;
          }, fire: function(t2, n2) {
            return this.transit(t2, this.state, this.seek(t2, n2), n2);
          }, transit: function(t2, n2, i3, e3) {
            var s3 = this.config.lifecycle, r3 = this.config.options.observeUnchangedState || n2 !== i3;
            return i3 ? this.isPending() ? this.context.onPendingTransition(t2, n2, i3) : (this.config.addState(i3), this.beginTransit(), e3.unshift({ transition: t2, from: n2, to: i3, fsm: this.context }), this.observeEvents([this.observersForEvent(s3.onBefore.transition), this.observersForEvent(s3.onBefore[t2]), r3 ? this.observersForEvent(s3.onLeave.state) : o, r3 ? this.observersForEvent(s3.onLeave[n2]) : o, this.observersForEvent(s3.on.transition), r3 ? ["doTransit", [this]] : o, r3 ? this.observersForEvent(s3.onEnter.state) : o, r3 ? this.observersForEvent(s3.onEnter[i3]) : o, r3 ? this.observersForEvent(s3.on[i3]) : o, this.observersForEvent(s3.onAfter.transition), this.observersForEvent(s3.onAfter[t2]), this.observersForEvent(s3.on[t2])], e3)) : this.context.onInvalidTransition(t2, n2, i3);
          }, beginTransit: function() {
            this.pending = true;
          }, endTransit: function(t2) {
            return this.pending = false, t2;
          }, failTransit: function(t2) {
            throw this.pending = false, t2;
          }, doTransit: function(t2) {
            this.state = t2.to;
          }, observe: function(t2) {
            var n2;
            2 === t2.length ? ((n2 = {})[t2[0]] = t2[1], this.observers.push(n2)) : this.observers.push(t2[0]);
          }, observersForEvent: function(t2) {
            for (var n2, i3 = 0, e3 = this.observers.length, s3 = []; i3 < e3; i3++)
              (n2 = this.observers[i3])[t2] && s3.push(n2);
            return [t2, s3, true];
          }, observeEvents: function(t2, n2, i3, e3) {
            if (0 === t2.length)
              return this.endTransit(void 0 === e3 || e3);
            var s3 = t2[0][0], r3 = t2[0][1], o2 = t2[0][2];
            if ((n2[0].event = s3) && o2 && s3 !== i3 && a.hook(this, "lifecycle", n2), 0 === r3.length)
              return t2.shift(), this.observeEvents(t2, n2, s3, e3);
            r3 = r3.shift(), r3 = r3[s3].apply(r3, n2);
            return r3 && "function" == typeof r3.then ? r3.then(this.observeEvents.bind(this, t2, n2, s3)).catch(this.failTransit.bind(this)) : false === r3 ? this.endTransit(false) : this.observeEvents(t2, n2, s3, r3);
          }, onInvalidTransition: function(t2, n2, i3) {
            throw new s2("transition is invalid in current state", t2, n2, i3, this.state);
          }, onPendingTransition: function(t2, n2, i3) {
            throw new s2("transition is invalid while previous transition is still in progress", t2, n2, i3, this.state);
          } }), t.exports = r2;
        }, function(t, n, i2) {
          "use strict";
          var e2 = i2(0), s2 = i2(2), r2 = i2(1), o = i2(3), a = i2(4), f = { is: function(t2) {
            return this._fsm.is(t2);
          }, can: function(t2) {
            return this._fsm.can(t2);
          }, cannot: function(t2) {
            return this._fsm.cannot(t2);
          }, observe: function() {
            return this._fsm.observe(arguments);
          }, transitions: function() {
            return this._fsm.transitions();
          }, allTransitions: function() {
            return this._fsm.allTransitions();
          }, allStates: function() {
            return this._fsm.allStates();
          }, onInvalidTransition: function(t2, n2, i3) {
            return this._fsm.onInvalidTransition(t2, n2, i3);
          }, onPendingTransition: function(t2, n2, i3) {
            return this._fsm.onPendingTransition(t2, n2, i3);
          } }, c = { state: { configurable: false, enumerable: true, get: function() {
            return this._fsm.state;
          }, set: function(t2) {
            throw Error("use transitions to change state");
          } } };
          function u(t2) {
            return h(this || {}, t2);
          }
          function h(t2, n2) {
            return l(t2, new o(n2, u)), t2._fsm(), t2;
          }
          function l(n2, t2) {
            if ("object" != typeof n2 || Array.isArray(n2))
              throw Error("StateMachine can only be applied to objects");
            r2.build(n2, t2), Object.defineProperties(n2, c), e2(n2, f), e2(n2, t2.methods), t2.allTransitions().forEach(function(t3) {
              n2[s2(t3)] = function() {
                return this._fsm.fire(t3, [].slice.call(arguments));
              };
            }), n2._fsm = function() {
              this._fsm = new a(this, t2), this._fsm.init(arguments);
            };
          }
          u.version = "3.0.1", u.factory = function() {
            var t2, n2 = "function" == typeof arguments[0] ? (t2 = arguments[0], arguments[1] || {}) : (t2 = function() {
              this._fsm.apply(this, arguments);
            }, arguments[0] || {}), n2 = new o(n2, u);
            return l(t2.prototype, n2), t2.prototype._fsm.config = n2, t2;
          }, u.apply = h, u.defaults = { wildcard: "*", init: { name: "init", from: "none" } }, t.exports = u;
        }, function(t, n, i2) {
          "use strict";
          t.exports = function(t2, n2, i3, e2, s2) {
            this.message = t2, this.transition = n2, this.from = i3, this.to = e2, this.current = s2;
          };
        }], e.c = s, e.i = function(t) {
          return t;
        }, e.d = function(t, n, i2) {
          e.o(t, n) || Object.defineProperty(t, n, { configurable: false, enumerable: true, get: i2 });
        }, e.n = function(t) {
          var n = t && t.__esModule ? function() {
            return t.default;
          } : function() {
            return t;
          };
          return e.d(n, "a", n), n;
        }, e.o = function(t, n) {
          return Object.prototype.hasOwnProperty.call(t, n);
        }, e.p = "", e(e.s = 5);
        function e(t) {
          if (s[t])
            return s[t].exports;
          var n = s[t] = { i: t, l: false, exports: {} };
          return i[t].call(n.exports, n, n.exports, e), n.l = true, n.exports;
        }
        var i, s;
      });
    }
  });

  // ../node_modules/.pnpm/zenscroll@4.0.2/node_modules/zenscroll/zenscroll.js
  var require_zenscroll = __commonJS({
    "../node_modules/.pnpm/zenscroll@4.0.2/node_modules/zenscroll/zenscroll.js"(exports, module) {
      (function(root, factory) {
        if (false) {
          (void 0)([], factory());
        } else if (typeof module === "object" && module.exports) {
          module.exports = factory();
        } else {
          (function install() {
            if (document && document.body) {
              root.zenscroll = factory();
            } else {
              setTimeout(install, 9);
            }
          })();
        }
      })(exports, function() {
        "use strict";
        var isNativeSmoothScrollEnabledOn = function(elem) {
          return elem && "getComputedStyle" in window && window.getComputedStyle(elem)["scroll-behavior"] === "smooth";
        };
        if (typeof window === "undefined" || !("document" in window)) {
          return {};
        }
        var makeScroller = function(container, defaultDuration, edgeOffset) {
          defaultDuration = defaultDuration || 999;
          if (!edgeOffset && edgeOffset !== 0) {
            edgeOffset = 9;
          }
          var scrollTimeoutId;
          var setScrollTimeoutId = function(newValue) {
            scrollTimeoutId = newValue;
          };
          var stopScroll = function() {
            clearTimeout(scrollTimeoutId);
            setScrollTimeoutId(0);
          };
          var getTopWithEdgeOffset = function(elem) {
            return Math.max(0, container.getTopOf(elem) - edgeOffset);
          };
          var scrollToY = function(targetY, duration, onDone) {
            stopScroll();
            if (duration === 0 || duration && duration < 0 || isNativeSmoothScrollEnabledOn(container.body)) {
              container.toY(targetY);
              if (onDone) {
                onDone();
              }
            } else {
              var startY = container.getY();
              var distance = Math.max(0, targetY) - startY;
              var startTime = (/* @__PURE__ */ new Date()).getTime();
              duration = duration || Math.min(Math.abs(distance), defaultDuration);
              (function loopScroll() {
                setScrollTimeoutId(setTimeout(function() {
                  var p = Math.min(1, ((/* @__PURE__ */ new Date()).getTime() - startTime) / duration);
                  var y = Math.max(0, Math.floor(startY + distance * (p < 0.5 ? 2 * p * p : p * (4 - p * 2) - 1)));
                  container.toY(y);
                  if (p < 1 && container.getHeight() + y < container.body.scrollHeight) {
                    loopScroll();
                  } else {
                    setTimeout(stopScroll, 99);
                    if (onDone) {
                      onDone();
                    }
                  }
                }, 9));
              })();
            }
          };
          var scrollToElem = function(elem, duration, onDone) {
            scrollToY(getTopWithEdgeOffset(elem), duration, onDone);
          };
          var scrollIntoView = function(elem, duration, onDone) {
            var elemHeight = elem.getBoundingClientRect().height;
            var elemBottom = container.getTopOf(elem) + elemHeight;
            var containerHeight = container.getHeight();
            var y = container.getY();
            var containerBottom = y + containerHeight;
            if (getTopWithEdgeOffset(elem) < y || elemHeight + edgeOffset > containerHeight) {
              scrollToElem(elem, duration, onDone);
            } else if (elemBottom + edgeOffset > containerBottom) {
              scrollToY(elemBottom - containerHeight + edgeOffset, duration, onDone);
            } else if (onDone) {
              onDone();
            }
          };
          var scrollToCenterOf = function(elem, duration, offset, onDone) {
            scrollToY(Math.max(0, container.getTopOf(elem) - container.getHeight() / 2 + (offset || elem.getBoundingClientRect().height / 2)), duration, onDone);
          };
          var setup = function(newDefaultDuration, newEdgeOffset) {
            if (newDefaultDuration === 0 || newDefaultDuration) {
              defaultDuration = newDefaultDuration;
            }
            if (newEdgeOffset === 0 || newEdgeOffset) {
              edgeOffset = newEdgeOffset;
            }
            return {
              defaultDuration,
              edgeOffset
            };
          };
          return {
            setup,
            to: scrollToElem,
            toY: scrollToY,
            intoView: scrollIntoView,
            center: scrollToCenterOf,
            stop: stopScroll,
            moving: function() {
              return !!scrollTimeoutId;
            },
            getY: container.getY,
            getTopOf: container.getTopOf
          };
        };
        var docElem = document.documentElement;
        var getDocY = function() {
          return window.scrollY || docElem.scrollTop;
        };
        var zenscroll2 = makeScroller({
          body: document.scrollingElement || document.body,
          toY: function(y) {
            window.scrollTo(0, y);
          },
          getY: getDocY,
          getHeight: function() {
            return window.innerHeight || docElem.clientHeight;
          },
          getTopOf: function(elem) {
            return elem.getBoundingClientRect().top + getDocY() - docElem.offsetTop;
          }
        });
        zenscroll2.createScroller = function(scrollContainer, defaultDuration, edgeOffset) {
          return makeScroller({
            body: scrollContainer,
            toY: function(y) {
              scrollContainer.scrollTop = y;
            },
            getY: function() {
              return scrollContainer.scrollTop;
            },
            getHeight: function() {
              return Math.min(scrollContainer.clientHeight, window.innerHeight || docElem.clientHeight);
            },
            getTopOf: function(elem) {
              return elem.offsetTop;
            }
          }, defaultDuration, edgeOffset);
        };
        if ("addEventListener" in window && !window.noZensmooth && !isNativeSmoothScrollEnabledOn(document.body)) {
          var isHistorySupported = "history" in window && "pushState" in history;
          var isScrollRestorationSupported = isHistorySupported && "scrollRestoration" in history;
          if (isScrollRestorationSupported) {
            history.scrollRestoration = "auto";
          }
          window.addEventListener("load", function() {
            if (isScrollRestorationSupported) {
              setTimeout(function() {
                history.scrollRestoration = "manual";
              }, 9);
              window.addEventListener("popstate", function(event) {
                if (event.state && "zenscrollY" in event.state) {
                  zenscroll2.toY(event.state.zenscrollY);
                }
              }, false);
            }
            if (window.location.hash) {
              setTimeout(function() {
                var edgeOffset = zenscroll2.setup().edgeOffset;
                if (edgeOffset) {
                  var targetElem = document.getElementById(window.location.href.split("#")[1]);
                  if (targetElem) {
                    var targetY = Math.max(0, zenscroll2.getTopOf(targetElem) - edgeOffset);
                    var diff = zenscroll2.getY() - targetY;
                    if (0 <= diff && diff < 9) {
                      window.scrollTo(0, targetY);
                    }
                  }
                }
              }, 9);
            }
          }, false);
          var RE_noZensmooth = new RegExp("(^|\\s)noZensmooth(\\s|$)");
          window.addEventListener("click", function(event) {
            var anchor = event.target;
            while (anchor && anchor.tagName !== "A") {
              anchor = anchor.parentNode;
            }
            if (!anchor || event.which !== 1 || event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {
              return;
            }
            if (isScrollRestorationSupported) {
              var historyState = history.state && typeof history.state === "object" ? history.state : {};
              historyState.zenscrollY = zenscroll2.getY();
              try {
                history.replaceState(historyState, "");
              } catch (e) {
              }
            }
            var href = anchor.getAttribute("href") || "";
            if (href.indexOf("#") === 0 && !RE_noZensmooth.test(anchor.className)) {
              var targetY = 0;
              var targetElem = document.getElementById(href.substring(1));
              if (href !== "#") {
                if (!targetElem) {
                  return;
                }
                targetY = zenscroll2.getTopOf(targetElem);
              }
              event.preventDefault();
              var onDone = function() {
                window.location = href;
              };
              var edgeOffset = zenscroll2.setup().edgeOffset;
              if (edgeOffset) {
                targetY = Math.max(0, targetY - edgeOffset);
                if (isHistorySupported) {
                  onDone = function() {
                    history.pushState({}, "", href);
                  };
                }
              }
              zenscroll2.toY(targetY, null, onDone);
            }
          }, false);
        }
        return zenscroll2;
      });
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/collection-utils.js
  var require_collection_utils = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/collection-utils.js"(exports, module) {
      "use strict";
      var utils = module.exports = {};
      utils.forEach = function(collection, callback) {
        for (var i = 0; i < collection.length; i++) {
          var result = callback(collection[i]);
          if (result) {
            return result;
          }
        }
      };
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/element-utils.js
  var require_element_utils = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/element-utils.js"(exports, module) {
      "use strict";
      module.exports = function(options) {
        var getState = options.stateHandler.getState;
        function isDetectable(element) {
          var state9 = getState(element);
          return state9 && !!state9.isDetectable;
        }
        function markAsDetectable(element) {
          getState(element).isDetectable = true;
        }
        function isBusy(element) {
          return !!getState(element).busy;
        }
        function markBusy(element, busy) {
          getState(element).busy = !!busy;
        }
        return {
          isDetectable,
          markAsDetectable,
          isBusy,
          markBusy
        };
      };
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/listener-handler.js
  var require_listener_handler = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/listener-handler.js"(exports, module) {
      "use strict";
      module.exports = function(idHandler) {
        var eventListeners = {};
        function getListeners(element) {
          var id = idHandler.get(element);
          if (id === void 0) {
            return [];
          }
          return eventListeners[id] || [];
        }
        function addListener(element, listener) {
          var id = idHandler.get(element);
          if (!eventListeners[id]) {
            eventListeners[id] = [];
          }
          eventListeners[id].push(listener);
        }
        function removeListener(element, listener) {
          var listeners = getListeners(element);
          for (var i = 0, len = listeners.length; i < len; ++i) {
            if (listeners[i] === listener) {
              listeners.splice(i, 1);
              break;
            }
          }
        }
        function removeAllListeners(element) {
          var listeners = getListeners(element);
          if (!listeners) {
            return;
          }
          listeners.length = 0;
        }
        return {
          get: getListeners,
          add: addListener,
          removeListener,
          removeAllListeners
        };
      };
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/id-generator.js
  var require_id_generator = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/id-generator.js"(exports, module) {
      "use strict";
      module.exports = function() {
        var idCount = 1;
        function generate() {
          return idCount++;
        }
        return {
          generate
        };
      };
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/id-handler.js
  var require_id_handler = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/id-handler.js"(exports, module) {
      "use strict";
      module.exports = function(options) {
        var idGenerator = options.idGenerator;
        var getState = options.stateHandler.getState;
        function getId(element) {
          var state9 = getState(element);
          if (state9 && state9.id !== void 0) {
            return state9.id;
          }
          return null;
        }
        function setId(element) {
          var state9 = getState(element);
          if (!state9) {
            throw new Error("setId required the element to have a resize detection state.");
          }
          var id = idGenerator.generate();
          state9.id = id;
          return id;
        }
        return {
          get: getId,
          set: setId
        };
      };
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/reporter.js
  var require_reporter = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/reporter.js"(exports, module) {
      "use strict";
      module.exports = function(quiet) {
        function noop3() {
        }
        var reporter = {
          log: noop3,
          warn: noop3,
          error: noop3
        };
        if (!quiet && window.console) {
          var attachFunction = function(reporter2, name) {
            reporter2[name] = function reporterProxy() {
              var f = console[name];
              if (f.apply) {
                f.apply(console, arguments);
              } else {
                for (var i = 0; i < arguments.length; i++) {
                  f(arguments[i]);
                }
              }
            };
          };
          attachFunction(reporter, "log");
          attachFunction(reporter, "warn");
          attachFunction(reporter, "error");
        }
        return reporter;
      };
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/browser-detector.js
  var require_browser_detector = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/browser-detector.js"(exports, module) {
      "use strict";
      var detector = module.exports = {};
      detector.isIE = function(version) {
        function isAnyIeVersion() {
          var agent = navigator.userAgent.toLowerCase();
          return agent.indexOf("msie") !== -1 || agent.indexOf("trident") !== -1 || agent.indexOf(" edge/") !== -1;
        }
        if (!isAnyIeVersion()) {
          return false;
        }
        if (!version) {
          return true;
        }
        var ieVersion = function() {
          var undef, v = 3, div = document.createElement("div"), all = div.getElementsByTagName("i");
          do {
            div.innerHTML = "<!--[if gt IE " + ++v + "]><i></i><![endif]-->";
          } while (all[0]);
          return v > 4 ? v : undef;
        }();
        return version === ieVersion;
      };
      detector.isLegacyOpera = function() {
        return !!window.opera;
      };
    }
  });

  // ../node_modules/.pnpm/batch-processor@1.0.0/node_modules/batch-processor/src/utils.js
  var require_utils = __commonJS({
    "../node_modules/.pnpm/batch-processor@1.0.0/node_modules/batch-processor/src/utils.js"(exports, module) {
      "use strict";
      var utils = module.exports = {};
      utils.getOption = getOption;
      function getOption(options, name, defaultValue) {
        var value = options[name];
        if ((value === void 0 || value === null) && defaultValue !== void 0) {
          return defaultValue;
        }
        return value;
      }
    }
  });

  // ../node_modules/.pnpm/batch-processor@1.0.0/node_modules/batch-processor/src/batch-processor.js
  var require_batch_processor = __commonJS({
    "../node_modules/.pnpm/batch-processor@1.0.0/node_modules/batch-processor/src/batch-processor.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = function batchProcessorMaker(options) {
        options = options || {};
        var reporter = options.reporter;
        var asyncProcess = utils.getOption(options, "async", true);
        var autoProcess = utils.getOption(options, "auto", true);
        if (autoProcess && !asyncProcess) {
          reporter && reporter.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true.");
          asyncProcess = true;
        }
        var batch = Batch();
        var asyncFrameHandler;
        var isProcessing = false;
        function addFunction(level, fn) {
          if (!isProcessing && autoProcess && asyncProcess && batch.size() === 0) {
            processBatchAsync();
          }
          batch.add(level, fn);
        }
        function processBatch() {
          isProcessing = true;
          while (batch.size()) {
            var processingBatch = batch;
            batch = Batch();
            processingBatch.process();
          }
          isProcessing = false;
        }
        function forceProcessBatch(localAsyncProcess) {
          if (isProcessing) {
            return;
          }
          if (localAsyncProcess === void 0) {
            localAsyncProcess = asyncProcess;
          }
          if (asyncFrameHandler) {
            cancelFrame(asyncFrameHandler);
            asyncFrameHandler = null;
          }
          if (localAsyncProcess) {
            processBatchAsync();
          } else {
            processBatch();
          }
        }
        function processBatchAsync() {
          asyncFrameHandler = requestFrame(processBatch);
        }
        function clearBatch() {
          batch = {};
          batchSize = 0;
          topLevel = 0;
          bottomLevel = 0;
        }
        function cancelFrame(listener) {
          var cancel = clearTimeout;
          return cancel(listener);
        }
        function requestFrame(callback) {
          var raf = function(fn) {
            return setTimeout(fn, 0);
          };
          return raf(callback);
        }
        return {
          add: addFunction,
          force: forceProcessBatch
        };
      };
      function Batch() {
        var batch = {};
        var size = 0;
        var topLevel2 = 0;
        var bottomLevel2 = 0;
        function add(level, fn) {
          if (!fn) {
            fn = level;
            level = 0;
          }
          if (level > topLevel2) {
            topLevel2 = level;
          } else if (level < bottomLevel2) {
            bottomLevel2 = level;
          }
          if (!batch[level]) {
            batch[level] = [];
          }
          batch[level].push(fn);
          size++;
        }
        function process() {
          for (var level = bottomLevel2; level <= topLevel2; level++) {
            var fns = batch[level];
            for (var i = 0; i < fns.length; i++) {
              var fn = fns[i];
              fn();
            }
          }
        }
        function getSize() {
          return size;
        }
        return {
          add,
          process,
          size: getSize
        };
      }
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/state-handler.js
  var require_state_handler = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/state-handler.js"(exports, module) {
      "use strict";
      var prop = "_erd";
      function initState(element) {
        element[prop] = {};
        return getState(element);
      }
      function getState(element) {
        return element[prop];
      }
      function cleanState(element) {
        delete element[prop];
      }
      module.exports = {
        initState,
        getState,
        cleanState
      };
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/detection-strategy/object.js
  var require_object = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/detection-strategy/object.js"(exports, module) {
      "use strict";
      var browserDetector = require_browser_detector();
      module.exports = function(options) {
        options = options || {};
        var reporter = options.reporter;
        var batchProcessor = options.batchProcessor;
        var getState = options.stateHandler.getState;
        if (!reporter) {
          throw new Error("Missing required dependency: reporter.");
        }
        function addListener(element, listener) {
          function listenerProxy() {
            listener(element);
          }
          if (browserDetector.isIE(8)) {
            getState(element).object = {
              proxy: listenerProxy
            };
            element.attachEvent("onresize", listenerProxy);
          } else {
            var object = getObject(element);
            if (!object) {
              throw new Error("Element is not detectable by this strategy.");
            }
            object.contentDocument.defaultView.addEventListener("resize", listenerProxy);
          }
        }
        function buildCssTextString(rules) {
          var seperator = options.important ? " !important; " : "; ";
          return (rules.join(seperator) + seperator).trim();
        }
        function makeDetectable(options2, element, callback) {
          if (!callback) {
            callback = element;
            element = options2;
            options2 = null;
          }
          options2 = options2 || {};
          var debug = options2.debug;
          function injectObject(element2, callback2) {
            var OBJECT_STYLE = buildCssTextString(["display: block", "position: absolute", "top: 0", "left: 0", "width: 100%", "height: 100%", "border: none", "padding: 0", "margin: 0", "opacity: 0", "z-index: -1000", "pointer-events: none"]);
            var positionCheckPerformed = false;
            var style = window.getComputedStyle(element2);
            var width = element2.offsetWidth;
            var height = element2.offsetHeight;
            getState(element2).startSize = {
              width,
              height
            };
            function mutateDom() {
              function alterPositionStyles() {
                if (style.position === "static") {
                  element2.style.setProperty("position", "relative", options2.important ? "important" : "");
                  var removeRelativeStyles = function(reporter2, element3, style2, property) {
                    function getNumericalValue(value2) {
                      return value2.replace(/[^-\d\.]/g, "");
                    }
                    var value = style2[property];
                    if (value !== "auto" && getNumericalValue(value) !== "0") {
                      reporter2.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element3);
                      element3.style.setProperty(property, "0", options2.important ? "important" : "");
                    }
                  };
                  removeRelativeStyles(reporter, element2, style, "top");
                  removeRelativeStyles(reporter, element2, style, "right");
                  removeRelativeStyles(reporter, element2, style, "bottom");
                  removeRelativeStyles(reporter, element2, style, "left");
                }
              }
              function onObjectLoad() {
                if (!positionCheckPerformed) {
                  alterPositionStyles();
                }
                function getDocument(element3, callback3) {
                  if (!element3.contentDocument) {
                    var state9 = getState(element3);
                    if (state9.checkForObjectDocumentTimeoutId) {
                      window.clearTimeout(state9.checkForObjectDocumentTimeoutId);
                    }
                    state9.checkForObjectDocumentTimeoutId = setTimeout(function checkForObjectDocument() {
                      state9.checkForObjectDocumentTimeoutId = 0;
                      getDocument(element3, callback3);
                    }, 100);
                    return;
                  }
                  callback3(element3.contentDocument);
                }
                var objectElement = this;
                getDocument(objectElement, function onObjectDocumentReady(objectDocument) {
                  callback2(element2);
                });
              }
              if (style.position !== "") {
                alterPositionStyles(style);
                positionCheckPerformed = true;
              }
              var object = document.createElement("object");
              object.style.cssText = OBJECT_STYLE;
              object.tabIndex = -1;
              object.type = "text/html";
              object.setAttribute("aria-hidden", "true");
              object.onload = onObjectLoad;
              if (!browserDetector.isIE()) {
                object.data = "about:blank";
              }
              if (!getState(element2)) {
                return;
              }
              element2.appendChild(object);
              getState(element2).object = object;
              if (browserDetector.isIE()) {
                object.data = "about:blank";
              }
            }
            if (batchProcessor) {
              batchProcessor.add(mutateDom);
            } else {
              mutateDom();
            }
          }
          if (browserDetector.isIE(8)) {
            callback(element);
          } else {
            injectObject(element, callback);
          }
        }
        function getObject(element) {
          return getState(element).object;
        }
        function uninstall(element) {
          if (!getState(element)) {
            return;
          }
          var object = getObject(element);
          if (!object) {
            return;
          }
          if (browserDetector.isIE(8)) {
            element.detachEvent("onresize", object.proxy);
          } else {
            element.removeChild(object);
          }
          if (getState(element).checkForObjectDocumentTimeoutId) {
            window.clearTimeout(getState(element).checkForObjectDocumentTimeoutId);
          }
          delete getState(element).object;
        }
        return {
          makeDetectable,
          addListener,
          uninstall
        };
      };
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/detection-strategy/scroll.js
  var require_scroll = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/detection-strategy/scroll.js"(exports, module) {
      "use strict";
      var forEach = require_collection_utils().forEach;
      module.exports = function(options) {
        options = options || {};
        var reporter = options.reporter;
        var batchProcessor = options.batchProcessor;
        var getState = options.stateHandler.getState;
        var hasState = options.stateHandler.hasState;
        var idHandler = options.idHandler;
        if (!batchProcessor) {
          throw new Error("Missing required dependency: batchProcessor");
        }
        if (!reporter) {
          throw new Error("Missing required dependency: reporter.");
        }
        var scrollbarSizes = getScrollbarSizes();
        var styleId = "erd_scroll_detection_scrollbar_style";
        var detectionContainerClass = "erd_scroll_detection_container";
        function initDocument(targetDocument) {
          injectScrollStyle(targetDocument, styleId, detectionContainerClass);
        }
        initDocument(window.document);
        function buildCssTextString(rules) {
          var seperator = options.important ? " !important; " : "; ";
          return (rules.join(seperator) + seperator).trim();
        }
        function getScrollbarSizes() {
          var width = 500;
          var height = 500;
          var child = document.createElement("div");
          child.style.cssText = buildCssTextString(["position: absolute", "width: " + width * 2 + "px", "height: " + height * 2 + "px", "visibility: hidden", "margin: 0", "padding: 0"]);
          var container = document.createElement("div");
          container.style.cssText = buildCssTextString(["position: absolute", "width: " + width + "px", "height: " + height + "px", "overflow: scroll", "visibility: none", "top: " + -width * 3 + "px", "left: " + -height * 3 + "px", "visibility: hidden", "margin: 0", "padding: 0"]);
          container.appendChild(child);
          document.body.insertBefore(container, document.body.firstChild);
          var widthSize = width - container.clientWidth;
          var heightSize = height - container.clientHeight;
          document.body.removeChild(container);
          return {
            width: widthSize,
            height: heightSize
          };
        }
        function injectScrollStyle(targetDocument, styleId2, containerClass) {
          function injectStyle(style2, method) {
            method = method || function(element) {
              targetDocument.head.appendChild(element);
            };
            var styleElement = targetDocument.createElement("style");
            styleElement.innerHTML = style2;
            styleElement.id = styleId2;
            method(styleElement);
            return styleElement;
          }
          if (!targetDocument.getElementById(styleId2)) {
            var containerAnimationClass = containerClass + "_animation";
            var containerAnimationActiveClass = containerClass + "_animation_active";
            var style = "/* Created by the element-resize-detector library. */\n";
            style += "." + containerClass + " > div::-webkit-scrollbar { " + buildCssTextString(["display: none"]) + " }\n\n";
            style += "." + containerAnimationActiveClass + " { " + buildCssTextString(["-webkit-animation-duration: 0.1s", "animation-duration: 0.1s", "-webkit-animation-name: " + containerAnimationClass, "animation-name: " + containerAnimationClass]) + " }\n";
            style += "@-webkit-keyframes " + containerAnimationClass + " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n";
            style += "@keyframes " + containerAnimationClass + " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }";
            injectStyle(style);
          }
        }
        function addAnimationClass(element) {
          element.className += " " + detectionContainerClass + "_animation_active";
        }
        function addEvent(el, name, cb) {
          if (el.addEventListener) {
            el.addEventListener(name, cb);
          } else if (el.attachEvent) {
            el.attachEvent("on" + name, cb);
          } else {
            return reporter.error("[scroll] Don't know how to add event listeners.");
          }
        }
        function removeEvent(el, name, cb) {
          if (el.removeEventListener) {
            el.removeEventListener(name, cb);
          } else if (el.detachEvent) {
            el.detachEvent("on" + name, cb);
          } else {
            return reporter.error("[scroll] Don't know how to remove event listeners.");
          }
        }
        function getExpandElement(element) {
          return getState(element).container.childNodes[0].childNodes[0].childNodes[0];
        }
        function getShrinkElement(element) {
          return getState(element).container.childNodes[0].childNodes[0].childNodes[1];
        }
        function addListener(element, listener) {
          var listeners = getState(element).listeners;
          if (!listeners.push) {
            throw new Error("Cannot add listener to an element that is not detectable.");
          }
          getState(element).listeners.push(listener);
        }
        function makeDetectable(options2, element, callback) {
          if (!callback) {
            callback = element;
            element = options2;
            options2 = null;
          }
          options2 = options2 || {};
          function debug() {
            if (options2.debug) {
              var args = Array.prototype.slice.call(arguments);
              args.unshift(idHandler.get(element), "Scroll: ");
              if (reporter.log.apply) {
                reporter.log.apply(null, args);
              } else {
                for (var i = 0; i < args.length; i++) {
                  reporter.log(args[i]);
                }
              }
            }
          }
          function isDetached(element2) {
            function isInDocument(element3) {
              var isInShadowRoot = element3.getRootNode && element3.getRootNode().contains(element3);
              return element3 === element3.ownerDocument.body || element3.ownerDocument.body.contains(element3) || isInShadowRoot;
            }
            if (!isInDocument(element2)) {
              return true;
            }
            if (window.getComputedStyle(element2) === null) {
              return true;
            }
            return false;
          }
          function isUnrendered(element2) {
            var container = getState(element2).container.childNodes[0];
            var style = window.getComputedStyle(container);
            return !style.width || style.width.indexOf("px") === -1;
          }
          function getStyle() {
            var elementStyle = window.getComputedStyle(element);
            var style = {};
            style.position = elementStyle.position;
            style.width = element.offsetWidth;
            style.height = element.offsetHeight;
            style.top = elementStyle.top;
            style.right = elementStyle.right;
            style.bottom = elementStyle.bottom;
            style.left = elementStyle.left;
            style.widthCSS = elementStyle.width;
            style.heightCSS = elementStyle.height;
            return style;
          }
          function storeStartSize() {
            var style = getStyle();
            getState(element).startSize = {
              width: style.width,
              height: style.height
            };
            debug("Element start size", getState(element).startSize);
          }
          function initListeners() {
            getState(element).listeners = [];
          }
          function storeStyle() {
            debug("storeStyle invoked.");
            if (!getState(element)) {
              debug("Aborting because element has been uninstalled");
              return;
            }
            var style = getStyle();
            getState(element).style = style;
          }
          function storeCurrentSize(element2, width, height) {
            getState(element2).lastWidth = width;
            getState(element2).lastHeight = height;
          }
          function getExpandChildElement(element2) {
            return getExpandElement(element2).childNodes[0];
          }
          function getWidthOffset() {
            return 2 * scrollbarSizes.width + 1;
          }
          function getHeightOffset() {
            return 2 * scrollbarSizes.height + 1;
          }
          function getExpandWidth(width) {
            return width + 10 + getWidthOffset();
          }
          function getExpandHeight(height) {
            return height + 10 + getHeightOffset();
          }
          function getShrinkWidth(width) {
            return width * 2 + getWidthOffset();
          }
          function getShrinkHeight(height) {
            return height * 2 + getHeightOffset();
          }
          function positionScrollbars(element2, width, height) {
            var expand = getExpandElement(element2);
            var shrink = getShrinkElement(element2);
            var expandWidth = getExpandWidth(width);
            var expandHeight = getExpandHeight(height);
            var shrinkWidth = getShrinkWidth(width);
            var shrinkHeight = getShrinkHeight(height);
            expand.scrollLeft = expandWidth;
            expand.scrollTop = expandHeight;
            shrink.scrollLeft = shrinkWidth;
            shrink.scrollTop = shrinkHeight;
          }
          function injectContainerElement() {
            var container = getState(element).container;
            if (!container) {
              container = document.createElement("div");
              container.className = detectionContainerClass;
              container.style.cssText = buildCssTextString(["visibility: hidden", "display: inline", "width: 0px", "height: 0px", "z-index: -1", "overflow: hidden", "margin: 0", "padding: 0"]);
              getState(element).container = container;
              addAnimationClass(container);
              element.appendChild(container);
              var onAnimationStart = function() {
                getState(element).onRendered && getState(element).onRendered();
              };
              addEvent(container, "animationstart", onAnimationStart);
              getState(element).onAnimationStart = onAnimationStart;
            }
            return container;
          }
          function injectScrollElements() {
            function alterPositionStyles() {
              var style = getState(element).style;
              if (style.position === "static") {
                element.style.setProperty("position", "relative", options2.important ? "important" : "");
                var removeRelativeStyles = function(reporter2, element2, style2, property) {
                  function getNumericalValue(value2) {
                    return value2.replace(/[^-\d\.]/g, "");
                  }
                  var value = style2[property];
                  if (value !== "auto" && getNumericalValue(value) !== "0") {
                    reporter2.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element2);
                    element2.style[property] = 0;
                  }
                };
                removeRelativeStyles(reporter, element, style, "top");
                removeRelativeStyles(reporter, element, style, "right");
                removeRelativeStyles(reporter, element, style, "bottom");
                removeRelativeStyles(reporter, element, style, "left");
              }
            }
            function getLeftTopBottomRightCssText(left, top, bottom, right) {
              left = !left ? "0" : left + "px";
              top = !top ? "0" : top + "px";
              bottom = !bottom ? "0" : bottom + "px";
              right = !right ? "0" : right + "px";
              return ["left: " + left, "top: " + top, "right: " + right, "bottom: " + bottom];
            }
            debug("Injecting elements");
            if (!getState(element)) {
              debug("Aborting because element has been uninstalled");
              return;
            }
            alterPositionStyles();
            var rootContainer = getState(element).container;
            if (!rootContainer) {
              rootContainer = injectContainerElement();
            }
            var scrollbarWidth = scrollbarSizes.width;
            var scrollbarHeight = scrollbarSizes.height;
            var containerContainerStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: hidden", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%", "left: 0px", "top: 0px"]);
            var containerStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: hidden", "z-index: -1", "visibility: hidden"].concat(getLeftTopBottomRightCssText(-(1 + scrollbarWidth), -(1 + scrollbarHeight), -scrollbarHeight, -scrollbarWidth)));
            var expandStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: scroll", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%"]);
            var shrinkStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: scroll", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%"]);
            var expandChildStyle = buildCssTextString(["position: absolute", "left: 0", "top: 0"]);
            var shrinkChildStyle = buildCssTextString(["position: absolute", "width: 200%", "height: 200%"]);
            var containerContainer = document.createElement("div");
            var container = document.createElement("div");
            var expand = document.createElement("div");
            var expandChild = document.createElement("div");
            var shrink = document.createElement("div");
            var shrinkChild = document.createElement("div");
            containerContainer.dir = "ltr";
            containerContainer.style.cssText = containerContainerStyle;
            containerContainer.className = detectionContainerClass;
            container.className = detectionContainerClass;
            container.style.cssText = containerStyle;
            expand.style.cssText = expandStyle;
            expandChild.style.cssText = expandChildStyle;
            shrink.style.cssText = shrinkStyle;
            shrinkChild.style.cssText = shrinkChildStyle;
            expand.appendChild(expandChild);
            shrink.appendChild(shrinkChild);
            container.appendChild(expand);
            container.appendChild(shrink);
            containerContainer.appendChild(container);
            rootContainer.appendChild(containerContainer);
            function onExpandScroll() {
              var state9 = getState(element);
              if (state9 && state9.onExpand) {
                state9.onExpand();
              } else {
                debug("Aborting expand scroll handler: element has been uninstalled");
              }
            }
            function onShrinkScroll() {
              var state9 = getState(element);
              if (state9 && state9.onShrink) {
                state9.onShrink();
              } else {
                debug("Aborting shrink scroll handler: element has been uninstalled");
              }
            }
            addEvent(expand, "scroll", onExpandScroll);
            addEvent(shrink, "scroll", onShrinkScroll);
            getState(element).onExpandScroll = onExpandScroll;
            getState(element).onShrinkScroll = onShrinkScroll;
          }
          function registerListenersAndPositionElements() {
            function updateChildSizes(element2, width, height) {
              var expandChild = getExpandChildElement(element2);
              var expandWidth = getExpandWidth(width);
              var expandHeight = getExpandHeight(height);
              expandChild.style.setProperty("width", expandWidth + "px", options2.important ? "important" : "");
              expandChild.style.setProperty("height", expandHeight + "px", options2.important ? "important" : "");
            }
            function updateDetectorElements(done) {
              var width = element.offsetWidth;
              var height = element.offsetHeight;
              var sizeChanged = width !== getState(element).lastWidth || height !== getState(element).lastHeight;
              debug("Storing current size", width, height);
              storeCurrentSize(element, width, height);
              batchProcessor.add(0, function performUpdateChildSizes() {
                if (!sizeChanged) {
                  return;
                }
                if (!getState(element)) {
                  debug("Aborting because element has been uninstalled");
                  return;
                }
                if (!areElementsInjected()) {
                  debug("Aborting because element container has not been initialized");
                  return;
                }
                if (options2.debug) {
                  var w = element.offsetWidth;
                  var h = element.offsetHeight;
                  if (w !== width || h !== height) {
                    reporter.warn(idHandler.get(element), "Scroll: Size changed before updating detector elements.");
                  }
                }
                updateChildSizes(element, width, height);
              });
              batchProcessor.add(1, function updateScrollbars() {
                if (!getState(element)) {
                  debug("Aborting because element has been uninstalled");
                  return;
                }
                if (!areElementsInjected()) {
                  debug("Aborting because element container has not been initialized");
                  return;
                }
                positionScrollbars(element, width, height);
              });
              if (sizeChanged && done) {
                batchProcessor.add(2, function() {
                  if (!getState(element)) {
                    debug("Aborting because element has been uninstalled");
                    return;
                  }
                  if (!areElementsInjected()) {
                    debug("Aborting because element container has not been initialized");
                    return;
                  }
                  done();
                });
              }
            }
            function areElementsInjected() {
              return !!getState(element).container;
            }
            function notifyListenersIfNeeded() {
              function isFirstNotify() {
                return getState(element).lastNotifiedWidth === void 0;
              }
              debug("notifyListenersIfNeeded invoked");
              var state9 = getState(element);
              if (isFirstNotify() && state9.lastWidth === state9.startSize.width && state9.lastHeight === state9.startSize.height) {
                return debug("Not notifying: Size is the same as the start size, and there has been no notification yet.");
              }
              if (state9.lastWidth === state9.lastNotifiedWidth && state9.lastHeight === state9.lastNotifiedHeight) {
                return debug("Not notifying: Size already notified");
              }
              debug("Current size not notified, notifying...");
              state9.lastNotifiedWidth = state9.lastWidth;
              state9.lastNotifiedHeight = state9.lastHeight;
              forEach(getState(element).listeners, function(listener) {
                listener(element);
              });
            }
            function handleRender() {
              debug("startanimation triggered.");
              if (isUnrendered(element)) {
                debug("Ignoring since element is still unrendered...");
                return;
              }
              debug("Element rendered.");
              var expand = getExpandElement(element);
              var shrink = getShrinkElement(element);
              if (expand.scrollLeft === 0 || expand.scrollTop === 0 || shrink.scrollLeft === 0 || shrink.scrollTop === 0) {
                debug("Scrollbars out of sync. Updating detector elements...");
                updateDetectorElements(notifyListenersIfNeeded);
              }
            }
            function handleScroll() {
              debug("Scroll detected.");
              if (isUnrendered(element)) {
                debug("Scroll event fired while unrendered. Ignoring...");
                return;
              }
              updateDetectorElements(notifyListenersIfNeeded);
            }
            debug("registerListenersAndPositionElements invoked.");
            if (!getState(element)) {
              debug("Aborting because element has been uninstalled");
              return;
            }
            getState(element).onRendered = handleRender;
            getState(element).onExpand = handleScroll;
            getState(element).onShrink = handleScroll;
            var style = getState(element).style;
            updateChildSizes(element, style.width, style.height);
          }
          function finalizeDomMutation() {
            debug("finalizeDomMutation invoked.");
            if (!getState(element)) {
              debug("Aborting because element has been uninstalled");
              return;
            }
            var style = getState(element).style;
            storeCurrentSize(element, style.width, style.height);
            positionScrollbars(element, style.width, style.height);
          }
          function ready() {
            callback(element);
          }
          function install() {
            debug("Installing...");
            initListeners();
            storeStartSize();
            batchProcessor.add(0, storeStyle);
            batchProcessor.add(1, injectScrollElements);
            batchProcessor.add(2, registerListenersAndPositionElements);
            batchProcessor.add(3, finalizeDomMutation);
            batchProcessor.add(4, ready);
          }
          debug("Making detectable...");
          if (isDetached(element)) {
            debug("Element is detached");
            injectContainerElement();
            debug("Waiting until element is attached...");
            getState(element).onRendered = function() {
              debug("Element is now attached");
              install();
            };
          } else {
            install();
          }
        }
        function uninstall(element) {
          var state9 = getState(element);
          if (!state9) {
            return;
          }
          state9.onExpandScroll && removeEvent(getExpandElement(element), "scroll", state9.onExpandScroll);
          state9.onShrinkScroll && removeEvent(getShrinkElement(element), "scroll", state9.onShrinkScroll);
          state9.onAnimationStart && removeEvent(state9.container, "animationstart", state9.onAnimationStart);
          state9.container && element.removeChild(state9.container);
        }
        return {
          makeDetectable,
          addListener,
          uninstall,
          initDocument
        };
      };
    }
  });

  // ../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/element-resize-detector.js
  var require_element_resize_detector = __commonJS({
    "../node_modules/.pnpm/element-resize-detector@1.2.4/node_modules/element-resize-detector/src/element-resize-detector.js"(exports, module) {
      "use strict";
      var forEach = require_collection_utils().forEach;
      var elementUtilsMaker = require_element_utils();
      var listenerHandlerMaker = require_listener_handler();
      var idGeneratorMaker = require_id_generator();
      var idHandlerMaker = require_id_handler();
      var reporterMaker = require_reporter();
      var browserDetector = require_browser_detector();
      var batchProcessorMaker = require_batch_processor();
      var stateHandler = require_state_handler();
      var objectStrategyMaker = require_object();
      var scrollStrategyMaker = require_scroll();
      function isCollection(obj) {
        return Array.isArray(obj) || obj.length !== void 0;
      }
      function toArray(collection) {
        if (!Array.isArray(collection)) {
          var array = [];
          forEach(collection, function(obj) {
            array.push(obj);
          });
          return array;
        } else {
          return collection;
        }
      }
      function isElement(obj) {
        return obj && obj.nodeType === 1;
      }
      module.exports = function(options) {
        options = options || {};
        var idHandler;
        if (options.idHandler) {
          idHandler = {
            get: function(element) {
              return options.idHandler.get(element, true);
            },
            set: options.idHandler.set
          };
        } else {
          var idGenerator = idGeneratorMaker();
          var defaultIdHandler = idHandlerMaker({
            idGenerator,
            stateHandler
          });
          idHandler = defaultIdHandler;
        }
        var reporter = options.reporter;
        if (!reporter) {
          var quiet = reporter === false;
          reporter = reporterMaker(quiet);
        }
        var batchProcessor = getOption(options, "batchProcessor", batchProcessorMaker({ reporter }));
        var globalOptions = {};
        globalOptions.callOnAdd = !!getOption(options, "callOnAdd", true);
        globalOptions.debug = !!getOption(options, "debug", false);
        var eventListenerHandler = listenerHandlerMaker(idHandler);
        var elementUtils = elementUtilsMaker({
          stateHandler
        });
        var detectionStrategy;
        var desiredStrategy = getOption(options, "strategy", "object");
        var importantCssRules = getOption(options, "important", false);
        var strategyOptions = {
          reporter,
          batchProcessor,
          stateHandler,
          idHandler,
          important: importantCssRules
        };
        if (desiredStrategy === "scroll") {
          if (browserDetector.isLegacyOpera()) {
            reporter.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy.");
            desiredStrategy = "object";
          } else if (browserDetector.isIE(9)) {
            reporter.warn("Scroll strategy is not supported on IE9. Changing to object strategy.");
            desiredStrategy = "object";
          }
        }
        if (desiredStrategy === "scroll") {
          detectionStrategy = scrollStrategyMaker(strategyOptions);
        } else if (desiredStrategy === "object") {
          detectionStrategy = objectStrategyMaker(strategyOptions);
        } else {
          throw new Error("Invalid strategy name: " + desiredStrategy);
        }
        var onReadyCallbacks = {};
        function listenTo(options2, elements, listener) {
          function onResizeCallback(element) {
            var listeners = eventListenerHandler.get(element);
            forEach(listeners, function callListenerProxy(listener2) {
              listener2(element);
            });
          }
          function addListener(callOnAdd2, element, listener2) {
            eventListenerHandler.add(element, listener2);
            if (callOnAdd2) {
              listener2(element);
            }
          }
          if (!listener) {
            listener = elements;
            elements = options2;
            options2 = {};
          }
          if (!elements) {
            throw new Error("At least one element required.");
          }
          if (!listener) {
            throw new Error("Listener required.");
          }
          if (isElement(elements)) {
            elements = [elements];
          } else if (isCollection(elements)) {
            elements = toArray(elements);
          } else {
            return reporter.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
          }
          var elementsReady = 0;
          var callOnAdd = getOption(options2, "callOnAdd", globalOptions.callOnAdd);
          var onReadyCallback = getOption(options2, "onReady", function noop3() {
          });
          var debug = getOption(options2, "debug", globalOptions.debug);
          forEach(elements, function attachListenerToElement(element) {
            if (!stateHandler.getState(element)) {
              stateHandler.initState(element);
              idHandler.set(element);
            }
            var id = idHandler.get(element);
            debug && reporter.log("Attaching listener to element", id, element);
            if (!elementUtils.isDetectable(element)) {
              debug && reporter.log(id, "Not detectable.");
              if (elementUtils.isBusy(element)) {
                debug && reporter.log(id, "System busy making it detectable");
                addListener(callOnAdd, element, listener);
                onReadyCallbacks[id] = onReadyCallbacks[id] || [];
                onReadyCallbacks[id].push(function onReady() {
                  elementsReady++;
                  if (elementsReady === elements.length) {
                    onReadyCallback();
                  }
                });
                return;
              }
              debug && reporter.log(id, "Making detectable...");
              elementUtils.markBusy(element, true);
              return detectionStrategy.makeDetectable({ debug, important: importantCssRules }, element, function onElementDetectable(element2) {
                debug && reporter.log(id, "onElementDetectable");
                if (stateHandler.getState(element2)) {
                  elementUtils.markAsDetectable(element2);
                  elementUtils.markBusy(element2, false);
                  detectionStrategy.addListener(element2, onResizeCallback);
                  addListener(callOnAdd, element2, listener);
                  var state9 = stateHandler.getState(element2);
                  if (state9 && state9.startSize) {
                    var width = element2.offsetWidth;
                    var height = element2.offsetHeight;
                    if (state9.startSize.width !== width || state9.startSize.height !== height) {
                      onResizeCallback(element2);
                    }
                  }
                  if (onReadyCallbacks[id]) {
                    forEach(onReadyCallbacks[id], function(callback) {
                      callback();
                    });
                  }
                } else {
                  debug && reporter.log(id, "Element uninstalled before being detectable.");
                }
                delete onReadyCallbacks[id];
                elementsReady++;
                if (elementsReady === elements.length) {
                  onReadyCallback();
                }
              });
            }
            debug && reporter.log(id, "Already detecable, adding listener.");
            addListener(callOnAdd, element, listener);
            elementsReady++;
          });
          if (elementsReady === elements.length) {
            onReadyCallback();
          }
        }
        function uninstall(elements) {
          if (!elements) {
            return reporter.error("At least one element is required.");
          }
          if (isElement(elements)) {
            elements = [elements];
          } else if (isCollection(elements)) {
            elements = toArray(elements);
          } else {
            return reporter.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
          }
          forEach(elements, function(element) {
            eventListenerHandler.removeAllListeners(element);
            detectionStrategy.uninstall(element);
            stateHandler.cleanState(element);
          });
        }
        function initDocument(targetDocument) {
          detectionStrategy.initDocument && detectionStrategy.initDocument(targetDocument);
        }
        return {
          listenTo,
          removeListener: eventListenerHandler.removeListener,
          removeAllListeners: eventListenerHandler.removeAllListeners,
          uninstall,
          initDocument
        };
      };
      function getOption(options, name, defaultValue) {
        var value = options[name];
        if ((value === void 0 || value === null) && defaultValue !== void 0) {
          return defaultValue;
        }
        return value;
      }
    }
  });

  // ../story/src/_story.entry.js
  var import_flat_map = __toESM(require_flat_map3());
  var import_includes = __toESM(require_includes3());
  var import_includes2 = __toESM(require_includes6());
  var import_pad_start = __toESM(require_pad_start3());

  // ../node_modules/.pnpm/whatwg-fetch@3.6.20/node_modules/whatwg-fetch/fetch.js
  var g = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
  typeof global !== "undefined" && global || {};
  var support = {
    searchParams: "URLSearchParams" in g,
    iterable: "Symbol" in g && "iterator" in Symbol,
    blob: "FileReader" in g && "Blob" in g && function() {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: "FormData" in g,
    arrayBuffer: "ArrayBuffer" in g
  };
  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj);
  }
  if (support.arrayBuffer) {
    viewClasses = [
      "[object Int8Array]",
      "[object Uint8Array]",
      "[object Uint8ClampedArray]",
      "[object Int16Array]",
      "[object Uint16Array]",
      "[object Int32Array]",
      "[object Uint32Array]",
      "[object Float32Array]",
      "[object Float64Array]"
    ];
    isArrayBufferView = ArrayBuffer.isView || function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
    };
  }
  var viewClasses;
  var isArrayBufferView;
  function normalizeName(name) {
    if (typeof name !== "string") {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
      throw new TypeError('Invalid character in header field name: "' + name + '"');
    }
    return name.toLowerCase();
  }
  function normalizeValue(value) {
    if (typeof value !== "string") {
      value = String(value);
    }
    return value;
  }
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return { done: value === void 0, value };
      }
    };
    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator;
      };
    }
    return iterator;
  }
  function Headers(headers) {
    this.map = {};
    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        if (header.length != 2) {
          throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
        }
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }
  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ", " + value : value;
  };
  Headers.prototype["delete"] = function(name) {
    delete this.map[normalizeName(name)];
  };
  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null;
  };
  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };
  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };
  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };
  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items);
  };
  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items);
  };
  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items);
  };
  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }
  function consumed(body) {
    if (body._noBody)
      return;
    if (body.bodyUsed) {
      return Promise.reject(new TypeError("Already read"));
    }
    body.bodyUsed = true;
  }
  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    });
  }
  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
  }
  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
    var encoding = match ? match[1] : "utf-8";
    reader.readAsText(blob, encoding);
    return promise;
  }
  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);
    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join("");
  }
  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0);
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer;
    }
  }
  function Body() {
    this.bodyUsed = false;
    this._initBody = function(body) {
      this.bodyUsed = this.bodyUsed;
      this._bodyInit = body;
      if (!body) {
        this._noBody = true;
        this._bodyText = "";
      } else if (typeof body === "string") {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }
      if (!this.headers.get("content-type")) {
        if (typeof body === "string") {
          this.headers.set("content-type", "text/plain;charset=UTF-8");
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set("content-type", this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
        }
      }
    };
    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }
        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]));
        } else if (this._bodyFormData) {
          throw new Error("could not read FormData body as blob");
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };
    }
    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this);
        if (isConsumed) {
          return isConsumed;
        } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          );
        } else {
          return Promise.resolve(this._bodyArrayBuffer);
        }
      } else if (support.blob) {
        return this.blob().then(readBlobAsArrayBuffer);
      } else {
        throw new Error("could not read as ArrayBuffer");
      }
    };
    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }
      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      } else if (this._bodyFormData) {
        throw new Error("could not read FormData body as text");
      } else {
        return Promise.resolve(this._bodyText);
      }
    };
    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode);
      };
    }
    this.json = function() {
      return this.text().then(JSON.parse);
    };
    return this;
  }
  var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }
  function Request(input, options) {
    if (!(this instanceof Request)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
    }
    options = options || {};
    var body = options.body;
    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError("Already read");
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }
    this.credentials = options.credentials || this.credentials || "same-origin";
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || "GET");
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal || function() {
      if ("AbortController" in g) {
        var ctrl = new AbortController();
        return ctrl.signal;
      }
    }();
    this.referrer = null;
    if ((this.method === "GET" || this.method === "HEAD") && body) {
      throw new TypeError("Body not allowed for GET or HEAD requests");
    }
    this._initBody(body);
    if (this.method === "GET" || this.method === "HEAD") {
      if (options.cache === "no-store" || options.cache === "no-cache") {
        var reParamSearch = /([?&])_=[^&]*/;
        if (reParamSearch.test(this.url)) {
          this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
        } else {
          var reQueryString = /\?/;
          this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
        }
      }
    }
  }
  Request.prototype.clone = function() {
    return new Request(this, { body: this._bodyInit });
  };
  function decode(body) {
    var form = new FormData();
    body.trim().split("&").forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split("=");
        var name = split.shift().replace(/\+/g, " ");
        var value = split.join("=").replace(/\+/g, " ");
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }
  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
    preProcessedHeaders.split("\r").map(function(header) {
      return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
    }).forEach(function(line) {
      var parts = line.split(":");
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(":").trim();
        try {
          headers.append(key, value);
        } catch (error) {
          console.warn("Response " + error.message);
        }
      }
    });
    return headers;
  }
  Body.call(Request.prototype);
  function Response(bodyInit, options) {
    if (!(this instanceof Response)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
    }
    if (!options) {
      options = {};
    }
    this.type = "default";
    this.status = options.status === void 0 ? 200 : options.status;
    if (this.status < 200 || this.status > 599) {
      throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
    }
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
    this.headers = new Headers(options.headers);
    this.url = options.url || "";
    this._initBody(bodyInit);
  }
  Body.call(Response.prototype);
  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    });
  };
  Response.error = function() {
    var response = new Response(null, { status: 200, statusText: "" });
    response.ok = false;
    response.status = 0;
    response.type = "error";
    return response;
  };
  var redirectStatuses = [301, 302, 303, 307, 308];
  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError("Invalid status code");
    }
    return new Response(null, { status, headers: { location: url } });
  };
  var DOMException = g.DOMException;
  try {
    new DOMException();
  } catch (err) {
    DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    DOMException.prototype = Object.create(Error.prototype);
    DOMException.prototype.constructor = DOMException;
  }
  function fetch2(input, init2) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init2);
      if (request.signal && request.signal.aborted) {
        return reject(new DOMException("Aborted", "AbortError"));
      }
      var xhr = new XMLHttpRequest();
      function abortXhr() {
        xhr.abort();
      }
      xhr.onload = function() {
        var options = {
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || "")
        };
        if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
          options.status = 200;
        } else {
          options.status = xhr.status;
        }
        options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
        var body = "response" in xhr ? xhr.response : xhr.responseText;
        setTimeout(function() {
          resolve(new Response(body, options));
        }, 0);
      };
      xhr.onerror = function() {
        setTimeout(function() {
          reject(new TypeError("Network request failed"));
        }, 0);
      };
      xhr.ontimeout = function() {
        setTimeout(function() {
          reject(new TypeError("Network request timed out"));
        }, 0);
      };
      xhr.onabort = function() {
        setTimeout(function() {
          reject(new DOMException("Aborted", "AbortError"));
        }, 0);
      };
      function fixUrl(url) {
        try {
          return url === "" && g.location.href ? g.location.href : url;
        } catch (e) {
          return url;
        }
      }
      xhr.open(request.method, fixUrl(request.url), true);
      if (request.credentials === "include") {
        xhr.withCredentials = true;
      } else if (request.credentials === "omit") {
        xhr.withCredentials = false;
      }
      if ("responseType" in xhr) {
        if (support.blob) {
          xhr.responseType = "blob";
        } else if (support.arrayBuffer) {
          xhr.responseType = "arraybuffer";
        }
      }
      if (init2 && typeof init2.headers === "object" && !(init2.headers instanceof Headers || g.Headers && init2.headers instanceof g.Headers)) {
        var names = [];
        Object.getOwnPropertyNames(init2.headers).forEach(function(name) {
          names.push(normalizeName(name));
          xhr.setRequestHeader(name, normalizeValue(init2.headers[name]));
        });
        request.headers.forEach(function(value, name) {
          if (names.indexOf(name) === -1) {
            xhr.setRequestHeader(name, value);
          }
        });
      } else {
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
      }
      if (request.signal) {
        request.signal.addEventListener("abort", abortXhr);
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            request.signal.removeEventListener("abort", abortXhr);
          }
        };
      }
      xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
    });
  }
  fetch2.polyfill = true;
  if (!g.fetch) {
    g.fetch = fetch2;
    g.Headers = Headers;
    g.Request = Request;
    g.Response = Response;
  }

  // ../story/src/analytics/index.ts
  var import_tiny_emitter = __toESM(require_tiny_emitter());

  // ../story/src/dom-helpers/query.ts
  function queryAll(selector, context = null) {
    const queryFrom = getContext(context);
    const nodeList = queryFrom.querySelectorAll(selector);
    return Array.from(nodeList);
  }
  function query(selector, context = null) {
    const results = queryAll(selector, context);
    if (results.length === 0)
      return false;
    return results[0];
  }
  function getContext(defaultContext) {
    if (defaultContext)
      return defaultContext;
    if (window["__shadowRoot"])
      return window["__shadowRoot"].querySelector("article");
    return document;
  }

  // ../node_modules/.pnpm/intersection-observer@https+++codeload.github.com+Shorthand+IntersectionObserver+tar.gz+f1e5f_lkftloyupidwpqjgxvn24zd5su/node_modules/intersection-observer/polyfill/intersection-observer.js
  (function(window2, document2) {
    "use strict";
    var isEdge = /Edge\/\d+/i.test(navigator.userAgent);
    if (!isEdge && "IntersectionObserver" in window2 && "IntersectionObserverEntry" in window2 && "intersectionRatio" in window2.IntersectionObserverEntry.prototype) {
      if (!("isIntersecting" in window2.IntersectionObserverEntry.prototype)) {
        Object.defineProperty(
          window2.IntersectionObserverEntry.prototype,
          "isIntersecting",
          {
            get: function() {
              return this.intersectionRatio > 0;
            }
          }
        );
      }
      return;
    }
    var registry = [];
    function IntersectionObserverEntry(entry) {
      this.time = entry.time;
      this.target = entry.target;
      this.rootBounds = entry.rootBounds;
      this.boundingClientRect = entry.boundingClientRect;
      this.intersectionRect = entry.intersectionRect || getEmptyRect();
      this.isIntersecting = !!entry.intersectionRect;
      var targetRect = this.boundingClientRect;
      var targetArea = targetRect.width * targetRect.height;
      var intersectionRect = this.intersectionRect;
      var intersectionArea = intersectionRect.width * intersectionRect.height;
      if (targetArea) {
        this.intersectionRatio = intersectionArea / targetArea;
      } else {
        this.intersectionRatio = this.isIntersecting ? 1 : 0;
      }
    }
    function IntersectionObserver2(callback, opt_options) {
      var options = opt_options || {};
      if (typeof callback != "function") {
        throw new Error("callback must be a function");
      }
      if (options.root && options.root.nodeType != 1) {
        throw new Error("root must be an Element");
      }
      this._checkForIntersections = throttle(
        this._checkForIntersections.bind(this),
        this.THROTTLE_TIMEOUT
      );
      this._callback = callback;
      this._observationTargets = [];
      this._queuedEntries = [];
      this._rootMarginValues = this._parseRootMargin(options.rootMargin);
      this.thresholds = this._initThresholds(options.threshold);
      this.root = options.root || null;
      this.rootMargin = this._rootMarginValues.map(function(margin) {
        return margin.value + margin.unit;
      }).join(" ");
    }
    IntersectionObserver2.prototype.THROTTLE_TIMEOUT = 100;
    IntersectionObserver2.prototype.POLL_INTERVAL = null;
    IntersectionObserver2.prototype.USE_MUTATION_OBSERVER = true;
    IntersectionObserver2.prototype.observe = function(target) {
      var isTargetAlreadyObserved = this._observationTargets.some(function(item) {
        return item.element == target;
      });
      if (isTargetAlreadyObserved) {
        return;
      }
      if (!(target && target.nodeType == 1)) {
        throw new Error("target must be an Element");
      }
      this._registerInstance();
      this._observationTargets.push({ element: target, entry: null });
      this._monitorIntersections();
      this._checkForIntersections();
    };
    IntersectionObserver2.prototype.unobserve = function(target) {
      this._observationTargets = this._observationTargets.filter(function(item) {
        return item.element != target;
      });
      if (!this._observationTargets.length) {
        this._unmonitorIntersections();
        this._unregisterInstance();
      }
    };
    IntersectionObserver2.prototype.disconnect = function() {
      this._observationTargets = [];
      this._unmonitorIntersections();
      this._unregisterInstance();
    };
    IntersectionObserver2.prototype.takeRecords = function() {
      var records = this._queuedEntries.slice();
      this._queuedEntries = [];
      return records;
    };
    IntersectionObserver2.prototype._initThresholds = function(opt_threshold) {
      var threshold = opt_threshold || [0];
      if (!Array.isArray(threshold))
        threshold = [threshold];
      return threshold.sort().filter(function(t, i, a) {
        if (typeof t != "number" || isNaN(t) || t < 0 || t > 1) {
          throw new Error("threshold must be a number between 0 and 1 inclusively");
        }
        return t !== a[i - 1];
      });
    };
    IntersectionObserver2.prototype._parseRootMargin = function(opt_rootMargin) {
      var marginString = opt_rootMargin || "0px";
      var margins = marginString.split(/\s+/).map(function(margin) {
        var parts = /^(-?\d*\.?\d+)(px|%)$/.exec(margin);
        if (!parts) {
          throw new Error("rootMargin must be specified in pixels or percent");
        }
        return { value: parseFloat(parts[1]), unit: parts[2] };
      });
      margins[1] = margins[1] || margins[0];
      margins[2] = margins[2] || margins[0];
      margins[3] = margins[3] || margins[1];
      return margins;
    };
    IntersectionObserver2.prototype._monitorIntersections = function() {
      if (!this._monitoringIntersections) {
        this._monitoringIntersections = true;
        if (this.POLL_INTERVAL) {
          this._monitoringInterval = setInterval(
            this._checkForIntersections,
            this.POLL_INTERVAL
          );
        } else {
          addEvent(window2, "resize", this._checkForIntersections, true);
          addEvent(document2, "scroll", this._checkForIntersections, true);
          if (this.USE_MUTATION_OBSERVER && "MutationObserver" in window2) {
            this._domObserver = new MutationObserver(this._checkForIntersections);
            this._domObserver.observe(document2, {
              attributes: true,
              childList: true,
              characterData: true,
              subtree: true
            });
          }
        }
      }
    };
    IntersectionObserver2.prototype._unmonitorIntersections = function() {
      if (this._monitoringIntersections) {
        this._monitoringIntersections = false;
        clearInterval(this._monitoringInterval);
        this._monitoringInterval = null;
        removeEvent(window2, "resize", this._checkForIntersections, true);
        removeEvent(document2, "scroll", this._checkForIntersections, true);
        if (this._domObserver) {
          this._domObserver.disconnect();
          this._domObserver = null;
        }
      }
    };
    IntersectionObserver2.prototype._checkForIntersections = function() {
      var rootIsInDom = this._rootIsInDom();
      var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();
      this._observationTargets.forEach(function(item) {
        var target = item.element;
        var targetRect = getBoundingClientRect(target);
        var rootContainsTarget = this._rootContainsTarget(target);
        var oldEntry = item.entry;
        var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, rootRect);
        var newEntry = item.entry = new IntersectionObserverEntry({
          time: now(),
          target,
          boundingClientRect: targetRect,
          rootBounds: rootRect,
          intersectionRect
        });
        if (!oldEntry) {
          this._queuedEntries.push(newEntry);
        } else if (rootIsInDom && rootContainsTarget) {
          if (this._hasCrossedThreshold(oldEntry, newEntry)) {
            this._queuedEntries.push(newEntry);
          }
        } else {
          if (oldEntry && oldEntry.isIntersecting) {
            this._queuedEntries.push(newEntry);
          }
        }
      }, this);
      if (this._queuedEntries.length) {
        this._callback(this.takeRecords(), this);
      }
    };
    IntersectionObserver2.prototype._computeTargetAndRootIntersection = function(target, rootRect) {
      if (window2.getComputedStyle(target).display == "none")
        return;
      var targetRect = getBoundingClientRect(target);
      var intersectionRect = targetRect;
      var parent = getParentNode(target);
      var atRoot = false;
      while (!atRoot) {
        var parentRect = null;
        var parentComputedStyle = parent.nodeType == 1 ? window2.getComputedStyle(parent) : {};
        if (parentComputedStyle.display == "none")
          return;
        if (parent == this.root || parent == document2) {
          atRoot = true;
          parentRect = rootRect;
        } else {
          if (parent != document2.body && parent != document2.documentElement && parentComputedStyle.overflow != "visible") {
            parentRect = getBoundingClientRect(parent);
          }
        }
        if (parentRect) {
          intersectionRect = computeRectIntersection(parentRect, intersectionRect);
          if (!intersectionRect)
            break;
        }
        parent = getParentNode(parent);
      }
      return intersectionRect;
    };
    IntersectionObserver2.prototype._getRootRect = function() {
      var rootRect;
      if (this.root) {
        rootRect = getBoundingClientRect(this.root);
      } else {
        var html = document2.documentElement;
        var body = document2.body;
        rootRect = {
          top: 0,
          left: 0,
          right: html.clientWidth || body.clientWidth,
          width: html.clientWidth || body.clientWidth,
          bottom: html.clientHeight || body.clientHeight,
          height: html.clientHeight || body.clientHeight
        };
      }
      return this._expandRectByRootMargin(rootRect);
    };
    IntersectionObserver2.prototype._expandRectByRootMargin = function(rect) {
      var margins = this._rootMarginValues.map(function(margin, i) {
        return margin.unit == "px" ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;
      });
      var newRect = {
        top: rect.top - margins[0],
        right: rect.right + margins[1],
        bottom: rect.bottom + margins[2],
        left: rect.left - margins[3]
      };
      newRect.width = newRect.right - newRect.left;
      newRect.height = newRect.bottom - newRect.top;
      return newRect;
    };
    IntersectionObserver2.prototype._hasCrossedThreshold = function(oldEntry, newEntry) {
      var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;
      var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1;
      if (oldRatio === newRatio)
        return;
      for (var i = 0; i < this.thresholds.length; i++) {
        var threshold = this.thresholds[i];
        if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {
          return true;
        }
      }
    };
    IntersectionObserver2.prototype._rootIsInDom = function() {
      return !this.root || containsDeep(document2, this.root);
    };
    IntersectionObserver2.prototype._rootContainsTarget = function(target) {
      return containsDeep(this.root || document2, target);
    };
    IntersectionObserver2.prototype._registerInstance = function() {
      if (registry.indexOf(this) < 0) {
        registry.push(this);
      }
    };
    IntersectionObserver2.prototype._unregisterInstance = function() {
      var index = registry.indexOf(this);
      if (index != -1)
        registry.splice(index, 1);
    };
    function now() {
      return window2.performance && performance.now && performance.now();
    }
    function throttle(fn, timeout) {
      var timer = null;
      return function() {
        if (!timer) {
          timer = setTimeout(function() {
            fn();
            timer = null;
          }, timeout);
        }
      };
    }
    function addEvent(node, event, fn, opt_useCapture) {
      if (typeof node.addEventListener == "function") {
        node.addEventListener(event, fn, opt_useCapture || false);
      } else if (typeof node.attachEvent == "function") {
        node.attachEvent("on" + event, fn);
      }
    }
    function removeEvent(node, event, fn, opt_useCapture) {
      if (typeof node.removeEventListener == "function") {
        node.removeEventListener(event, fn, opt_useCapture || false);
      } else if (typeof node.detatchEvent == "function") {
        node.detatchEvent("on" + event, fn);
      }
    }
    function computeRectIntersection(rect1, rect2) {
      var top = Math.max(rect1.top, rect2.top);
      var bottom = Math.min(rect1.bottom, rect2.bottom);
      var left = Math.max(rect1.left, rect2.left);
      var right = Math.min(rect1.right, rect2.right);
      var width = right - left;
      var height = bottom - top;
      return width >= 0 && height >= 0 && {
        top,
        bottom,
        left,
        right,
        width,
        height
      };
    }
    function getBoundingClientRect(el) {
      var rect;
      try {
        rect = el.getBoundingClientRect();
      } catch (err) {
      }
      if (!rect)
        return getEmptyRect();
      if (!(rect.width && rect.height)) {
        rect = {
          top: rect.top,
          right: rect.right,
          bottom: rect.bottom,
          left: rect.left,
          width: rect.right - rect.left,
          height: rect.bottom - rect.top
        };
      }
      return rect;
    }
    function getEmptyRect() {
      return {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        width: 0,
        height: 0
      };
    }
    function containsDeep(parent, child) {
      var node = child;
      while (node) {
        if (node == parent)
          return true;
        node = getParentNode(node);
      }
      return false;
    }
    function getParentNode(node) {
      var parent = node.parentNode;
      if (parent && parent.nodeType == 11 && parent.host) {
        return parent.host;
      }
      return parent;
    }
    window2.IntersectionObserver = IntersectionObserver2;
    window2.IntersectionObserverEntry = IntersectionObserverEntry;
  })(window, document);

  // ../story/src/core/globals.ts
  if (!window.hasOwnProperty("Shorthand")) {
    window.Shorthand = {};
  }

  // ../story/src/scrollwatch/index.ts
  window.Shorthand.lazyloadTriggerMargin = window.Shorthand.lazyloadTriggerMargin || "500%";
  var viewportHeight = window.innerHeight || window.screen.height;
  var ROOT_MARGINS = {
    ["nearly visible" /* Near */]: "100%",
    ["on visibile" /* On */]: "0%",
    ["partially visible" /* Partial */]: "-10%",
    ["mostly visible" /* Mostly */]: "-40% 0% -40% 0%",
    // Mostly visible, but only in the vertical direction (STO-4840)
    ["fully visible" /* Full */]: "0px",
    ["lazyload" /* Lazyload */]: window.Shorthand.lazyloadTriggerMargin,
    ["lazyload 3D models" /* LazyloadModel */]: `${viewportHeight * 2}px`,
    ["unload 3D models" /* UnloadModel */]: `${viewportHeight * 2 + 100}px`,
    ["lazy download 3D models" /* LazyDownloadModel */]: `${viewportHeight * 5}px`
  };
  var THRESHOLDS = {
    /**
     * Slightly higher than zero, so we can reliably do visibility detection.
     * If set to zero, sometimes visibility can be triggered exactly at zero and we
     * would assume that meant hidden. Value is picked based on precision observed
     * in Chrome. In the future we may rely on entry.isIntersecting, but it's not
     * common yet.
     */
    ["nearly visible" /* Near */]: [0, 1e-3],
    ["lazyload" /* Lazyload */]: [0, 1e-3],
    ["on visibile" /* On */]: [0, 1e-3],
    ["mostly visible" /* Mostly */]: [0, 1e-3],
    ["fully visible" /* Full */]: 0.99,
    ["lazyload 3D models" /* LazyloadModel */]: [0, 1e-3],
    ["lazy download 3D models" /* LazyDownloadModel */]: [0, 1e-3],
    ["unload 3D models" /* UnloadModel */]: [0, 1e-3],
    // Special monkey business used by active-navitem-tracker
    ["partially visible" /* Partial */]: 0
  };
  var intersectionObservers = [];
  var observables = [];
  function isVisible(entry) {
    return entry.intersectionRatio >= 1e-5;
  }
  function getIntersectionObserver(triggerPoint, root = null) {
    const foundIntersectionObserver = intersectionObservers.find((io2) => io2.triggerPoint === triggerPoint && io2.root === root);
    if (!foundIntersectionObserver) {
      const options = {
        rootMargin: ROOT_MARGINS[triggerPoint],
        threshold: THRESHOLDS[triggerPoint],
        root
      };
      const io2 = new IntersectionObserver((entries) => {
        onIntersection(entries, triggerPoint, root);
      }, options);
      intersectionObservers.push({ instance: io2, triggerPoint, root });
      return io2;
    }
    return foundIntersectionObserver.instance;
  }
  function onIntersection(entries, triggerPoint, root = null) {
    entries.forEach((entry) => {
      const observable = getObservable(entry.target, triggerPoint, root);
      observable.callbacks.forEach((cb) => cb(entry));
    });
  }
  function createObservable(target, triggerPoint, root = null) {
    const observable = { target, triggerPoint, callbacks: [], root };
    observables.push(observable);
    return observable;
  }
  function getObservable(target, triggerPoint, root = null) {
    return observables.find((observed) => {
      return observed.target === target && observed.triggerPoint === triggerPoint && observed.root === root;
    });
  }
  function unobserve(target, options = {}) {
    const triggerPoint = options.triggerPoint || "on visibile" /* On */;
    const root = options.root || null;
    const io2 = getIntersectionObserver(triggerPoint, root);
    io2.unobserve(target);
  }
  function observe(target, callback, options = {}) {
    const triggerPoint = options.triggerPoint || "on visibile" /* On */;
    const root = options.root || null;
    const io2 = getIntersectionObserver(triggerPoint);
    let observable = getObservable(target, triggerPoint, root);
    if (!observable) {
      observable = createObservable(target, triggerPoint, root);
    }
    observable.callbacks.push(callback);
    io2.observe(target);
  }

  // ../story/src/analytics/element-linger.ts
  var MIN_LINGER = 5;
  var MILLIS_PER_SECOND = 1e3;
  function trackElementLingerTime(element, lingerReport) {
    const state9 = {
      isTracking: false,
      trackingStartAt: 0,
      cumulativeLingerTime: 0
    };
    observe(element, (entry) => {
      if (isVisible(entry) && !state9.isTracking) {
        state9.isTracking = true;
        state9.trackingStartAt = Date.now();
      } else if (state9.isTracking) {
        state9.isTracking = false;
        const lingerTime = Math.round((Date.now() - state9.trackingStartAt) / MILLIS_PER_SECOND);
        if (lingerTime < MIN_LINGER) {
          return;
        }
        state9.cumulativeLingerTime += lingerTime;
        lingerReport(lingerTime);
      }
    });
  }
  function getSectionTypeFromClassNames(classNames) {
    const SECTION_TYPE_REGEX = /\bTheme-(\w+Section)\b/;
    const results = classNames.match(SECTION_TYPE_REGEX);
    return results !== null ? results[1] : "UnknownTypeSection";
  }
  function initElementLinger(elements, logEvent2) {
    elements.forEach((el, index) => {
      const sectionType = getSectionTypeFromClassNames(el.className);
      const label = index.toString().padStart(3, "0") + " " + el.id;
      const logLingerEvent = (lingerTime) => {
        logEvent2(sectionType, "linger-seconds", label, lingerTime);
      };
      trackElementLingerTime(el, logLingerEvent);
    });
  }

  // ../story/src/analytics/google-analytics.ts
  function gaFallback(...args) {
  }
  function ga(...args) {
    const _ga = window.ga || gaFallback;
    _ga(...args);
  }
  function initGoogleAnalytics(emitter2) {
    emitter2.on("logEvent", function(...args) {
      ga("send", "event", ...args);
      ga("shorthand.send", "event", ...args);
    });
    emitter2.on("logSocial", (...args) => {
      ga("send", "social", ...args);
      ga("shorthand.send", "social", ...args);
    });
  }

  // ../story/src/analytics/link-click-tracking.ts
  function getDataFromLink(link) {
    if (link.hasAttribute("data-social-share")) {
      return {
        type: "social",
        network: link.getAttribute("data-social-share"),
        target: window.location.href
      };
    } else if (link.hasAttribute("data-story-nav-item")) {
      return {
        type: "nav-link",
        target: link.href
      };
    } else {
      return {
        type: "link",
        target: link.href,
        element: link
      };
    }
  }
  function onLinkClicked(link) {
    const data = getDataFromLink(link);
    if (data.type === "social") {
      logSocial(data.network, "share", data.target);
    } else {
      logEvent(data.type, "click", data.target);
    }
  }
  function initLinkClickTracking() {
    const links = queryAll("a");
    links.forEach((l) => l.addEventListener("click", () => onLinkClicked(l)));
  }

  // ../story/src/analytics/index.ts
  var emitter = new import_tiny_emitter.default();
  function logEvent(...args) {
    emitter.emit("logEvent", ...args);
  }
  function logSocial(...args) {
    emitter.emit("logSocial", ...args);
  }
  function initAnalytics() {
    const lingerElements = queryAll(".Theme-Section");
    initGoogleAnalytics(emitter);
    initElementLinger(lingerElements, logEvent);
    initLinkClickTracking();
  }

  // ../story/src/background-media/index.ts
  var import_fastdom2 = __toESM(require_fastdom());

  // ../story/src/background-media/config.ts
  var STATIC_DEFAULTS = {
    textPerLine: false,
    textFade: "none",
    textZoom: "none",
    textBlur: "none",
    backgroundFade: "none",
    backgroundZoom: "none",
    backgroundBlur: "none",
    backgroundGrayscale: "none",
    hasEffects: false
  };
  function getConfig(element, defaults = STATIC_DEFAULTS) {
    try {
      return __spreadValues(__spreadValues({}, defaults), JSON.parse(window.atob(element.getAttribute("data-effects"))));
    } catch (err) {
      return __spreadValues({}, defaults);
    }
  }

  // ../story/src/background-media/ease.ts
  var import_clamp = __toESM(require_clamp());

  // ../story/src/display-container/full-height-flex.ts
  var import_fastdom = __toESM(require_fastdom());

  // ../story/src/device-detect/index.ts
  var import_dedupe = __toESM(require_dedupe());

  // ../story/src/utils/dom-event-once.ts
  function once(target, eventName, listener, options) {
    function deregister() {
      target.removeEventListener(eventName, handler, options);
    }
    function handler() {
      deregister();
      return listener.apply(this, arguments);
    }
    target.addEventListener(eventName, handler, options);
    return deregister;
  }

  // ../story/src/device-detect/index.ts
  var Sniffr = require_sniffr();
  var MOBILE_OS = ["android", "ios", "firefoxos", "windows.phone", "windows.mobile", "blackberryos"];
  var state = { hasTouch: false };
  var deviceInfo = null;
  function getDeviceInfo() {
    if (deviceInfo === null) {
      const sniffr = new Sniffr();
      sniffr.sniff(navigator.userAgent);
      deviceInfo = {
        // GROUPED CATEGORIES
        isMobile: MOBILE_OS.includes(sniffr.os.name),
        isDesktop: !MOBILE_OS.includes(sniffr.os.name),
        // Hard-coded false, what is a 'tablet' these days?
        isTablet: false,
        // APPLE DEVICES
        isiPhone: sniffr.device.name === "iphone",
        isiPad: sniffr.device.name === "ipad",
        // Operating Systems
        isAndroid: sniffr.os.name === "android",
        isiOS: sniffr.os.name === "ios",
        isiOS10: sniffr.os.name === "ios" && sniffr.os.version[0] === 10,
        isMac: sniffr.os.name === "macos",
        isWindows: sniffr.os.name === "windows",
        // Browsers
        isIE: sniffr.browser.name === "ie",
        isEdge: sniffr.browser.name === "edge",
        isChrome: sniffr.browser.name === "chrome",
        isSafari: sniffr.browser.name === "safari",
        isFirefox: sniffr.browser.name === "firefox",
        isOpera: sniffr.browser.name === "opera",
        // Bots
        isBot: /bot|googlebot|crawler|spider|robot|crawling/i.test(navigator.userAgent),
        // isTouch exluded from this API because it cannot be reliably determined at load time.
        isCypress: window.Cypress
      };
    }
    return deviceInfo;
  }
  function addDeviceClassesToElement(element) {
    const deviceInfo2 = getDeviceInfo();
    const deviceClasses = Object.keys(deviceInfo2).reduce((c, key) => {
      c[`DeviceDetect--${key}`] = deviceInfo2[key];
      return c;
    }, {});
    element.className = (0, import_dedupe.default)(element.className, deviceClasses);
  }
  function initDeviceDetect(rootElement = document.documentElement) {
    var _a;
    addDeviceClassesToElement(((_a = window["__shadowRoot"]) == null ? void 0 : _a.querySelector("article")) || rootElement);
    listenForTouch();
  }
  function listenForTouch() {
    once(document.documentElement, "touchstart", () => {
      state.hasTouch = true;
      document.documentElement.classList.add("DeviceDetect--isTouch");
    });
  }

  // ../story/src/display-container/full-height-flex.ts
  function initFullHeightFlex() {
    const { isIE, isEdge } = getDeviceInfo();
    if (!isIE && !isEdge)
      return;
    const state9 = {
      tallTOMs: []
    };
    import_fastdom.default.measure(() => {
      queryAll(".DisplayContainerHeight--flex").forEach((tom) => {
        state9.tallTOMs.push(tom);
      });
      function onResize() {
        updateFlexHeightContainers(state9);
      }
      onResize();
      window.addEventListener("resize", onResize, { passive: true });
    });
  }
  function updateFlexHeightContainers(state9) {
    state9.tallTOMs.forEach((tom) => {
      import_fastdom.default.measure(() => {
        const mediaElement = tom.querySelector(".FullSize--child");
        const basisHeight = tom.querySelector(".DisplayContainer--heightBasis").getBoundingClientRect().height + 200;
        let basisHeightStyle = basisHeight + "px";
        let mediaHeightStyle = basisHeightStyle;
        if (basisHeight < display_container_default.getHeight()) {
          tom.style.setProperty("height", basisHeightStyle);
          return;
        }
        if (tom.classList.contains("SplitLayout") && display_container_default.getWidth() <= 960) {
          basisHeightStyle = `calc(${basisHeight} + 50vh)`;
          mediaHeightStyle = "50vh";
        }
        import_fastdom.default.mutate(() => {
          tom.style.setProperty("height", basisHeightStyle);
          mediaElement.style.setProperty("height", mediaHeightStyle);
          queryAll(".FullSize--fixedChild", mediaElement).forEach((mediaDetailElement) => {
            mediaDetailElement.style.setProperty("height", mediaHeightStyle);
          });
          mediaElement.style.setProperty("clip-path", `polygon(0 0, 0 ${mediaHeightStyle}, 100% ${mediaHeightStyle}, 100% 0)`);
        });
      });
    });
  }

  // ../story/src/display-container/full-view-mode.ts
  var FullViewMode = class {
    constructor(options = {}) {
      this.cache = { width: 0, height: 0, top: 0, bottom: 0 };
      if (options.measuringElement) {
        this.measuringElement = options.measuringElement;
      } else {
        this.ensureMeasuringElement();
      }
      window.addEventListener("resize", this.refresh.bind(this), {
        passive: true
      });
      this.refresh();
    }
    ensureMeasuringElement() {
      const el = this.measuringElement = document.createElement("div");
      el.style.width = "100%";
      el.style.height = "100vh";
      el.style.visibility = "hidden";
      el.style.pointerEvents = "none";
      el.style.opacity = "0";
      el.style.position = "absolute";
      el.style.top = "0";
      el.setAttribute("id", "viewport-height-element");
      document.body.appendChild(el);
    }
    refresh() {
      const rects = this.measuringElement.getBoundingClientRect();
      this.cache.width = rects.width;
      this.cache.height = rects.height;
      this.cache.top = 0;
      this.cache.bottom = 0;
    }
    getCache() {
      return this.cache;
    }
  };

  // ../story/src/display-container/index.ts
  function initDisplayContainer(mode = new FullViewMode()) {
    window.Shorthand.displayContainer = mode;
    initFullHeightFlex();
  }
  var facade = {
    getOrientation() {
      if (!window.Shorthand.displayContainer) {
        return window.innerWidth > window.innerHeight ? "landscape" : "portrait";
      }
      return facade.getWidth() > facade.getHeight() ? "landscape" : "portrait";
    },
    getHeight() {
      return window.Shorthand.displayContainer.getCache().height;
    },
    getWidth() {
      return window.Shorthand.displayContainer.getCache().width;
    },
    getTop() {
      return window.Shorthand.displayContainer.getCache().top;
    },
    getBottom() {
      return window.Shorthand.displayContainer.getCache().bottom;
    },
    getVhUnitsInPixels(vhunits) {
      const oneHundredVhInPixels = facade.getHeight();
      return oneHundredVhInPixels * (vhunits / 100);
    },
    getDisplayContainer() {
      return window.Shorthand.displayContainer;
    }
  };
  var display_container_default = facade;

  // ../story/src/background-media/ease.ts
  var banner;
  function getScrollProgress(element, minThreshold = 0, maxThreshold = 1) {
    var _a, _b;
    const { top: elementTop, height: elementHeight } = element.getBoundingClientRect();
    if (banner === null) {
      banner = query(".Header[role=banner]");
    }
    const bannerHeight = (_a = banner == null ? void 0 : banner.offsetHeight) != null ? _a : 0;
    let scale = 1;
    const possibleScale = /scale\((.*)\)/.exec((_b = element.style.getPropertyValue("transform")) != null ? _b : "");
    if (possibleScale) {
      scale = parseFloat(possibleScale[1]);
    }
    const top = elementTop + (elementHeight - elementHeight / scale) / 2;
    const min = -elementHeight / scale + bannerHeight;
    const max = display_container_default.getHeight();
    const range = max - min;
    if (element.className.includes("Theme-BackgroundMedia") && elementHeight < display_container_default.getHeight() * 0.6) {
      maxThreshold *= 0.5;
    }
    return {
      threshold: (0, import_clamp.default)(display_container_default.getHeight() * 0.6 / range, minThreshold, maxThreshold),
      percent: (0, import_clamp.default)(1 - (top - min) / range, 0, 1)
    };
  }
  function easeInOut(percent, threshold, exponent = 3) {
    if (percent < threshold)
      return Math.pow(percent / threshold, exponent);
    if (percent > 1 - threshold)
      return Math.pow(1 - (percent - (1 - threshold)) / threshold, exponent);
    return 1;
  }

  // ../story/src/background-media/index.ts
  var onScrollCallbacks = [];
  function onScroll() {
    onScrollCallbacks.forEach((cb) => cb());
  }
  function initBackgroundMedia() {
    const isEditor = !!query("#editor-viewport");
    if (isEditor) {
      document.removeEventListener("focus", onScroll, true);
      document.addEventListener("focus", onScroll, true);
      document.removeEventListener("blur", onScroll, true);
      document.addEventListener("blur", onScroll, true);
    }
    const scroller = isEditor ? document.querySelector("#editor-viewport") : window;
    scroller.removeEventListener("scroll", onScroll);
    scroller.addEventListener("scroll", onScroll, { passive: true });
    onScrollCallbacks = [];
    import_fastdom2.default.mutate(() => {
      queryAll("[data-effects]").forEach((section) => {
        const config = getConfig(section);
        const mediaSelector = isEditor ? ".Theme-Layer-background-viewport:not(.Theme-Layer-background-viewport-cyclops)" : ".Theme-BackgroundMedia:not(.Theme-BackgroundModel)";
        const mediaParents = queryAll(mediaSelector, section);
        const textParents = queryAll(".Theme-Layer-TextBlock-Inner", section);
        if (!config.hasEffects) {
          if (isEditor)
            onScroll();
          return;
        }
        mediaParents.forEach((parent) => {
          let medias = queryAll("video", parent);
          if (medias.length === 0) {
            medias = queryAll("img", parent).filter((img) => img.className.indexOf("InstantImage__img") === -1);
          }
          if (config.needsBackgroundClone) {
            queryAll("picture", parent).forEach((picture, index) => {
              if (index === 0)
                return;
              picture.style.setProperty("position", "absolute");
              picture.style.setProperty("top", "0");
            });
          }
          medias.forEach((media, index) => {
            media.style.setProperty("transition", "none");
            if (media.tagName.toLowerCase() === "img" && index === 0) {
              applyBackgroundFilters(media, config, 0);
            }
            media.style.setProperty("transform", `scale(1)`);
            media.style.setProperty("opacity", "1");
          });
        });
        textParents.forEach((parent) => {
          if (isWithinSplitSection(parent)) {
            parent.classList.remove("Layout__flex--xleft");
            parent.classList.remove("Layout__flex--xright");
            parent.classList.add("Layout__flex--xcenter");
          }
          parent.parentElement.parentElement.style.setProperty("overflow", "visible");
          const isRightCentered = parent.className.indexOf("Layout__flex--xright") > -1;
          const isLeftCentered = parent.className.indexOf("Layout__flex--xleft") > -1;
          if (isLeftCentered) {
            parent.style.setProperty("transform-origin", "0% 0%");
          } else if (isRightCentered) {
            parent.style.setProperty("transform-origin", "100% 0%");
          } else {
            parent.style.removeProperty("transform-origin");
          }
          const children = isEditor ? queryAll(".NodeContent") : [].slice.call(parent.firstElementChild.firstElementChild.children);
          const items = config.textPerLine ? children : [parent];
          items.forEach((text) => {
            const willChange = [];
            if (config.textZoom !== "none" && navigator.maxTouchPoints > 0) {
              willChange.push("transform");
            }
            if (config.textBlur !== "none") {
              willChange.push("filter");
            }
            if (willChange.length > 0) {
              text.style.setProperty("will-change", willChange.join(", "));
            }
          });
        });
        function onScrollCallback() {
          const sectionPercent = getScrollProgress(section).percent;
          if (sectionPercent <= 0 || sectionPercent >= 1)
            return;
          mediaParents.forEach((parent) => {
            let medias = queryAll("video", parent);
            if (medias.length === 0) {
              medias = queryAll("img", parent).filter((img) => img.className.indexOf("InstantImage__img") === -1);
            }
            const { percent, threshold } = getScrollProgress(parent, 0, 0.5);
            medias.forEach((media, index) => {
              media.parentElement.style.setProperty("overflow", "hidden");
              if (config.backgroundZoom === "in") {
                media.style.setProperty("transform", `scale(${1 + 0.4 * percent})`);
              } else if (config.backgroundZoom === "out") {
                media.style.setProperty("transform", `scale(${1.4 - 0.4 * percent})`);
              }
              let opacity = 1;
              if (config.backgroundFade !== "none") {
                if (["in", "both"].includes(config.backgroundFade) && percent < 0.5 || ["out", "both"].includes(config.backgroundFade) && percent > 0.5) {
                  opacity = easeInOut(percent, threshold, 2);
                } else {
                  opacity = 1;
                }
                media.style.setProperty("opacity", `${opacity}`);
              }
              if (media.tagName.toLowerCase() === "img") {
                if (index === 0) {
                  applyBackgroundFilters(media, config, percent);
                } else {
                  opacity *= easeInOut(percent, threshold);
                  media.style.setProperty("opacity", `${opacity}`);
                }
              }
            });
          });
          textParents.forEach((parent) => {
            const children = isEditor ? queryAll(".NodeContent", parent) : [].slice.call(parent.firstElementChild.firstElementChild.children);
            if (isEditor)
              _resetTextProperties(config.textPerLine, parent, children);
            if (isEditor && parent.contains(document.activeElement))
              return;
            const items = config.textPerLine ? children : [parent];
            items.forEach((text) => {
              const { percent, threshold } = getScrollProgress(text, 0, 0.2);
              if (config.textZoom === "in") {
                text.style.setProperty("transform", `scale(${0.7 + 0.3 * percent})`);
              } else if (config.textZoom === "out") {
                text.style.setProperty("transform", `scale(${1 - 0.3 * percent})`);
              }
              const filter = [];
              if (["in", "both"].includes(config.textBlur) && percent < 0.5 || ["out", "both"].includes(config.textBlur) && percent > 0.5) {
                filter.push(`blur(${(20 * (1 - easeInOut(percent, threshold, 2))).toFixed(2)}px)`);
              }
              const filterValue = filter.join(" ");
              if (text.style.getPropertyValue("filter") !== filterValue) {
                text.style.setProperty("filter", filterValue);
              }
              let opacity = 1;
              if (["in", "both"].includes(config.textFade) && percent < 0.5 || ["out", "both"].includes(config.textFade) && percent > 0.5) {
                opacity *= easeInOut(percent, threshold);
              } else {
                opacity = 1;
              }
              text.style.setProperty("opacity", `${opacity}`);
            });
          });
        }
        onScrollCallbacks.push(onScrollCallback);
      });
    });
    setTimeout(onScroll, 500);
  }
  function applyBackgroundFilters(media, config, scrollProgress) {
    const filter = [];
    if (scrollProgress < 0.5) {
      if (["in", "both"].includes(config.backgroundBlur))
        filter.push("blur(20px)");
      if (["in", "both"].includes(config.backgroundGrayscale))
        filter.push("grayscale(100%)");
    } else {
      if (["out", "both"].includes(config.backgroundBlur))
        filter.push("blur(20px)");
      if (["out", "both"].includes(config.backgroundGrayscale))
        filter.push("grayscale(100%)");
    }
    const filterValue = filter.join(" ");
    if (media.style.getPropertyValue("filter") !== filterValue) {
      media.style.setProperty("filter", filterValue);
    }
  }
  function isWithinSplitSection(child) {
    let element = child;
    while (element && !element.classList.contains("Theme-Section")) {
      if (element.parentNode) {
        element = element.parentNode;
      } else {
        console.error("Could not find the parent Theme-section");
      }
    }
    return element.classList.contains("SplitLayout");
  }
  function _resetTextProperties(isTextPerLine, parent, children) {
    if (isTextPerLine || parent.contains(document.activeElement)) {
      parent.style.removeProperty("transform");
      parent.style.removeProperty("filter");
      parent.style.removeProperty("opacity");
    }
    if (!isTextPerLine || parent.contains(document.activeElement)) {
      children.forEach((text) => {
        text.style.removeProperty("transform");
        text.style.removeProperty("filter");
        text.style.removeProperty("opacity");
      });
    }
  }

  // ../story/src/background-scrollmation/index.ts
  var import_polyfill = __toESM(require_polyfill());

  // ../story/src/lazyload/index.ts
  function initLazyload() {
    const lazyLoadables = queryAll("[data-lazyload-container][data-lazyload-trigger]");
    lazyLoadables.map((container) => {
      return {
        pictures: queryAll("[data-lazyload-item] picture", container),
        container,
        trigger: container
      };
    }).forEach(initLazyloadable);
  }
  function loadImagesForPrint(pictures, container) {
    pictures.forEach((picture) => loadPicture(picture, () => hideLoadingState(container)));
  }
  function initLazyloadable({ pictures, container, trigger }) {
    let isDestroyed = false;
    const destroy = () => {
      if (!isDestroyed) {
        unobserve(container);
        isDestroyed = true;
      }
    };
    const onVisible = (entry) => {
      if (!isVisible(entry))
        return;
      pictures.forEach((picture) => loadPicture(picture, () => hideLoadingState(container)));
      destroy();
    };
    const handleBeforePrint = () => {
      loadImagesForPrint(pictures, container);
    };
    window.addEventListener("beforeprint", handleBeforePrint);
    observe(trigger, onVisible, {
      triggerPoint: "lazyload" /* Lazyload */
    });
    return destroy;
  }
  function loadPicture(picture, onDone) {
    const img = query("img", picture);
    const sources = queryAll("source", picture);
    if (!img)
      return;
    img.addEventListener("load", onDone);
    replaceDataAttributes(img);
    sources.forEach(replaceDataAttributes);
  }
  function replaceDataAttributes(element) {
    const ATTRS_TO_REPLACE = {
      "data-src": "src",
      "data-srcset": "srcset"
    };
    Object.entries(ATTRS_TO_REPLACE).forEach(([old, replacement]) => {
      const value = element.getAttribute(old);
      if (!value)
        return;
      element.removeAttribute(old);
      element.setAttribute(replacement, value);
    });
  }
  function hideLoadingState(container) {
    container.classList.remove("Lazyload--isLoading");
    container.classList.add("Lazyload--isLoaded");
  }

  // ../story/src/dom-helpers/page-visibility.ts
  var import_page_visibility_shim = __toESM(require_page_visibility_shim());
  var pageVisibility = {
    /**
     * @return boolean
     */
    isHidden() {
      var _a;
      return document[(_a = import_page_visibility_shim.default) == null ? void 0 : _a.hidden];
    },
    /**
     * @param cb Function
     * @return void
     */
    addVisibilityChangeListener(cb) {
      return document.addEventListener(import_page_visibility_shim.default.visibilityChange, cb);
    }
  };
  var page_visibility_default = pageVisibility;

  // ../story/src/utils/request-animation-frame.ts
  var setTimeout2 = window.setTimeout;
  var clearTimeout2 = window.clearTimeout;
  var lastTime = 0;
  var rafFallback = (fn) => {
    const currTime = Date.now();
    const timeToCall = Math.max(0, 16 - (currTime - lastTime));
    const id = setTimeout2(() => fn(currTime + timeToCall), timeToCall);
    lastTime = currTime + timeToCall;
    return id;
  };
  var cancelRafFallback = (id) => clearTimeout2(id);
  var requestAnimationFrame2 = window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : rafFallback;
  var cancelAnimationFrame = window.requestAnimationFrame ? window.cancelAnimationFrame.bind(window) : cancelRafFallback;

  // ../story/src/loop/index.ts
  var loopables = [];
  var isLoopRunning = false;
  function execute(time) {
    loopables.forEach((loopable) => loopable(time));
  }
  function loop(time) {
    execute(time);
    if (isLoopRunning) {
      requestAnimationFrame2(loop);
    }
  }
  var listening = false;
  function initLoop() {
    if (isLoopRunning) {
      return;
    }
    if (!listening) {
      page_visibility_default.addVisibilityChangeListener(() => {
        if (page_visibility_default.isHidden()) {
          stopLoop();
        } else {
          initLoop();
        }
      });
      listening = true;
    }
    if (page_visibility_default.isHidden()) {
      return;
    }
    isLoopRunning = true;
    requestAnimationFrame2(loop);
  }
  function stopLoop() {
    isLoopRunning = false;
  }
  function addToLoop(fn) {
    if (loopables.indexOf(fn) === -1) {
      loopables.push(fn);
    }
    initLoop();
  }
  function unLoop(fn) {
    const index = loopables.indexOf(fn);
    if (index !== -1) {
      loopables.splice(index, 1);
    }
  }

  // ../story/src/scrollmation/index.ts
  var import_javascript_state_machine = __toESM(require_state_machine_min());

  // ../story/src/object-fit/index.ts
  var import_fastdom3 = __toESM(require_fastdom());

  // ../node_modules/.pnpm/objectFitPolyfill@2.3.5_6qfcwrtawxdzmmw4xfo3wvlbeq/node_modules/objectFitPolyfill/dist/objectFitPolyfill.min.js
  !function() {
    "use strict";
    if ("undefined" != typeof window) {
      var t = window.navigator.userAgent.match(/Edge\/(\d{2})\./), e = t ? parseInt(t[1], 10) : null, n = !!e && (16 <= e && e <= 18);
      if (!("objectFit" in document.documentElement.style != false) || n) {
        var o = function(t2, e2, i2) {
          var n2, o2, l2, a, d;
          if ((i2 = i2.split(" ")).length < 2 && (i2[1] = i2[0]), "x" === t2)
            n2 = i2[0], o2 = i2[1], l2 = "left", a = "right", d = e2.clientWidth;
          else {
            if ("y" !== t2)
              return;
            n2 = i2[1], o2 = i2[0], l2 = "top", a = "bottom", d = e2.clientHeight;
          }
          if (n2 !== l2 && o2 !== l2) {
            if (n2 !== a && o2 !== a)
              return "center" === n2 || "50%" === n2 ? (e2.style[l2] = "50%", void (e2.style["margin-" + l2] = d / -2 + "px")) : void (0 <= n2.indexOf("%") ? (n2 = parseInt(n2, 10)) < 50 ? (e2.style[l2] = n2 + "%", e2.style["margin-" + l2] = d * (n2 / -100) + "px") : (n2 = 100 - n2, e2.style[a] = n2 + "%", e2.style["margin-" + a] = d * (n2 / -100) + "px") : e2.style[l2] = n2);
            e2.style[a] = "0";
          } else
            e2.style[l2] = "0";
        }, l = function(t2) {
          var e2 = t2.dataset ? t2.dataset.objectFit : t2.getAttribute("data-object-fit"), i2 = t2.dataset ? t2.dataset.objectPosition : t2.getAttribute("data-object-position");
          e2 = e2 || "cover", i2 = i2 || "50% 50%";
          var n2 = t2.parentNode;
          return function(t3) {
            var e3 = window.getComputedStyle(t3, null), i3 = e3.getPropertyValue("position"), n3 = e3.getPropertyValue("overflow"), o2 = e3.getPropertyValue("display");
            i3 && "static" !== i3 || (t3.style.position = "relative"), "hidden" !== n3 && (t3.style.overflow = "hidden"), o2 && "inline" !== o2 || (t3.style.display = "block"), 0 === t3.clientHeight && (t3.style.height = "100%"), -1 === t3.className.indexOf("object-fit-polyfill") && (t3.className = t3.className + " object-fit-polyfill");
          }(n2), function(t3) {
            var e3 = window.getComputedStyle(t3, null), i3 = { "max-width": "none", "max-height": "none", "min-width": "0px", "min-height": "0px", top: "auto", right: "auto", bottom: "auto", left: "auto", "margin-top": "0px", "margin-right": "0px", "margin-bottom": "0px", "margin-left": "0px" };
            for (var n3 in i3)
              e3.getPropertyValue(n3) !== i3[n3] && (t3.style[n3] = i3[n3]);
          }(t2), t2.style.position = "absolute", t2.style.width = "auto", t2.style.height = "auto", "scale-down" === e2 && (e2 = t2.clientWidth < n2.clientWidth && t2.clientHeight < n2.clientHeight ? "none" : "contain"), "none" === e2 ? (o("x", t2, i2), void o("y", t2, i2)) : "fill" === e2 ? (t2.style.width = "100%", t2.style.height = "100%", o("x", t2, i2), void o("y", t2, i2)) : (t2.style.height = "100%", void ("cover" === e2 && t2.clientWidth > n2.clientWidth || "contain" === e2 && t2.clientWidth < n2.clientWidth ? (t2.style.top = "0", t2.style.marginTop = "0", o("x", t2, i2)) : (t2.style.width = "100%", t2.style.height = "auto", t2.style.left = "0", t2.style.marginLeft = "0", o("y", t2, i2))));
        }, i = function(t2) {
          if (void 0 === t2 || t2 instanceof Event)
            t2 = document.querySelectorAll("[data-object-fit]");
          else if (t2 && t2.nodeName)
            t2 = [t2];
          else {
            if ("object" != typeof t2 || !t2.length || !t2[0].nodeName)
              return false;
            t2 = t2;
          }
          for (var e2 = 0; e2 < t2.length; e2++)
            if (t2[e2].nodeName) {
              var i2 = t2[e2].nodeName.toLowerCase();
              if ("img" === i2) {
                if (n)
                  continue;
                t2[e2].complete ? l(t2[e2]) : t2[e2].addEventListener("load", function() {
                  l(this);
                });
              } else
                "video" === i2 ? 0 < t2[e2].readyState ? l(t2[e2]) : t2[e2].addEventListener("loadedmetadata", function() {
                  l(this);
                }) : l(t2[e2]);
            }
          return true;
        };
        "loading" === document.readyState ? document.addEventListener("DOMContentLoaded", i) : i(), window.addEventListener("resize", i), window.objectFitPolyfill = i;
      } else
        window.objectFitPolyfill = function() {
          return false;
        };
    }
  }();

  // ../story/src/object-fit/index.ts
  function doYouEvenFitObjects() {
    if (!window)
      return false;
    const firstObjectFitElement = document.querySelector(".ObjectFit--cover");
    if (!firstObjectFitElement)
      return false;
    const stylez = window.getComputedStyle(firstObjectFitElement);
    const soFitMuchCross = stylez.objectFit;
    const isEdge = getDeviceInfo().isEdge;
    const hasObjectFit = soFitMuchCross ? /^(contain|cover|fill)$/.test(soFitMuchCross) : false;
    return hasObjectFit && !isEdge;
  }
  function ensureObjectFitOrientationIsCorrect() {
    import_fastdom3.default.measure(() => {
      const orientation = display_container_default.getOrientation();
      import_fastdom3.default.mutate(() => {
        const elements = queryAll(".ObjectFit--cover");
        elements.forEach((element) => {
          element.dataset.objectFit = "cover";
          const elementWithValues = element.tagName === "IMG" ? element.parentElement : element;
          if (elementWithValues.hasAttribute(`data-${orientation}-focal`)) {
            element.dataset.objectPosition = elementWithValues.dataset[`${orientation}Focal`];
          }
        });
        applyObjectFit(elements);
      });
    });
  }
  function applyObjectFit(elements) {
    window.objectFitPolyfill(elements);
    fixIEObjectFit(elements);
  }
  function fixIEObjectFit(elements) {
    const { isIE, isEdge } = getDeviceInfo();
    if (!isIE && !isEdge)
      return;
    elements.forEach((element) => fixIEObjectFitForElement(element));
  }
  function fixIEObjectFitForElement(element) {
    const { isIE, isEdge } = getDeviceInfo();
    if (!isIE && !isEdge)
      return;
    if (element.className.indexOf("FullSize__fixedChild") === -1)
      return;
    import_fastdom3.default.measure(() => {
      const orientation = window.innerWidth > window.innerHeight ? "landscape" : "portrait";
      const split = getSplitSectionType(element);
      if (split === "none")
        return;
      const parentWidth = parseFloat(window.getComputedStyle(element.parentElement).getPropertyValue("width"));
      if (isEdge) {
        element.style.setProperty("width", `${orientation === "landscape" ? parentWidth + "px" : "100%"}`);
        return;
      }
      if (orientation === "portrait") {
        element.style.removeProperty("transform");
        return;
      }
      const mediaDimensions = "play" in element ? {
        width: element.videoWidth,
        height: element.videoHeight
      } : {
        width: element.naturalWidth,
        height: element.naturalHeight
      };
      if (mediaDimensions.width < 1) {
        setTimeout(() => fixIEObjectFitForElement(element), 100);
        return;
      }
      const isLandscapeMedia = mediaDimensions.width > mediaDimensions.height;
      import_fastdom3.default.mutate(() => {
        if (isLandscapeMedia) {
          if (split === "media-left") {
            if (element.style.getPropertyValue("left") === "50%") {
              element.style.setProperty("transform", `translateX(-${parentWidth * 0.5}px)`);
            } else if (!["", "0px"].includes(element.style.getPropertyValue("margin-left"))) {
              element.style.setProperty("transform", `translateX(-${parentWidth * 0.25}px)`);
            } else {
              element.style.setProperty("transform", `translateX(-${parentWidth * 0.75}px)`);
            }
          } else {
            if (element.style.getPropertyValue("left") === "50%") {
              element.style.setProperty("transform", `translateX(${parentWidth * 0.5}px)`);
            } else if (!["", "0px"].includes(element.style.getPropertyValue("margin-left"))) {
              element.style.setProperty("transform", `translateX(${parentWidth * 0.75}px)`);
            } else {
              element.style.setProperty("transform", `translateX(${parentWidth * 0.25}px)`);
            }
          }
        } else {
          const [x, y] = element.dataset["object-position"].split(" ").map((p) => parseInt(p, 10));
          const hasMarginLeft = element.style.getPropertyValue("margin-left") && element.style.getPropertyValue("margin-left") !== "0px";
          const hasMarginRight = element.style.getPropertyValue("margin-right") && element.style.getPropertyValue("margin-right") !== "0px";
          if (split === "media-right") {
            if (x === 50) {
              element.style.setProperty("transform", `scale(0.5) translate(${parentWidth}px, 0%)`);
            } else if (y < 50) {
              element.style.setProperty("transform", `scale(0.5) translate(${parentWidth}px, -${50 - y}%)`);
            } else {
              element.style.setProperty("transform", `scale(0.5) translate(${parentWidth}px, ${y - 50}%)`);
            }
            if (hasMarginLeft) {
              element.style.setProperty(
                "transform",
                `translateX(${parentWidth - Math.abs(parseFloat(element.style.getPropertyValue("margin-left")))}px)`
              );
              return;
            }
            if (hasMarginRight) {
              element.style.setProperty(
                "transform",
                `translateX(${Math.abs(parseFloat(element.style.getPropertyValue("margin-right")))}px)`
              );
              return;
            }
          } else {
            if (y === 50) {
              element.style.setProperty("transform", `scale(0.5) translate(-${parentWidth}px, 0%)`);
            } else if (y < 50) {
              element.style.setProperty("transform", `scale(0.5) translate(-${parentWidth}px, -${50 - y}%)`);
            } else {
              element.style.setProperty("transform", `scale(0.5) translate(-${parentWidth}px, ${y - 50}%)`);
            }
            if (hasMarginLeft) {
              element.style.setProperty(
                "transform",
                `translateX(-${Math.abs(parseFloat(element.style.getPropertyValue("margin-left")))}px)`
              );
              return;
            }
            if (hasMarginRight) {
              element.style.setProperty(
                "transform",
                `translateX(-${parentWidth - Math.abs(parseFloat(element.style.getPropertyValue("margin-right")))}px)`
              );
              return;
            }
          }
        }
      });
    });
  }
  function getSplitSectionType(element) {
    var _a;
    if (((_a = element.id) == null ? void 0 : _a.indexOf("section-")) === 0) {
      if (element.className.indexOf("SplitLayout--rowReverse") > -1) {
        return "media-left";
      } else if (element.className.indexOf("SplitLayout") > -1) {
        return "media-right";
      } else {
        return "none";
      }
    }
    return getSplitSectionType(element.parentElement);
  }
  function initObjectFit() {
    window.addEventListener("resize", () => ensureObjectFitOrientationIsCorrect(), { passive: true });
    ensureObjectFitOrientationIsCorrect();
  }

  // ../story/src/scrollmation/scroll-info.ts
  function getScrollInfo(el) {
    const boundingRect = el.getBoundingClientRect();
    const top = -boundingRect.top;
    const scrollLength = Math.max(1, boundingRect.height - document.documentElement.clientHeight);
    const percentage = top / scrollLength;
    return {
      percentage,
      scrollingIn: percentage < 0,
      scrollingOut: percentage > 1
    };
  }

  // ../story/src/scrollmation/index.ts
  var ItemMachine = import_javascript_state_machine.default.factory({
    init: "ready" /* Ready */,
    transitions: [
      // scrolling down
      { name: "prime" /* Prime */, from: "ready" /* Ready */, to: "primed" /* Primed */ },
      {
        name: "startTransition" /* StartTransition */,
        from: "primed" /* Primed */,
        to: "transitioning" /* Transitioning */
      },
      {
        name: "activate" /* Activate */,
        from: "transitioning" /* Transitioning */,
        to: "active" /* Active */
      },
      {
        name: "linger" /* Linger */,
        from: "active" /* Active */,
        to: "lingering" /* Lingering */
      },
      {
        name: "complete" /* Complete */,
        from: ["active" /* Active */, "lingering" /* Lingering */],
        to: "completed" /* Completed */
      },
      // scrolling back up, repeat in reverse
      {
        name: "activate" /* Activate */,
        from: ["completed" /* Completed */, "lingering" /* Lingering */],
        to: "active" /* Active */
      },
      {
        name: "reverseTransition" /* ReverseTransition */,
        from: "active" /* Active */,
        to: "transitioning" /* Transitioning */
      },
      {
        name: "reset" /* Reset */,
        from: "transitioning" /* Transitioning */,
        to: "ready" /* Ready */
      }
    ],
    methods: {
      onPrimed() {
        const { item, classNames } = this;
        item.itemEl.classList.add(classNames.prime);
        if (this.onItemShown) {
          this.onItemShown(item);
        }
      },
      onStartTransition() {
        const { item, classNames } = this;
        once(item.itemEl, "transitionend", () => this.activate());
        requestAnimationFrame(() => item.itemEl.classList.add(classNames.active));
        ensureObjectFitOrientationIsCorrect();
      },
      onReverseTransition() {
        const { item, classNames } = this;
        once(item.itemEl, "transitionend", () => this.reset());
        item.itemEl.classList.remove(classNames.active);
      },
      onReset() {
        const { item, classNames } = this;
        item.itemEl.classList.remove(classNames.prime);
        item.itemEl.classList.remove(classNames.active);
      },
      onActive() {
        const { item, classNames } = this;
        [classNames.prime, classNames.active].forEach((c) => item.itemEl.classList.add(c));
        if (this.onItemShown) {
          this.onItemShown(item);
        }
        ensureObjectFitOrientationIsCorrect();
      },
      onCompleted() {
        const { item, classNames } = this;
        item.itemEl.classList.remove(classNames.prime);
        item.itemEl.classList.remove(classNames.active);
      },
      requestReady() {
        if (this.is("ready" /* Ready */))
          return;
        if (this.is("active" /* Active */)) {
          this.reverseTransition();
        }
      },
      requestActive() {
        if (this.is("ready" /* Ready */)) {
          this.prime();
        }
        if (this.is("primed" /* Primed */)) {
          this.startTransition();
        }
        if (this.is("completed" /* Completed */) || this.is("lingering" /* Lingering */)) {
          this.activate();
        }
      },
      requestComplete() {
        const shouldLinger = this.shouldLinger(this.item);
        const canLinger = this.can("linger" /* Linger */);
        const shouldComplete = !shouldLinger;
        const canComplete = this.can("complete" /* Complete */);
        if (shouldLinger && canLinger) {
          this.linger();
        } else if (shouldComplete && canComplete) {
          this.complete();
        }
      },
      isActive() {
        return this.is("active" /* Active */);
      }
    },
    data(data) {
      return data;
    }
  });
  function renderScrollmation(instance) {
    if (instance.isRendering)
      return;
    instance.isRendering = true;
    const scrollInfo = getScrollInfo(instance.scrollContainer);
    instance.items.forEach((item) => {
      const desiredState = calculateDesiredState(scrollInfo, item.data);
      if (!desiredState)
        return;
      const machine = instance.machines.get(item);
      const requestDesiredState = {
        ["ready" /* Ready */]: machine.requestReady,
        ["active" /* Active */]: machine.requestActive,
        ["complete" /* Complete */]: machine.requestComplete
      }[desiredState];
      requestDesiredState.call(machine);
    });
    instance.isRendering = false;
  }
  function calculateDesiredState(scrollInfo, itemData) {
    const isFirstItem = scrollInfo.scrollingIn && itemData.showDuringScrollIn;
    const isLastItem = scrollInfo.scrollingOut && itemData.showDuringScrollOut;
    const isActive = isInBounds(scrollInfo.percentage, itemData.start, itemData.end);
    if (isFirstItem || isLastItem || isActive)
      return "active" /* Active */;
    if (scrollInfo.percentage < itemData.start)
      return "ready" /* Ready */;
    if (scrollInfo.percentage > itemData.end)
      return "complete" /* Complete */;
  }
  function isInBounds(value, start, end) {
    return value >= start && value < end;
  }

  // ../story/src/background-scrollmation/index.ts
  var state2 = { instances: /* @__PURE__ */ new Map(), isRunning: false };
  var triggerElements = /* @__PURE__ */ new WeakMap();
  function getStateByDOMElement(el) {
    const instances = state2.instances;
    if (instances.has(el)) {
      return instances.get(el);
    }
    instances.set(el, {
      scrollContainer: el.parentElement,
      items: [],
      isRendering: false,
      machines: /* @__PURE__ */ new WeakMap()
    });
    return instances.get(el);
  }
  function createItemFromEl(itemEl, index, itemEls) {
    const itemLength = 1 / itemEls.length;
    const showItemAt = index * itemLength;
    const showUntil = showItemAt + itemLength;
    const showDuringScrollIn = index === 0;
    const showDuringScrollOut = index === itemEls.length - 1;
    const data = {
      // values too low can cause CSS transitions to fail
      start: showItemAt,
      end: showUntil,
      showDuringScrollIn,
      showDuringScrollOut
    };
    return {
      itemEl,
      index,
      data
    };
  }
  function captionDisplay() {
    const backgroundScrollmations = document.querySelectorAll(".Theme-BackgroundScrollmationSection");
    backgroundScrollmations.forEach((item) => {
      const infoButtons = item.querySelectorAll(".MediaRenderer__fixedCaption--icon");
      const captionModal = item.querySelector(".MediaRenderer__Scrollmation-portrait--Caption");
      const closeButtons = item.querySelectorAll(".btn-close-caption-scrollmation");
      function openCaptionModal() {
        captionModal.removeAttribute("style");
      }
      function close() {
        captionModal.style.display = "none";
      }
      infoButtons.forEach((btn) => btn.addEventListener("click", openCaptionModal));
      closeButtons.forEach((btn) => btn.addEventListener("click", close));
    });
  }
  function initBackgroundScrollmations() {
    const backgroundScrollmations = queryAll("[data-background-scrollmation]");
    captionDisplay();
    backgroundScrollmations.forEach((el) => initBackgroundScrollmation(el, { doLazyload: true }));
    ["resize", "orientationchange"].forEach(
      (eventName) => window.addEventListener(eventName, updateLazyloadTriggerPositions, {
        passive: true
      })
    );
  }
  function initBackgroundScrollmation(el, options, onItemShown) {
    const itemsEls = queryAll("[data-background-scrollmation-item]", el);
    if (itemsEls.length === 0) {
      return () => {
      };
    }
    const newItems = itemsEls.map(createItemFromEl);
    const state9 = getStateByDOMElement(el);
    state9.items = newItems.reduce((finalItems, currentItem) => {
      const existingItem = state9.items.find((i) => i.itemEl === currentItem.itemEl);
      if (existingItem) {
        existingItem.data = currentItem.data;
      }
      return [...finalItems, existingItem || currentItem];
    }, []);
    state9.items.map((item) => options.doLazyload ? ensureItemIsLazyloadable(item, el.parentElement) : item).filter((item) => {
      const existingMachine = state9.machines.get(item);
      return !existingMachine;
    }).forEach(
      (item) => state9.machines.set(
        item,
        new ItemMachine({
          item,
          classNames: {
            prime: "BackgroundScrollmationItem--isPrimed",
            active: "BackgroundScrollmationItem--isActive"
          },
          onItemShown(item2) {
            onItemShown && onItemShown(item2, state9.items.indexOf(item2));
          },
          shouldLinger(item2) {
            const otherItems = state9.items.filter((i) => i !== item2);
            const otherMachines = otherItems.map((i) => state9.machines.get(i));
            const hasActiveMachines = otherMachines.some((machine) => machine.isActive());
            return !hasActiveMachines;
          }
        })
      )
    );
    function onScroll4() {
      const bounds = el.parentElement.getBoundingClientRect();
      if (bounds.bottom < display_container_default.getTop() + display_container_default.getHeight()) {
        el.setAttribute("data-attach", "after");
      } else if (bounds.top < display_container_default.getTop()) {
        el.setAttribute("data-attach", "during");
      } else {
        el.setAttribute("data-attach", "before");
      }
    }
    if (!document.getElementById("editor-viewport")) {
      document.addEventListener("scroll", onScroll4, { passive: true });
    }
    if (options.doLazyload)
      updateLazyloadTriggerPositions();
    addToLoop(onTick);
    return () => {
      unLoop(onTick);
      if (!document.getElementById("editor-viewport")) {
        document.removeEventListener("scroll", onScroll4);
      }
    };
  }
  function ensureItemIsLazyloadable(item, columnEl) {
    const existingTriggerEl = triggerElements.get(item.itemEl);
    if (!existingTriggerEl) {
      const newTriggerEl = document.createElement("div");
      newTriggerEl.classList.add("BackgroundScrollmation__lazyloadTriggerElement");
      newTriggerEl.setAttribute("data-item-index", String(item.index));
      triggerElements.set(item.itemEl, newTriggerEl);
      columnEl.appendChild(newTriggerEl);
      const lazyloadable = {
        pictures: queryAll("picture", item.itemEl),
        container: item.itemEl.querySelector("[data-lazyload-container]"),
        trigger: newTriggerEl
      };
      initLazyloadable(lazyloadable);
    }
    return item;
  }
  function updateLazyloadTriggerPositions() {
    (0, import_polyfill.default)(state2.instances.values()).map((instance) => instance.items).map(
      (items) => items.map((item) => {
        const triggerElement = triggerElements.get(item.itemEl);
        Object.assign(triggerElement.style, {
          position: "absolute",
          top: `${item.data.start * 100}%`
        });
      })
    );
  }
  function onTick() {
    state2.instances.forEach((i) => renderScrollmation(i));
  }

  // ../story/src/scroll-track/index.ts
  initDisplayContainer();
  function addScrollListener(element, listener) {
    if (scrolledElements.length === 0) {
      initScrollTracking();
    }
    const bucket = scrolledElements.find((entry) => entry.element === element);
    if (bucket) {
      if (!bucket.listeners.find((cb) => cb === listener)) {
        bucket.listeners.push(listener);
      }
    } else {
      scrolledElements.push({ element, lastVisible: false, listeners: [listener] });
    }
  }
  function removeScrollListener(element, listener) {
    const bucketIdx = scrolledElements.findIndex((entry) => entry.element === element);
    if (bucketIdx !== -1) {
      const bucket = scrolledElements[bucketIdx];
      bucket.listeners = bucket.listeners.filter((cb) => cb !== listener);
      if (bucket.listeners.length === 0) {
        scrolledElements.splice(bucketIdx, 1);
        if (scrolledElements.length === 0) {
          shutdownScrollTracking();
        }
      }
    }
  }
  var scrolledElements = [];
  var scrollRoot;
  var viewportOffset = 0;
  var viewportResizeObserver = null;
  function initScrollTracking() {
    const editorViewport = document.querySelector("#editor-viewport");
    if (editorViewport) {
      scrollRoot = editorViewport;
      viewportOffset = editorViewport.getBoundingClientRect().top;
      viewportResizeObserver = new ResizeObserver(onScrolled);
      viewportResizeObserver.observe(editorViewport, { box: "content-box" });
    } else {
      scrollRoot = window;
      viewportOffset = 0;
      window.addEventListener("resize", onScrolled, { passive: true });
    }
    scrollRoot.addEventListener("scroll", onScrolled, { passive: true });
    addToLoop(onLoop);
  }
  function shutdownScrollTracking() {
    scrollRoot.removeEventListener("scroll", onScrolled);
    if (viewportResizeObserver) {
      viewportResizeObserver.disconnect();
      viewportResizeObserver = null;
    } else {
      window.removeEventListener("resize", onScrolled);
    }
    unLoop(onLoop);
  }
  var scrolled = false;
  function onScrolled() {
    scrolled = true;
  }
  function onLoop() {
    if (scrolled) {
      scrolled = false;
      onScroll2();
    }
  }
  function onScroll2() {
    scrolledElements.forEach((se) => {
      const { top, isVisible: isVisible2, scrollPercent, elementHeight, viewportHeight: viewportHeight2 } = getElementScrollInfo(se.element);
      const type = isVisible2 === se.lastVisible ? "scroll" : isVisible2 ? "enter" : "leave";
      if (isVisible2 || type === "leave") {
        const event = {
          element: se.element,
          type,
          top,
          scrollPercent,
          elementHeight,
          viewportHeight: viewportHeight2
        };
        se.listeners.forEach((cb) => cb(event));
        se.lastVisible = isVisible2;
      }
    });
  }
  function getElementScrollInfo(element) {
    const { top, height: elementHeight } = element.getBoundingClientRect();
    const viewportHeight2 = display_container_default.getHeight();
    const range = viewportHeight2 + elementHeight;
    const scrollTop = top - viewportOffset;
    const scrollPercent = 1 - (elementHeight + scrollTop) / range;
    return {
      top: scrollTop,
      isVisible: scrollPercent >= 0 && scrollPercent <= 1,
      scrollPercent,
      elementHeight,
      viewportHeight: viewportHeight2
    };
  }

  // ../story/src/components/emitter.ts
  function eventEmitter() {
    const listeners = {};
    return {
      /**
       * Add a listener on the given event.
       * @param event
       * @param listener
       * @returns true if this is the first listener added on this event type.
       */
      on(event, listener) {
        if (listeners[event]) {
          listeners[event].push(listener);
        } else {
          listeners[event] = [listener];
          return true;
        }
      },
      /**
       * Remove a listener for the given event.
       * @param event
       * @param listener
       * @returns true if we just removed the last listener on this event type.
       */
      off(event, listener) {
        if (listeners[event]) {
          const idx = listeners[event].indexOf(listener);
          if (idx !== -1) {
            if (listeners[event].length === 1) {
              delete listeners[event];
              return true;
            } else {
              listeners[event].splice(idx, 1);
            }
          }
        }
        return false;
      },
      /**
       * Notify all listeners (if any) of the given event.
       * @param event
       * @param body
       */
      emit(event, ...body) {
        var _a;
        (_a = listeners[event]) == null ? void 0 : _a.forEach((listener) => listener(...body));
      },
      hasListener(event) {
        return event in listeners;
      }
    };
  }

  // ../story/src/components/scrolled-element.ts
  function isScrollEvent(type) {
    return ["enter", "leave", "scroll"].includes(type);
  }
  var ScrolledElement = class extends HTMLElement {
    constructor() {
      super(...arguments);
      this.internalEvents = eventEmitter();
      this.scrollListenerCount = 0;
      this.observer = new MutationObserver(() => {
        this.internalEvents.emit("content");
      });
      this.scrollListener = (event) => {
        switch (event.type) {
          case "enter":
            this.internalEvents.emit("enter");
            this.internalEvents.emit("scroll", event);
            break;
          case "leave":
            this.internalEvents.emit("leave");
            break;
          case "scroll":
            this.internalEvents.emit("scroll", event);
            break;
        }
      };
    }
    connectedCallback() {
      this.internalEvents.emit("connected");
      if (this.internalEvents.hasListener("content")) {
        this.observer.observe(this, { childList: true, subtree: true });
        if (this.hasChildNodes()) {
          this.internalEvents.emit("content");
        }
      }
      if (this.scrollListenerCount > 0) {
        this.scrolledParent = getScrolledParent(this);
        addScrollListener(this.scrolledParent, this.scrollListener);
        const state9 = getElementScrollInfo(this.scrolledParent);
        if (state9.scrollPercent < 0 || state9.scrollPercent > 1) {
          this.internalEvents.emit("leave");
        } else {
          this.internalEvents.emit("enter");
          this.internalEvents.emit("scroll", __spreadValues({ element: this.scrolledParent, type: "enter" }, state9));
        }
      }
    }
    getScrollPosition() {
      return getElementScrollInfo(this.scrolledParent);
    }
    disconnectedCallback() {
      if (this.scrollListenerCount > 0) {
        removeScrollListener(this.scrolledParent, this.scrollListener);
        this.internalEvents.emit("leave");
      }
      if (this.internalEvents.hasListener("content")) {
        this.observer.disconnect();
      }
      this.internalEvents.emit("disconnected");
    }
    on(event, listener) {
      if (this.internalEvents.on(event, listener)) {
        if (isScrollEvent(event)) {
          if (this.isConnected && this.scrollListenerCount === 0) {
            this.scrolledParent = getScrolledParent(this);
            addScrollListener(this.scrolledParent, this.scrollListener);
          }
          this.scrollListenerCount++;
        } else if (event === "content") {
          if (this.isConnected) {
            this.observer.observe(this, { childList: true, subtree: true });
          }
        }
      }
    }
    off(event, listener) {
      if (this.internalEvents.off(event, listener)) {
        if (isScrollEvent(event)) {
          this.scrollListenerCount--;
          if (this.isConnected && this.scrollListenerCount === 0) {
            removeScrollListener(this.scrolledParent, this.scrollListener);
          }
        } else if (event === "content") {
          if (this.isConnected) {
            this.observer.disconnect();
          }
        }
      }
    }
  };
  function getScrolledParent(element) {
    let node = element;
    while (node.parentElement) {
      const style = getComputedStyle(node);
      if (style.position !== "sticky" && style.display !== "inline") {
        return node;
      }
      node = node.parentElement;
    }
    return node;
  }

  // ../story/src/background-transition/captions.ts
  var DEFAULTS = {
    /**
     * How much of a reaval item is shown before it's caption fades in
     */
    fadeInThreshold: 0.7,
    /**
     * How much of the _next_ reveal item is shown to fade out the current caption
     */
    fadeOutThreshold: 0.15,
    /**
     * display: none the caption when the section isn't in view (ideal for Reveal-type sections)
     */
    hideWhenOutOfBounds: true
  };
  function getVisibleCaptions(frames, scrollPercentage, viewportHeight2, elementHeight, options = DEFAULTS) {
    const heightPercentage = viewportHeight2 / (viewportHeight2 + elementHeight);
    const showFirstCaptionAt = heightPercentage * options.fadeInThreshold * 0.5 - heightPercentage;
    const showLastCaptionAt = 1 - heightPercentage;
    if (showFirstCaptionAt > scrollPercentage || scrollPercentage >= showLastCaptionAt) {
      return [];
    }
    const visibleFrames = frames.filter((frame) => frame.transitionPercentage).sort((a, b) => b.transitionPercentage - a.transitionPercentage);
    if (visibleFrames.length === 0) {
      return [];
    }
    const mostVisibleFrame = visibleFrames[0];
    const nextVisibleFrame = visibleFrames[1];
    if (mostVisibleFrame.transitionPercentage < options.fadeInThreshold) {
      return [];
    }
    if (nextVisibleFrame) {
      const isPastInThreshold = nextVisibleFrame.transitionPercentage > options.fadeInThreshold;
      const isPastOutThreshold = nextVisibleFrame.transitionPercentage > options.fadeOutThreshold;
      if (isPastInThreshold) {
        return [nextVisibleFrame];
      } else if (isPastOutThreshold) {
        return [mostVisibleFrame, nextVisibleFrame];
      }
    }
    return [mostVisibleFrame];
  }

  // ../story/src/background-transition/fade-text-items.ts
  var import_clamp2 = __toESM(require_clamp());
  var import_fastdom4 = __toESM(require_fastdom());
  function initTextItemFades(section) {
    var _a;
    const texts = queryAll(".Theme-Layer-BodyText", section.parentElement);
    const viewport = (_a = document.getElementById("editor-viewport")) != null ? _a : document;
    viewport.addEventListener("scroll", onScroll4, { passive: true });
    function onScroll4() {
      texts.forEach((bodyText) => {
        import_fastdom4.default.measure(() => {
          const { top, bottom } = bodyText.getBoundingClientRect();
          const windowHeight = window.innerHeight;
          const fadingHeight = windowHeight * 0.3;
          const isFadingIn = top < windowHeight && top > windowHeight - fadingHeight;
          const isFadingOut = bottom < fadingHeight && bottom > 0;
          import_fastdom4.default.mutate(() => {
            if (isFadingIn) {
              const opacity = (0, import_clamp2.default)((windowHeight - top) / fadingHeight, 0, 1);
              bodyText.style.setProperty("opacity", opacity.toString());
            } else if (isFadingOut) {
              const opacity = (0, import_clamp2.default)(bottom / fadingHeight, 0, 1);
              bodyText.style.setProperty("opacity", opacity.toString());
            } else if (bottom < 0 || top > windowHeight) {
              bodyText.style.setProperty("opacity", "0");
            } else {
              bodyText.style.setProperty("opacity", "1");
            }
          });
        });
      });
    }
  }

  // ../story/src/background-transition/layout.ts
  function parseTransitionRules(attr) {
    if (!attr) {
      return [];
    }
    const parts = attr.split(";");
    return parts.map((part) => {
      const elems = part.trim().split(/\s+/);
      if (elems.length < 2) {
        return { name: elems[0] || "none", speed: 1 };
      } else {
        const speed = parseFloat(elems[0]);
        return { name: elems[1], speed: isNaN(speed) ? 1 : speed };
      }
    });
  }
  function calculateTransitions(transitionRules, textHeights, viewportHeight2, parentHeight) {
    var _a, _b, _c;
    const scrollHeight = viewportHeight2 + parentHeight;
    const bottomPaddingOffset = viewportHeight2 * 0.4;
    const heightPercentage = viewportHeight2 / scrollHeight;
    const start = -bottomPaddingOffset / scrollHeight;
    const transitions = [{ name: "none", start, end: start + heightPercentage }];
    let textHeight = viewportHeight2;
    for (let idx = 0; idx < textHeights.length - 1; idx++) {
      textHeight += textHeights[idx];
      const duration = ((_b = (_a = transitionRules[idx]) == null ? void 0 : _a.speed) != null ? _b : 1) * heightPercentage;
      const start2 = (textHeight - bottomPaddingOffset) / scrollHeight;
      transitions.push({
        name: ((_c = transitionRules[idx]) == null ? void 0 : _c.name) || "none",
        start: start2,
        end: start2 + duration
      });
    }
    return transitions;
  }
  function layoutScene(transitions, scrollPercentage) {
    return transitions.map((transition, index) => {
      if (index !== 0 && scrollPercentage < transition.start || index + 1 < transitions.length && scrollPercentage > transitions[index + 1].end) {
        return { index, display: "none" };
      } else {
        const transitionLength = transition.end - transition.start;
        const relativeTransitionStart = scrollPercentage - transition.start;
        const transitionPercentage = Math.min(relativeTransitionStart / transitionLength, 1);
        const attributes = calculateTransitionAttributes(transition, index, transitionPercentage);
        if (attributes.opacity === 0) {
          return { display: "none", index };
        } else {
          return attributes;
        }
      }
    });
  }
  function calculateTransitionAttributes(transition, index, transitionPercentage) {
    const attributes = { display: "block", transitionPercentage, index, clipPath: "none", opacity: 1 };
    let clipTop = 0, clipRight = 0, clipBottom = 0, clipLeft = 0;
    const splitNames = transition.name.split(",");
    splitNames.forEach((name) => {
      switch (name) {
        case "fade":
          attributes.opacity = transitionPercentage;
          break;
        case "up":
          clipTop = (1 - transitionPercentage) * 100;
          break;
        case "right":
          clipRight = (1 - transitionPercentage) * 100;
          break;
        case "down":
          clipBottom = (1 - transitionPercentage) * 100;
          break;
        case "left":
          clipLeft = (1 - transitionPercentage) * 100;
          break;
      }
    });
    if (clipTop || clipRight || clipBottom || clipLeft) {
      attributes.clipPath = `inset(${clipTop}% ${clipRight}% ${clipBottom}% ${clipLeft}%)`;
    }
    return attributes;
  }

  // ../story/src/background-transition/background-transition.ts
  var SHADOW_HTML = `
<style type="text/css">
.PositionSticky {
  position: -webkit-sticky; /* Safari 12 and earlier */
  top: 0px;
  position: sticky;
}
</style>
<div class="PositionSticky" style="width: 100%; height: 100vh; overflow: hidden">
 <div style="width: 100%; height: 100vh; overflow: hidden; top: 0px; isolation: isolate">
 <slot></slot>
 </div>
 <slot name="caption"></slot>
</div>
<slot name="foreground"></slot>`;
  var BackgroundTransitionElement = class extends ScrolledElement {
    constructor() {
      super();
      this.textHeights = [];
      this.isTextBlockConnected = false;
      const shadow = this.attachShadow({ mode: "open" });
      shadow.innerHTML = SHADOW_HTML;
      this.slotElements = Array.from(shadow.querySelectorAll("slot"));
      if (window.ResizeObserver) {
        this.textObserver = new ResizeObserver(() => {
          if (this.textBlockElement) {
            this.textHeights = getTextHeights(this.textBlockElement);
          }
        });
      }
      this.slotElements[0].addEventListener("slotchange", () => {
        this.updateScene(this.getScrollPosition());
      });
      this.slotElements[1].addEventListener("slotchange", () => {
        this.captionElement = this.slotElements[1].assignedElements()[0];
        const position = this.getScrollPosition();
        if (this.captionElement && position.isVisible) {
          this.captionElement.style.display = "block";
          this.updateScene(position);
        }
      });
      this.slotElements[2].addEventListener("slotchange", () => {
        this.disconnectTextBlockElement();
        this.textBlockElement = this.slotElements[2].assignedElements()[0];
        this.connectTextBlockElement();
        this.updateScene(this.getScrollPosition());
      });
      this.on("connected", () => {
        initTextItemFades(this);
        this.readTransitions();
        this.connectTextBlockElement();
      });
      this.on("disconnected", () => {
        this.disconnectTextBlockElement();
      });
      this.on("enter", () => {
        if (this.captionElement) {
          this.captionElement.style.display = "block";
        }
      });
      this.on("scroll", (event) => {
        this.updateScene(event);
      });
      this.on("leave", () => {
        if (this.captionElement) {
          this.captionElement.style.display = "none";
        }
      });
    }
    connectTextBlockElement() {
      var _a;
      if (this.isConnected && this.textBlockElement && !this.isTextBlockConnected) {
        this.textHeights = getTextHeights(this.textBlockElement);
        (_a = this.textObserver) == null ? void 0 : _a.observe(this.textBlockElement);
        this.isTextBlockConnected = true;
      }
    }
    disconnectTextBlockElement() {
      var _a;
      if (this.textBlockElement && this.isTextBlockConnected) {
        this.textHeights = [];
        (_a = this.textObserver) == null ? void 0 : _a.observe(this.textBlockElement);
        this.isTextBlockConnected = false;
      }
    }
    readTransitions() {
      this.transitions = parseTransitionRules(this.getAttribute("data-transitions"));
    }
    // scrollPercentage is the height we've scrolled through the whole thing
    // heightPercentage is the height of a single screen as a percentage of the scrollable element's height
    // scrollHeight is the actual height of the scrollable element in pixels
    updateScene({
      scrollPercent,
      viewportHeight: viewportHeight2,
      elementHeight
    }) {
      if (this.textHeights.length === 0) {
        return;
      }
      const transitions = calculateTransitions(this.transitions, this.textHeights, viewportHeight2, elementHeight);
      const layout = layoutScene(transitions, scrollPercent);
      const captions = getVisibleCaptions(layout, scrollPercent, viewportHeight2, elementHeight);
      const elements = this.slotElements[0].assignedElements();
      applyCaptions(this.captionElement, elements, captions);
      layout.forEach((attr, index) => applyElementLayout(elements[index], attr));
    }
    attributeChangedCallback() {
      if (this.isConnected) {
        this.readTransitions();
        this.updateScene(this.getScrollPosition());
      }
    }
  };
  BackgroundTransitionElement.observedAttributes = ["data-transitions"];
  function getTextHeights(element) {
    return Array.from(element.children).map((text) => text.getBoundingClientRect().height);
  }
  function applyElementLayout(element, attrs) {
    var _a;
    if (element instanceof HTMLElement) {
      if (element.style.display !== attrs.display) {
        if (attrs.display === "none") {
          elementHidden(element);
        } else {
          elementVisible(element);
        }
        element.style.display = attrs.display;
      }
      element.style.opacity = (_a = attrs.opacity) == null ? void 0 : _a.toString();
      element.style.clipPath = attrs.clipPath;
      element.style.zIndex = attrs.index.toString();
    }
  }
  function elementHidden(element) {
    element.querySelectorAll("video").forEach((video) => {
      if (video.autoplay) {
        video.autoplay = false;
      }
      try {
        video.pause();
      } catch (err) {
      }
    });
  }
  function elementVisible(element) {
    element.querySelectorAll("video").forEach((video) => {
      if (video.src) {
        try {
          video.play().catch(() => {
          });
        } catch (err) {
        }
      } else {
        video.autoplay = true;
      }
    });
  }
  function applyCaptions(captionElement, slideElements, captions) {
    if (captionElement) {
      const container = captionElement.querySelector("[data-mediarenderer-caption-container]") || captionElement;
      const slideCaptions = captions.map((frame) => slideElements[frame.index].querySelector(".Theme-OverlayedCaption"));
      if (captions.length === 0 || slideCaptions.some((elem) => !elem)) {
        captionElement.style.opacity = "0";
      } else {
        captionElement.style.opacity = "1";
        if (captions.length === 2) {
          container.style.opacity = "0";
        } else {
          container.style.opacity = "1";
          container.innerHTML = slideCaptions[0].innerHTML;
        }
      }
    }
  }
  function registerBackgroundTransition(name = "sh-background-transition") {
    if (!customElements.get(name)) {
      customElements.define(name, BackgroundTransitionElement);
    }
  }
  registerBackgroundTransition();

  // ../node_modules/.pnpm/ts-debounce@4.0.0/node_modules/ts-debounce/dist/src/index.esm.js
  function r(r2, e, n) {
    var i, t, o;
    void 0 === e && (e = 50), void 0 === n && (n = {});
    var a = null != (i = n.isImmediate) && i, u = null != (t = n.callback) && t, c = n.maxWait, v = Date.now(), l = [];
    function f() {
      if (void 0 !== c) {
        var r3 = Date.now() - v;
        if (r3 + e >= c)
          return c - r3;
      }
      return e;
    }
    var d = function() {
      var e2 = [].slice.call(arguments), n2 = this;
      return new Promise(function(i2, t2) {
        var c2 = a && void 0 === o;
        if (void 0 !== o && clearTimeout(o), o = setTimeout(function() {
          if (o = void 0, v = Date.now(), !a) {
            var i3 = r2.apply(n2, e2);
            u && u(i3), l.forEach(function(r3) {
              return (0, r3.resolve)(i3);
            }), l = [];
          }
        }, f()), c2) {
          var d2 = r2.apply(n2, e2);
          return u && u(d2), i2(d2);
        }
        l.push({ resolve: i2, reject: t2 });
      });
    };
    return d.cancel = function(r3) {
      void 0 !== o && clearTimeout(o), l.forEach(function(e2) {
        return (0, e2.reject)(r3);
      }), l = [];
    }, d;
  }

  // ../story/src/instant-image/index.ts
  var import_dedupe2 = __toESM(require_dedupe());
  function hideInstantImage(container) {
    const classNames = {
      "InstantImage--isLoading": false,
      "InstantImage--isLoaded": true
    };
    container.className = (0, import_dedupe2.default)(container.className, classNames);
  }

  // ../story/src/videoplayer/util.ts
  var { isSafari } = getDeviceInfo();
  function getVideoSourceForOrientation(media, orientation) {
    const sources = Array.from(media.querySelectorAll("source"));
    let source = void 0;
    if (isSafari) {
      source = sources.find((source2) => source2.type === "video/mp4" && source2.hasAttribute(`data-${orientation}`));
    }
    if (!source) {
      source = sources.find(
        (source2) => media.canPlayType(source2.type) && source2.hasAttribute(`data-${orientation}`) && (!isSafari || source2.type === "video/mp4")
      );
    }
    if (source) {
      return [resolveURL(source.getAttribute(`data-${orientation}`)), source.type];
    }
    return [void 0, void 0];
  }
  function resolveURL(url) {
    const a = document.createElement("a");
    a.href = url;
    return a.href;
  }
  function setVideoClass(state9, videoplayer) {
    videoplayer.classList.remove("video-stopped", "video-paused", "video-playing", "video-loading", "video-error");
    videoplayer.classList.add(state9);
  }

  // ../story/src/background-videos/index.ts
  function showWhenPlaying(video) {
    const showVideo = () => {
      video.style.opacity = "1";
    };
    const events = ["loadeddata", "playing", "canplaythrough"];
    events.forEach((event) => once(video, event, showVideo));
  }
  function isPlaying(video) {
    return video.currentTime > 0 && !video.paused && !video.ended && video.readyState > 2;
  }
  function setVideoSource(video, options = { canControl: true }, fallbackImage) {
    const isPortrait = display_container_default.getHeight() > display_container_default.getWidth();
    const wasPlaying = isPlaying(video);
    const [src] = getVideoSourceForOrientation(video, isPortrait ? "portrait" : "landscape");
    if (src && video.src !== src) {
      video.src = src;
      video.load();
      if (options.canControl && wasPlaying) {
        playVideo(video, fallbackImage);
      }
    }
  }
  function initBackgroundVideos() {
    const { isSafari: isSafari3 } = getDeviceInfo();
    const backgroundVideos = queryAll("[data-background-video]");
    backgroundVideos.forEach((backgroundVideo) => {
      const video = backgroundVideo.querySelector("[data-video]");
      const fallbackImage = backgroundVideo.querySelector("img");
      if (!video)
        return;
      if (isSafari3 && video.className.includes("FullSize__fixedChild")) {
        video.addEventListener("canplay", () => {
          video.className = video.className.replace("FullSize__fixedChild", "FullSize__fixedChild--Safari");
        });
      }
      const autoPlay = video.autoplay;
      video.muted = true;
      video.defaultMuted = true;
      showWhenPlaying(video);
      if (video.readyState >= 2) {
        hideInstantImage(backgroundVideo);
      } else {
        video.addEventListener("loadeddata", () => hideInstantImage(backgroundVideo));
        video.addEventListener("error", () => hideInstantImage(backgroundVideo));
      }
      if (autoPlay) {
        const onTrigger = (entry) => {
          setVideoSource(video, { canControl: false }, fallbackImage);
          fixIEObjectFitForElement(video);
          if (isVisible(entry)) {
            playVideo(video, fallbackImage);
          } else {
            video.pause();
          }
        };
        observe(backgroundVideo, onTrigger, {
          triggerPoint: "on visibile" /* On */
        });
        const { top } = backgroundVideo.getBoundingClientRect();
        if (top < display_container_default.getHeight() * 2) {
          playVideo(video, fallbackImage);
          setTimeout(() => {
            if (video.readyState < 2 && video.paused) {
              video.load();
              playVideo(video, fallbackImage);
            }
          }, 1e3);
        }
      } else {
        setVideoSource(video, { canControl: false }, fallbackImage);
      }
    });
    const videoElements = queryAll("[data-background-video] [data-video]");
    const refresh = r(
      (_event) => videoElements.forEach((video) => {
        var _a;
        setVideoSource(video, { canControl: true }, (_a = video.parentElement) == null ? void 0 : _a.querySelector("img"));
      }),
      100
    );
    ["resize", "orientationchange"].forEach((event) => {
      window.addEventListener(event, refresh, { passive: true });
    });
  }
  function playVideo(video, fallbackImage) {
    try {
      video.pause();
      video.style.visibility = "hidden";
      fallbackImage.style.visibility = "visible";
    } catch (err) {
    }
    const play = video.play();
    if (typeof play !== "undefined") {
      video.style.visibility = "visible";
      fallbackImage.style.visibility = "hidden";
      play.then(() => {
        video.style.visibility = "visible";
        fallbackImage.style.visibility = "hidden";
      }).catch(() => {
        video.play().catch((err) => {
          video.pause();
          video.style.visibility = "hidden";
          fallbackImage.style.visibility = "visible";
        });
      });
    }
  }

  // ../story/src/card-canvas/index.ts
  var import_polyfill2 = __toESM(require_polyfill());

  // ../story/src/card-canvas/card-canvas-height.ts
  var import_fastdom5 = __toESM(require_fastdom());
  function renderCardCanvasHeight(el, items) {
    import_fastdom5.default.measure(() => {
      const viewportWidth = window.innerWidth;
      const tallestItem = items.reduce(
        (tallest, current) => tallest.clientHeight > current.clientHeight ? tallest : current,
        items[0]
      );
      const tallestHeight = tallestItem.clientHeight;
      import_fastdom5.default.mutate(() => {
        el.style.height = viewportWidth >= 900 ? `${tallestHeight}px` : null;
      });
    });
  }

  // ../story/src/card-canvas/card-canvas-item.ts
  var import_fastdom6 = __toESM(require_fastdom());
  var state3 = {
    items: [],
    lastSizes: /* @__PURE__ */ new WeakMap()
  };
  var MIN_CAPTION_WIDTH = 250;
  function initCardCanvasItems() {
    const items = getItems(document.documentElement);
    if (items.length === 0)
      return;
    state3.items = items;
    addToLoop(render);
  }
  function render() {
    state3.items.forEach((item) => renderItem(item));
  }
  function getItems(root) {
    const items = queryAll("[data-card-canvas-item]", root);
    return items.map(createItemFromEl2);
  }
  function createItemFromEl2(el) {
    return {
      el,
      img: queryAll("img", el),
      caption: el.querySelector(".CardCanvasItem__caption"),
      heightReferenceEl: el.parentElement.querySelector("[data-card-canvas-height-reference]")
    };
  }
  function renderItem(item) {
    renderItemMaxHeight(item).then(() => renderItemCaptionWidth(item)).catch(() => {
    });
  }
  function renderItemMaxHeight(item) {
    return new Promise((resolve, reject) => {
      import_fastdom6.default.measure(() => {
        const display = getComputedStyle(item.el).getPropertyValue("display");
        if (display === "none") {
          return reject();
        }
        const viewportWidth = window.innerWidth;
        const refElHeight = item.heightReferenceEl.clientHeight;
        const captionHeight = item.caption ? item.caption.clientHeight : 0;
        const sizeCache = state3.lastSizes.has(item) ? state3.lastSizes.get(item) : { width: 0, height: 0, captionHeight: 0 };
        if (viewportWidth === sizeCache.width && refElHeight === sizeCache.height && captionHeight === sizeCache.captionHeight) {
          return reject();
        } else {
          sizeCache.width = viewportWidth;
          sizeCache.height = refElHeight;
          sizeCache.captionHeight = captionHeight;
          state3.lastSizes.set(item, sizeCache);
        }
        const maxHeight = refElHeight - captionHeight;
        import_fastdom6.default.mutate(() => {
          item.img.forEach((img) => img.style.maxHeight = viewportWidth >= 900 ? `${maxHeight}px` : null);
          resolve();
        });
      });
    });
  }
  function renderItemCaptionWidth(item) {
    return new Promise((resolve) => {
      if (!item.caption)
        return resolve();
      function onImage(image, rect) {
        import_fastdom6.default.mutate(() => {
          const scaledSize = determineScaledSize(rect, {
            width: image.naturalWidth,
            height: image.naturalHeight
          });
          const maxWidth = Math.max(scaledSize.width, MIN_CAPTION_WIDTH);
          item.caption.style.maxWidth = `${maxWidth}px`;
          resolve();
        });
      }
      import_fastdom6.default.measure(() => {
        const img = item.el.querySelector("picture img");
        if (!img)
          return;
        const imgRect = img.getBoundingClientRect();
        if (img.naturalWidth > 0) {
          onImage(img, imgRect);
        } else {
          img.addEventListener("load", () => onImage(img, imgRect));
        }
      });
    });
  }
  function determineScaledSize(boundingBox, naturalSize) {
    const widthRatio = naturalSize.width / boundingBox.width;
    const heightRatio = naturalSize.height / boundingBox.height;
    const scaledRatio = Math.max(widthRatio, heightRatio);
    return {
      width: naturalSize.width / scaledRatio,
      height: naturalSize.height / scaledRatio
    };
  }

  // ../story/src/card-canvas/index.ts
  var state4 = { instances: /* @__PURE__ */ new Map(), isRunning: false };
  var triggerElements2 = /* @__PURE__ */ new WeakMap();
  function getStateByDOMElement2(el) {
    const instances = state4.instances;
    if (instances.has(el)) {
      return instances.get(el);
    }
    instances.set(el, {
      scrollContainer: el.parentElement,
      items: [],
      isRendering: false,
      machines: /* @__PURE__ */ new WeakMap()
    });
    return instances.get(el);
  }
  function createItemFromEl3(itemEl, index, itemEls) {
    const itemLength = 1 / itemEls.length;
    const showItemAt = index * itemLength;
    const showUntil = showItemAt + itemLength;
    const showDuringScrollIn = index === 0;
    const showDuringScrollOut = index === itemEls.length - 1;
    const data = {
      start: showItemAt,
      end: showUntil,
      showDuringScrollIn,
      showDuringScrollOut
    };
    return {
      itemEl,
      index,
      data
    };
  }
  function initCardCanvases() {
    initCardCanvasItems();
    const cardCanvases = queryAll("[data-card-canvas]");
    cardCanvases.forEach((el) => initCardCanvas(el, { doLazyload: true }));
    ["resize", "orientationchange"].forEach(
      (eventName) => window.addEventListener(eventName, updateLazyloadTriggerPositions2, {
        passive: true
      })
    );
  }
  function initCardCanvas(el, options, onItemShown) {
    const itemsEls = queryAll("[data-card-canvas-item]", el);
    if (itemsEls.length === 0) {
      return;
    }
    const newItems = itemsEls.map(createItemFromEl3);
    const state9 = getStateByDOMElement2(el);
    state9.items = newItems.reduce((finalItems, currentItem) => {
      const existingItem = state9.items.find((i) => i.itemEl === currentItem.itemEl);
      if (existingItem) {
        existingItem.data = currentItem.data;
      }
      return [...finalItems, existingItem || currentItem];
    }, []);
    state9.items.map((item) => options.doLazyload ? ensureItemIsLazyloadable2(item, el.parentElement) : item).filter((item) => {
      const existingMachine = state9.machines.get(item);
      return !existingMachine;
    }).forEach(
      (item) => state9.machines.set(
        item,
        new ItemMachine({
          item,
          classNames: {
            prime: "CardCanvasItem--isPrimed",
            active: "CardCanvasItem--isActive"
          },
          onItemShown(item2) {
            onItemShown && onItemShown(item2, state9.items.indexOf(item2));
          },
          shouldLinger(item2) {
            const otherItems = state9.items.filter((i) => i !== item2);
            const otherMachines = otherItems.map((i) => state9.machines.get(i));
            const hasActiveMachines = otherMachines.some((machine) => machine.isActive());
            return !hasActiveMachines;
          }
        })
      )
    );
    if (options.doLazyload)
      updateLazyloadTriggerPositions2();
    addToLoop(onTick2);
    return () => unLoop(onTick2);
  }
  function ensureItemIsLazyloadable2(item, columnEl) {
    const existingTriggerEl = triggerElements2.get(item.itemEl);
    if (!existingTriggerEl) {
      const newTriggerEl = document.createElement("div");
      newTriggerEl.classList.add("BackgroundScrollmation__lazyloadTriggerElement");
      newTriggerEl.setAttribute("data-item-index", String(item.index));
      triggerElements2.set(item.itemEl, newTriggerEl);
      columnEl.appendChild(newTriggerEl);
      const lazyloadable = {
        pictures: queryAll("picture", item.itemEl),
        container: item.itemEl.querySelector("[data-lazyload-container]"),
        trigger: newTriggerEl
      };
      initLazyloadable(lazyloadable);
    }
    return item;
  }
  function updateLazyloadTriggerPositions2() {
    (0, import_polyfill2.default)(state4.instances.values()).map((instance) => instance.items).map(
      (items) => items.map((item) => {
        const triggerElement = triggerElements2.get(item.itemEl);
        Object.assign(triggerElement.style, {
          position: "absolute",
          top: `${item.data.start * 100}%`
        });
      })
    );
  }
  function renderCardCanvas(instance, el) {
    renderScrollmation(instance);
    renderCardCanvasHeight(
      el,
      instance.items.map((i) => i.itemEl)
    );
  }
  function onTick2() {
    state4.instances.forEach(renderCardCanvas);
  }

  // ../story/src/display/index.ts
  function initDisplay() {
  }

  // ../story/src/dom-helpers/on-visibility-change.ts
  var HIDDEN = Symbol("hidden");
  var VISIBLE = Symbol("visible");
  function triggerCallback(cb, visibility, lastCalls) {
    const lastCall = lastCalls.find(([f]) => f === cb);
    const lastVisibility = lastCall ? lastCall[1] : false;
    if (!lastVisibility || lastVisibility !== visibility) {
      cb(visibility);
    }
    return lastCalls.filter(([f]) => f !== cb).concat([[cb, visibility]]);
  }
  function render2(state9) {
    let { lastCalls } = state9;
    observables2.forEach((obs) => {
      const isHidden = state9.isPageHidden || !state9.visibleElements.has(obs.element);
      const observableVisibility = isHidden ? HIDDEN : VISIBLE;
      lastCalls = triggerCallback(obs.cb, observableVisibility, lastCalls);
    });
    state9.lastCalls = lastCalls;
  }
  function addVisibleElement(visibleElements, element) {
    return visibleElements.add(element);
  }
  function removeVisibleElement(visibleElements, element) {
    visibleElements.delete(element);
    return visibleElements;
  }
  function initPageVisibilityChangeListener() {
    page_visibility_default.addVisibilityChangeListener(() => {
      const newState = { isPageHidden: isPageHidden() };
      setState(newState);
    });
  }
  function isPageHidden() {
    return page_visibility_default.isHidden();
  }
  var observables2 = [];
  var state5 = {
    isPageHidden: isPageHidden(),
    visibleElements: /* @__PURE__ */ new Set(),
    lastCalls: []
  };
  function onVisibilityChange(element, cb, triggerPoint = "nearly visible" /* Near */) {
    observables2.push({ cb, element });
    const watchOptions = { triggerPoint };
    const elementIsInView = (entry) => {
      const { visibleElements } = state5;
      const newVisibleElements = isVisible(entry) ? addVisibleElement(visibleElements, element) : removeVisibleElement(visibleElements, element);
      setState({ visibleElements: newVisibleElements });
    };
    observe(element, elementIsInView, watchOptions);
    return () => {
      unobserve(element, watchOptions);
      const index = observables2.findIndex((ob) => ob.element === element && ob.cb === cb);
      observables2.splice(index, 1);
    };
  }
  function setState(newState) {
    state5 = __spreadValues(__spreadValues({}, state5), newState);
    render2(state5);
  }
  function initOnVisible() {
    initPageVisibilityChangeListener();
  }

  // ../story/src/focal-point/index.ts
  var import_fastdom7 = __toESM(require_fastdom());
  function initFocalPoints() {
    window.addEventListener("resize", () => setFocalPoints(), { passive: true });
    setFocalPoints();
  }
  function setFocalPoints() {
    import_fastdom7.default.measure(() => {
      const orientation = display_container_default.getOrientation();
      import_fastdom7.default.mutate(() => {
        queryAll("[data-landscape-focal]").forEach((element) => {
          const focal = element.dataset[`${orientation}Focal`];
          if (focal) {
            const target = element.tagName === "PICTURE" ? element.querySelector("img") : element;
            target == null ? void 0 : target.style.setProperty("object-position", focal);
          }
        });
      });
    });
  }

  // ../story/src/footnote/index.ts
  var footnoteBalloon = null;
  var isFootnoteBalloonOpen = false;
  function initFootnotes() {
    initFootnoteBalloon();
    queryAll("[data-footnote]").forEach((highlight) => initFootnote(highlight));
  }
  function initFootnoteBalloon() {
    const article = query(".Theme-Story");
    if (article && (!footnoteBalloon || !query(".Theme-Footnote", article))) {
      footnoteBalloon = document.createElement("div");
      footnoteBalloon.classList.add("Theme-Footnote");
      footnoteBalloon.setAttribute("role", "tooltip");
      footnoteBalloon.setAttribute("aria-live", "polite");
      footnoteBalloon.setAttribute("aria-atomic", "true");
      article.appendChild(footnoteBalloon);
    }
  }
  function getScrollingParent() {
    return query("#editor-viewport") || document;
  }
  function getBottomOfHeader() {
    const header = query(".Theme-Header");
    if (!header)
      return 0;
    const headerHeightRaw = getComputedStyle(header).height;
    const headerHeight = parseInt(headerHeightRaw, 10);
    const nav = query(".Navigation__itemList");
    const navHeight = nav && window.innerWidth >= 1100 && nav.childNodes.length ? 36 : 0;
    const navEditor = query(".navbar-editor");
    const navEditorHeight = navEditor ? parseInt(getComputedStyle(navEditor).height, 10) : 0;
    return navEditorHeight + headerHeight + navHeight;
  }
  function initFootnote(highlight) {
    highlight.addEventListener("mouseover", () => showFootnote(highlight));
    highlight.addEventListener("touchstart", () => showFootnote(highlight));
    highlight.addEventListener("focus", () => {
      setTimeout(() => showFootnote(highlight), 100);
    });
    highlight.addEventListener("keydown", (e) => {
      switch (e.key) {
        case "Enter":
          if (isFootnoteBalloonOpen) {
            hideFootnote();
          } else {
            showFootnote(highlight);
          }
          break;
        case "ArrowUp":
          if (isFootnoteBalloonOpen) {
            e.preventDefault();
            footnoteBalloon.firstElementChild.scrollBy(0, -20);
          }
          break;
        case "ArrowDown":
          if (isFootnoteBalloonOpen) {
            e.preventDefault();
            footnoteBalloon.firstElementChild.scrollBy(0, 20);
          }
          break;
      }
    });
  }
  function showFootnote(highlight) {
    const highlightBounds = highlight.getBoundingClientRect();
    footnoteBalloon.style.display = "block";
    footnoteBalloon.innerHTML = decodeURIComponent(highlight.getAttribute("data-footnote"));
    const balloonBounds = footnoteBalloon.getBoundingClientRect();
    const isBalloonAbove = highlightBounds.top < getBottomOfHeader() + balloonBounds.height;
    const balloonTop = isBalloonAbove ? highlightBounds.bottom + 5 : highlightBounds.top - balloonBounds.height - 5;
    let balloonLeft = highlightBounds.left + highlightBounds.width / 2;
    if (balloonLeft - balloonBounds.width / 2 < 0) {
      balloonLeft = balloonBounds.width / 2 + 2;
    } else if (balloonLeft + balloonBounds.width / 2 > window.innerWidth) {
      balloonLeft = window.innerWidth - balloonBounds.width / 2 - 2;
    }
    footnoteBalloon.style.top = `${balloonTop}px`;
    footnoteBalloon.style.left = `${balloonLeft}px`;
    footnoteBalloon.classList.remove("Theme-Position-Top");
    footnoteBalloon.classList.remove("Theme-Position-Bottom");
    footnoteBalloon.classList.add(isBalloonAbove ? "Theme-Position-Top" : "Theme-Position-Bottom");
    document.addEventListener("mouseover", onLoseFocus);
    document.addEventListener("touchstart", onLoseFocus);
    getScrollingParent().addEventListener("scroll", onScroll3);
    isFootnoteBalloonOpen = true;
  }
  function hideFootnote() {
    isFootnoteBalloonOpen = false;
    footnoteBalloon.style.display = "";
    document.removeEventListener("mouseover", onLoseFocus);
    document.removeEventListener("touchstart", onLoseFocus);
    getScrollingParent().removeEventListener("scroll", onScroll3);
  }
  function onScroll3() {
    hideFootnote();
  }
  function onLoseFocus(event) {
    const target = event.target;
    if (!target.closest(".Theme-Layer-BodyText-Highlight") && !target.closest(".Theme-Footnote")) {
      hideFootnote();
    }
  }

  // ../story/src/hide-offscreen/index.ts
  var import_fastdom8 = __toESM(require_fastdom());
  var ONSCREEN_CLASS = "HideOffscreen__media--onscreen";
  function hide(elements) {
    import_fastdom8.default.mutate(() => {
      elements.forEach((e) => e.classList.remove(ONSCREEN_CLASS));
    });
  }
  function show(elements) {
    import_fastdom8.default.mutate(() => {
      elements.forEach((e) => {
        e.classList.add(ONSCREEN_CLASS);
        applyObjectFit([e]);
      });
    });
  }
  function initHideOffscreen() {
    queryAll(".HideOffscreen--container").map((container) => {
      return {
        container,
        children: queryAll(".HideOffscreen__media", container)
      };
    }).filter((offscreenContainer) => offscreenContainer.children && offscreenContainer.children.length > 0).forEach((offscreenContainer) => {
      onVisibilityChange(
        offscreenContainer.container,
        (entry) => {
          switch (entry) {
            case VISIBLE:
              show(offscreenContainer.children);
              break;
            case HIDDEN:
              hide(offscreenContainer.children);
              break;
          }
        },
        "on visibile" /* On */
      );
    });
  }

  // ../story/src/inline-media/index.ts
  function noop() {
  }

  // ../story/src/layout/flexbox-unsupported.ts
  function isFlexboxSupported() {
    const testEl = document.createElement("div");
    testEl.style.display = "flex";
    return testEl.style.display === "flex";
  }
  function initFlexboxUnsupported() {
    if (!isFlexboxSupported()) {
      document.documentElement.classList.add("Layout--flexboxUnsupported");
    }
  }

  // ../story/src/layout/index.ts
  function initLayout() {
    initFlexboxUnsupported();
  }

  // ../story/src/media-gallery/index.ts
  var import_fastdom9 = __toESM(require_fastdom());

  // ../story/src/media-gallery/Carousel.ts
  function initCarousel(gallery, isCenterCarousel) {
    const carouselImageContainer = gallery.querySelector(".carousel-inner");
    const carouselWrapper = gallery.querySelector(".carousel-container");
    const smallCarousel = gallery.querySelector(".carousel-image-Small");
    const captionsWrapper = gallery.querySelector(".carousel-captions");
    const nextButton = gallery.querySelector("#carousel-next-btn");
    const prevButton = gallery.querySelector("#carousel-prev-btn");
    const allSlides = Array.from(carouselImageContainer.querySelectorAll(".carousel-cell-item"));
    const itemWidths = [];
    let currentStartIndex = 0;
    function translateElement(element, transition, transform) {
      element.style.transition = transition;
      element.style.transform = transform;
    }
    let isRTL;
    const article = document.querySelector(".Theme-Story");
    if (article.dir === "rtl") {
      isRTL = true;
    }
    function getAspectRatioMediaWidth(media, carouselHeight) {
      let aspectRatio;
      if (media instanceof HTMLImageElement) {
        aspectRatio = media.naturalWidth / media.naturalHeight;
      } else if (media instanceof HTMLVideoElement) {
        aspectRatio = media.videoWidth / media.videoHeight;
      }
      return carouselHeight * aspectRatio;
    }
    function setContainerDimensionsForMedia(media, container) {
      const viewportWidth = window.innerWidth;
      const carouselHeight = smallCarousel ? carouselImageContainer.clientHeight - 60 : carouselImageContainer.clientHeight;
      const updateDimensions = () => {
        const mediaWidth = getAspectRatioMediaWidth(media, carouselHeight);
        itemWidths[parseInt(container.dataset.index)] = mediaWidth;
        if (viewportWidth < 900 && !smallCarousel) {
          container.style.width = "92vw";
          container.style.height = "100%";
          container.classList.add("active", "carousel-mobile-media");
        } else {
          container.classList.remove("carousel-mobile-media");
          container.style.width = `${mediaWidth}px`;
          container.style.height = `${carouselHeight}px`;
        }
      };
      function onLoad() {
        updateDimensions();
        if (isCenterCarousel) {
          centerInitialSlide();
        } else {
          translateElement(carouselImageContainer, "transform 0.5s ease", `translateX(0px)`);
          translateElement(captionsWrapper, "transform 0.5s ease", `translateX(0px)`);
        }
        updateActiveClasses();
      }
      if (media instanceof HTMLImageElement) {
        if (media.complete) {
          onLoad();
        } else {
          media.addEventListener("load", onLoad);
        }
      } else if (media instanceof HTMLVideoElement) {
        if (media.readyState >= 3) {
          onLoad();
        } else {
          media.addEventListener("loadeddata", onLoad);
        }
      }
      updateActiveClasses();
    }
    function centerInitialSlide() {
      const viewportWidth = window.innerWidth;
      if (!carouselImageContainer)
        return;
      if (viewportWidth < 900 && !smallCarousel) {
        translateElement(carouselImageContainer, "none", `translateX(${currentStartIndex * 92}vw)`);
        translateElement(captionsWrapper, "none", `translateX(${currentStartIndex * 92}vw)`);
      } else {
        const offset = gallery.querySelector(".carousel-container").offsetWidth / 2 - itemWidths[currentStartIndex] / 2;
        translateElement(carouselImageContainer, "none", `translateX(${isRTL ? -offset : offset}px)`);
        translateElement(
          captionsWrapper,
          "none",
          `translateX(${isRTL ? -(offset + 15 * currentStartIndex) : offset + 15 * currentStartIndex}px)`
        );
      }
    }
    function updateActiveClasses() {
      const allCaptions = gallery.querySelectorAll("[data-media-long-captions]");
      const viewportWidth = window.innerWidth;
      const allEmpty = Array.from(allCaptions).every((caption) => caption.textContent.trim() === "");
      allSlides.forEach((slide, index) => {
        const caption = allCaptions[index];
        if (viewportWidth < 900 && !smallCarousel) {
          caption.classList.add("mobile-caption");
          caption.style.width = `92vw`;
          caption.classList.remove("carousel-center-caption");
        } else {
          if (isCenterCarousel) {
            caption.classList.add("carousel-center-caption");
            caption.classList.remove("mobile-caption");
            caption.style.width = `${itemWidths[index]}px`;
          } else {
            caption.classList.remove("mobile-caption");
            caption.classList.remove("carousel-center-caption");
            caption.style.width = "92vw";
          }
        }
        if (index !== currentStartIndex && !allEmpty) {
          slide.classList.add("non-active-fade-out");
          caption.classList.add("fade-out-caption", "hide-caption");
          caption.classList.remove("active-caption");
        } else {
          slide.classList.add("active");
          slide.classList.remove("non-active-fade-out");
          caption.classList.add("active-caption");
          caption.classList.remove("fade-out-caption", "hide-caption");
        }
      });
      nextButton.style.display = !isRTL ? currentStartIndex === allSlides.length - 1 ? "none" : "block" : currentStartIndex === 0 ? "none" : "block";
      prevButton.style.display = !isRTL ? currentStartIndex === 0 ? "none" : "block" : currentStartIndex === allSlides.length - 1 ? "none" : "block";
    }
    function updateCarouselImageDimensions() {
      allSlides.forEach((container, index) => {
        container.dataset.index = String(index);
        const image = container.querySelector("img");
        const video = container.querySelector("video");
        if (video && !video.paused) {
          video.style.visibility = "visible";
        }
        setContainerDimensionsForMedia(image, container);
      });
      currentStartIndex = 0;
      const allItemsWidths = itemWidths.reduce((acc, width) => acc + width, 0);
      const carousel = gallery.querySelector(".MediaGallery_carousel");
      if (itemWidths[currentStartIndex] < carousel.clientWidth - 20 && !isRTL) {
        carousel.classList.add("fade-at-end");
      } else {
        carousel.classList.remove("fade-at-end");
      }
      if (allItemsWidths < window.innerWidth) {
        carousel.classList.add("center-carousel");
        captionsWrapper.style.display = "none";
        prevButton.style.display = "none";
        nextButton.style.display = "none";
        carousel.classList.remove("fade-at-end");
        translateElement(carouselImageContainer, "transform 0.5s ease", `translateX(0px)`);
        allSlides.forEach((slide) => {
          slide.classList.add("active");
          captionsWrapper.classList.add("active-caption");
          slide.classList.remove("non-active-fade-out");
          captionsWrapper.classList.remove("non-active-fade-out");
        });
      } else {
        captionsWrapper.style.display = "flex";
        carousel.classList.remove("center-carousel");
        updateActiveClasses();
      }
    }
    function pxToVw() {
      const viewportWidth = window.innerWidth;
      return 15 / viewportWidth * 100;
    }
    function navigateSlide(direction) {
      const nextIndex = (currentStartIndex + (direction === "next" ? 1 : -1) + itemWidths.length) % itemWidths.length;
      const nextItemWidth = itemWidths[nextIndex];
      const totalPreviousWidth = itemWidths.slice(0, nextIndex).reduce((acc, width) => acc + width + 15, 0);
      const viewportWidth = window.innerWidth;
      if (viewportWidth < 900 && !smallCarousel) {
        translateElement(
          carouselImageContainer,
          "transform 0.5s ease",
          `translateX(${isRTL ? nextIndex * 92 + pxToVw() * nextIndex : -(nextIndex * 92 + pxToVw() * nextIndex)}vw)`
        );
        translateElement(
          captionsWrapper,
          "transform 0.5s ease",
          `translateX(${isRTL ? nextIndex * 92 + pxToVw() * nextIndex : -(nextIndex * 92 + pxToVw() * nextIndex)}vw)`
        );
      } else {
        if (isCenterCarousel) {
          const offset = gallery.querySelector(".carousel-container").offsetWidth / 2 - nextItemWidth / 2 - totalPreviousWidth;
          translateElement(carouselImageContainer, "transform 0.5s ease", `translateX(${isRTL ? -offset : offset}px)`);
          translateElement(captionsWrapper, "transform 0.5s ease", `translateX(${isRTL ? -offset : offset + 15 * nextIndex}px)`);
        } else {
          translateElement(
            carouselImageContainer,
            "transform 0.5s ease",
            `translateX(${isRTL ? totalPreviousWidth : -totalPreviousWidth}px)`
          );
          translateElement(captionsWrapper, "transform 0.5s ease", `translateX(${isRTL ? nextIndex * 92 : -nextIndex * 92}vw)`);
        }
      }
      currentStartIndex = nextIndex;
      updateActiveClasses();
    }
    nextButton.addEventListener("click", () => navigateSlide(isRTL ? "prev" : "next"));
    prevButton.addEventListener("click", () => navigateSlide(isRTL ? "next" : "prev"));
    function getTouchPos(touchEvent) {
      return {
        x: touchEvent.touches[0].clientX,
        y: touchEvent.touches[0].clientY
      };
    }
    let swipeStartCoords = null;
    let swipeStart = -1;
    carouselWrapper.addEventListener(
      "touchstart",
      (event) => {
        swipeStartCoords = getTouchPos(event);
        swipeStart = swipeStartCoords.x;
      },
      { passive: true }
    );
    carouselWrapper.addEventListener("touchmove", (event) => {
      const moveCoords = getTouchPos(event);
      const diffX = moveCoords.x - swipeStartCoords.x;
      const diffY = moveCoords.y - swipeStartCoords.y;
      if (Math.abs(diffX) > Math.abs(diffY) && event.cancelable) {
        event.preventDefault();
      }
    });
    carouselWrapper.addEventListener(
      "touchend",
      (event) => {
        if (swipeStart === -1)
          return;
        const swipeLength = event.changedTouches[0].clientX - swipeStart;
        const threshold = window.innerWidth * 0.1;
        if (swipeLength < -threshold && currentStartIndex < itemWidths.length - 1) {
          navigateSlide("next");
        } else if (swipeLength > threshold && currentStartIndex > 0) {
          navigateSlide("prev");
        }
        swipeStart = -1;
      },
      { passive: true }
    );
    function initializeCarousel() {
      return __async(this, null, function* () {
        const mediaArray = allSlides.map((slide) => {
          const img = slide.querySelector("img");
          const video = slide.querySelector("video");
          return { img, video };
        });
        yield Promise.all(
          mediaArray.map(({ img, video }) => {
            return new Promise((resolve) => {
              if (img) {
                if (img.complete) {
                  resolve();
                } else {
                  img.addEventListener("load", () => resolve());
                  img.src = img.src;
                }
              } else if (video) {
                if (video.readyState >= 3) {
                  resolve();
                } else {
                  video.addEventListener("loadeddata", () => resolve());
                  video.src = video.src;
                }
              }
            });
          })
        );
        updateCarouselImageDimensions();
      });
    }
    window.addEventListener("DOMContentLoaded", initializeCarousel);
    let previousHeight = window.innerHeight;
    window.addEventListener("resize", () => {
      const currentHeight = window.innerHeight;
      if (Math.abs(currentHeight - previousHeight) > 100) {
        updateCarouselImageDimensions();
        previousHeight = currentHeight;
      }
    });
  }

  // ../story/src/media-gallery/Lightbox.ts
  var Lightbox = class _Lightbox {
    constructor(element) {
      this.element = element;
      this.counter = element.querySelector("[aria-live]");
      this.element.parentElement.removeChild(this.element);
      document.body.appendChild(this.element);
      this.currentMediaIndex = 0;
      this.media = queryAll("[data-media-gallery-index]", this.element);
      this.element.addEventListener("click", () => {
        this.close();
      });
      queryAll("img, .Videoplayer, .Theme-Caption", this.element).forEach((media) => {
        media.addEventListener("click", (e) => e.stopPropagation());
      });
      const prevButton = query('[data-action="previous"]', this.element);
      if (prevButton) {
        prevButton.addEventListener("click", (event) => {
          event.stopPropagation();
          this.prev();
        });
      }
      const nextButton = query('[data-action="next"]', this.element);
      if (nextButton) {
        nextButton.addEventListener("click", (event) => {
          event.stopPropagation();
          this.next();
        });
      }
      const closeButton = query('[data-action="close"]', this.element);
      closeButton.addEventListener("click", (event) => {
        event.stopPropagation();
        this.close();
      });
      this.element.addEventListener("touchmove", (event) => event.preventDefault());
      let swipeStart = -1;
      queryAll("img, .Videoplayer", this.element).forEach((media) => {
        media.addEventListener("touchstart", (event) => {
          swipeStart = event.touches[0].clientX;
        });
        media.addEventListener("touchend", (event) => {
          const swipeLength = event.changedTouches[0].clientX - swipeStart;
          const threshold = window.innerWidth * 0.1;
          if (swipeLength < -threshold) {
            this.next();
          } else if (swipeLength > threshold) {
            this.prev();
          }
          swipeStart = -1;
        });
      });
    }
    /**
     * Get any focasuable elements inside the lightbox
     */
    getFocusable() {
      const controls = queryAll("*[data-action]", this.element);
      const videoPlayer = query(`[data-media-gallery-index="${this.currentMediaIndex}"].active [tabindex]`, this.element);
      return controls.concat(videoPlayer).filter((f) => f);
    }
    /**
     * Open the lightbox at a given index
     * @param index
     * @param onClose
     */
    open(index, onClose) {
      var _a;
      (_a = _Lightbox.current) == null ? void 0 : _a.close(false);
      queryAll("video", this.element).forEach((video) => video.setAttribute("playsinline", "true"));
      queryAll(
        [
          ".DeviceDetect--isEdge .MediaGallery--lightbox .plyr__progress--seek",
          ".DeviceDetect--isIE .MediaGallery--lightbox .plyr__progress--seek"
        ].join(",")
      ).forEach((seek) => {
        seek.style.setProperty("width", "0");
        setTimeout(() => seek.style.removeProperty("width"), 100);
      });
      this.goToIndex(index);
      this.element.classList.add("MediaGallery--lightbox--open");
      _Lightbox.current = this;
      document.body.classList.add("Body--hasLightbox");
      this.getFocusable()[1].focus();
      this.onClose = onClose;
    }
    /**
     * Close the lightbox
     * @param runOnClose
     */
    close(runOnClose = true) {
      this.element.classList.remove("MediaGallery--lightbox--open");
      document.body.classList.remove("Body--hasLightbox");
      queryAll("video", this.element).forEach((video) => video.pause());
      if (runOnClose && typeof this.onClose === "function")
        this.onClose();
      _Lightbox.current = null;
    }
    /**
     * Go to the previous item
     */
    prev() {
      const prevIndex = this.currentMediaIndex === 0 ? this.media.length - 1 : this.currentMediaIndex - 1;
      this.goToIndex(prevIndex);
    }
    /**
     * Go to the next item
     */
    next() {
      const nextIndex = this.currentMediaIndex === this.media.length - 1 ? 0 : this.currentMediaIndex + 1;
      this.goToIndex(nextIndex);
    }
    /**
     * Go to a given indexed item
     * @param index
     */
    goToIndex(index) {
      this.media[this.currentMediaIndex].classList.remove("active");
      queryAll("video", this.element).forEach((video) => video.pause());
      this.currentMediaIndex = index;
      const media = query(`[data-media-gallery-index="${this.currentMediaIndex}"]`, this.element);
      media.classList.add("active");
      this.counter.innerText = `Item ${index + 1} of ${this.media.length}`;
    }
  };

  // ../story/src/media-gallery/index.ts
  function initMediaGalleries() {
    const lightboxes = {};
    queryAll("[data-media-gallery-lightbox]").forEach((element) => {
      const id = element.getAttribute("data-media-gallery-lightbox");
      lightboxes[id] = new Lightbox(element);
    });
    queryAll("[data-media-gallery]").forEach((gallery) => {
      const id = gallery.getAttribute("data-media-gallery");
      queryAll("[data-cell-index]", gallery).forEach((cell) => {
        cell.addEventListener("click", () => onCellClick(id, cell));
        cell.addEventListener("keydown", (e) => {
          if (Lightbox.current)
            return;
          if (e.code === "Enter") {
            e.preventDefault();
            e.stopPropagation();
            onCellClick(id, cell);
          }
        });
      });
    });
    window.removeEventListener("keydown", onKeyDown);
    window.addEventListener("keydown", onKeyDown);
    function onCellClick(galleryId, cell) {
      const openToIndex = parseInt(cell.getAttribute("data-cell-index"), 10);
      pauseVideos();
      lightboxes[galleryId].open(openToIndex, () => {
        unpauseVideos();
        cell.focus();
      });
    }
  }
  function onKeyDown(event) {
    if (!Lightbox.current)
      return;
    if (display_container_default.getHeight() === window.screen.height)
      return;
    switch (event.code) {
      case "Tab":
        const focusable = Lightbox.current.getFocusable();
        const first = focusable[0];
        const last = focusable[focusable.length - 1];
        if (!focusable.includes(document.activeElement) || !event.shiftKey && document.activeElement === last) {
          event.preventDefault();
          event.stopPropagation();
          first.focus();
        } else if (event.shiftKey && document.activeElement === first) {
          event.preventDefault();
          event.stopPropagation();
          last.focus();
        }
        break;
      case "Enter":
        if (document.activeElement.className.includes("plyr")) {
          event.preventDefault();
          event.stopPropagation();
          document.activeElement.querySelector('[data-plyr="fullscreen"]').click();
        }
        break;
      case "ArrowRight":
        event.preventDefault();
        event.stopPropagation();
        if (!document.activeElement.className.includes("plyr")) {
          Lightbox.current.next();
        }
        break;
      case "ArrowLeft":
        event.preventDefault();
        event.stopPropagation();
        if (!document.activeElement.className.includes("plyr")) {
          Lightbox.current.prev();
        }
        break;
      case "Escape":
        event.preventDefault();
        event.stopPropagation();
        Lightbox.current.close();
        break;
    }
  }
  function pauseVideos() {
    queryAll("[data-media-gallery] video").forEach((video) => video.pause());
  }
  function unpauseVideos() {
    queryAll("[data-media-gallery] video").forEach((video) => {
      import_fastdom9.default.measure(() => {
        const bounds = video.getBoundingClientRect();
        if (bounds.top < display_container_default.getHeight() && bounds.bottom > 0) {
          video.play();
        }
      });
    });
  }
  queryAll("[data-media-carousel]").forEach((gallery) => {
    initCarousel(gallery, false);
  });
  queryAll("[data-media-center-carouse]").forEach((centerCarousel) => {
    initCarousel(centerCarousel, true);
  });

  // ../story/src/ms-smooth-scroll/index.ts
  function disableSmoothScroll() {
    const { isIE, isEdge } = getDeviceInfo();
    if (isIE || isEdge) {
      window.addEventListener("mousewheel", (event) => {
        const { wheelDelta, wheelDeltaY } = event;
        event.preventDefault();
        linearSmoothScrollBy(1 - (wheelDeltaY || wheelDelta));
      });
      document.body.addEventListener("keydown", (event) => {
        switch (event.key) {
          case "PageUp":
            event.preventDefault();
            linearSmoothScrollBy(window.innerHeight * -0.8);
            break;
          case "PageDown":
            event.preventDefault();
            linearSmoothScrollBy(window.innerHeight * 0.8);
            break;
          case "ArrowUp":
            event.preventDefault();
            linearSmoothScrollBy(-120);
            break;
          case "ArrowDown":
            event.preventDefault();
            linearSmoothScrollBy(120);
            break;
          default:
            return;
        }
      });
    }
  }
  function linearSmoothScrollBy(y, milliseconds = 100) {
    let steps = 10;
    const stepY = y / steps;
    const interval = setInterval(() => {
      window.scrollTo(0, Math.round(window.pageYOffset + stepY));
      if (steps > 0) {
        steps--;
      } else {
        clearInterval(interval);
      }
    }, milliseconds / steps);
  }

  // ../story/src/navigation/index.ts
  var import_zenscroll = __toESM(require_zenscroll());

  // ../story/src/navigation/active-navitem-tracker.ts
  var import_fastdom10 = __toESM(require_fastdom());
  var ACTIVE_NAVITEM_CLASS = "Theme-ActiveNavigationBarItem";
  function getTargettedNavItems(navItems) {
    return navItems.reduce((targets, navItem) => {
      const href = navItem.getAttribute("href");
      if (href.indexOf("#") !== 0) {
        return targets;
      }
      const htmlId = href.replace(/^#/, "");
      try {
        const target = document.getElementById(htmlId);
        if (!target) {
          console.warn(`navigation: Couldn't locate target via nav item id '${htmlId}'.`);
        }
        targets.push({ target, navItem });
      } catch (err) {
        console.warn(`navigation: Bad target via nav item selector ${htmlId}.`);
      }
      return targets;
    }, []);
  }
  function deactivateNavItems(navItems) {
    navItems.forEach(deactivateNavItem);
  }
  function deactivateNavItem(navItem) {
    navItem.parentElement.classList.remove(ACTIVE_NAVITEM_CLASS);
  }
  function activateNavItem(navItem) {
    navItem.parentElement.classList.add(ACTIVE_NAVITEM_CLASS);
  }
  function calculateMostVisibleElement(targettedNavItems) {
    const THRESHOLD = display_container_default.getHeight() / 2;
    return targettedNavItems.find((item) => {
      const rect = item.target.getBoundingClientRect();
      const isTitleSectionTarget = item.target.className.match(/\bTheme-TitleSection\b/) !== null;
      return rect.top < THRESHOLD && (isTitleSectionTarget || rect.bottom > THRESHOLD);
    });
  }
  var state6 = { lastMostVisible: false };
  function render3(targettedNavItems) {
    import_fastdom10.default.measure(() => {
      const mostVisible = calculateMostVisibleElement(targettedNavItems.slice().reverse());
      if (state6.lastMostVisible === mostVisible)
        return;
      import_fastdom10.default.mutate(() => {
        deactivateNavItems(targettedNavItems.map((i) => i.navItem));
        if (mostVisible) {
          activateNavItem(mostVisible.navItem);
        }
        state6.lastMostVisible = mostVisible;
      });
    });
  }
  function initNavItemTracker(navItems) {
    const targettedNavItems = getTargettedNavItems(navItems);
    if (targettedNavItems.length === 0)
      return;
    const update2 = () => render3(targettedNavItems);
    ["scroll", "resize"].forEach((eventName) => window.addEventListener(eventName, update2));
    setTimeout(update2, 1e3);
    update2();
  }

  // ../story/src/navigation/burger-nav.ts
  function initBurgerNav() {
    const navs = queryAll(".Navigation");
    const burgers = queryAll(".Navigation__hamburger");
    if (!navs.length || !burgers.length) {
      return;
    }
    const nav = navs[0];
    const burger = burgers[0];
    const navItems = queryAll(".Navigation__item", nav);
    if (navItems.length === 0) {
      burger.classList.add("hidden");
      return;
    }
    listenToBurger(burger, nav);
    listenToNavItems(navItems, nav, burger);
    enableBurger(burger);
  }
  function listenToBurger(burger, nav) {
    function handleLastLinkTab(firstLink) {
      return (e) => {
        if (e.key === "Tab" && !e.shiftKey) {
          e.preventDefault();
          firstLink.focus();
        }
      };
    }
    function handleFirstLinkTab(lastLink) {
      return (e) => {
        if (e.key === "Tab" && e.shiftKey) {
          e.preventDefault();
          lastLink.focus();
        }
      };
    }
    burger.addEventListener("click", (event) => {
      event.preventDefault();
      nav.classList.toggle("Navigation--isActive");
      const isNowActive = nav.classList.contains("Navigation--isActive");
      const ariaExpandedValue = isNowActive ? "true" : "false";
      burger.setAttribute("aria-expanded", ariaExpandedValue);
      const navLinks = queryAll("nav.Theme-NavigationBar a");
      const firstLink = navLinks.at(0);
      const lastLink = navLinks.at(-1);
      const firstLinkTabHandler = firstLink ? handleFirstLinkTab(lastLink) : null;
      const lastLinkTabHandler = lastLink ? handleLastLinkTab(firstLink) : null;
      function removeListenerOnBurgerClose() {
        nav.classList.remove("Navigation--isActive");
        burger.setAttribute("aria-expanded", "false");
        burger.focus();
        firstLink == null ? void 0 : firstLink.removeEventListener("keydown", firstLinkTabHandler);
        lastLink == null ? void 0 : lastLink.removeEventListener("keydown", lastLinkTabHandler);
      }
      function handleBurgerOutsideClick(event2) {
        if (!event2.target.closest(".Navigation__hamburger") && !nav.contains(event2.target)) {
          removeListenerOnBurgerClose();
        }
      }
      function handleBurgerEscapeKey(event2) {
        if (event2.key === "Escape") {
          removeListenerOnBurgerClose();
        }
      }
      if (isNowActive) {
        firstLink == null ? void 0 : firstLink.focus();
        firstLink == null ? void 0 : firstLink.addEventListener("keydown", firstLinkTabHandler);
        lastLink == null ? void 0 : lastLink.addEventListener("keydown", lastLinkTabHandler);
        document.addEventListener("click", handleBurgerOutsideClick);
        document.addEventListener("keydown", handleBurgerEscapeKey);
      } else {
        firstLink == null ? void 0 : firstLink.removeEventListener("keydown", firstLinkTabHandler);
        lastLink == null ? void 0 : lastLink.removeEventListener("keydown", lastLinkTabHandler);
        document.removeEventListener("click", handleBurgerOutsideClick);
        document.removeEventListener("keydown", handleBurgerEscapeKey);
        burger.focus();
      }
    });
  }
  function enableBurger(burger) {
    burger.classList.remove("Navigation__hamburger--initializing");
  }
  function listenToNavItems(navItems, nav, burger) {
    const onNavItemClick = () => {
      nav.classList.remove("Navigation--isActive");
      burger.setAttribute("aria-expanded", "false");
    };
    navItems.forEach((i) => i.addEventListener("click", onNavItemClick));
  }

  // ../story/src/navigation/index.ts
  var NAVITEMS_SELECTOR = "[data-story-nav-item]";
  var SCROLL_TO_FUDGE_FACTOR = -2;
  function getFixedStoryElementsHeight() {
    const fixedStoryElements = queryAll("[data-fixed-story-element]");
    return fixedStoryElements.reduce((height, el) => height + el.getBoundingClientRect().height, SCROLL_TO_FUDGE_FACTOR);
  }
  function initNavItems(selector = NAVITEMS_SELECTOR) {
    const navItems = queryAll(selector);
    initNavItemTracker(navItems);
    initBurgerNav();
    const fixedStoryElementsHeight = getFixedStoryElementsHeight();
    import_zenscroll.default.setup(500, fixedStoryElementsHeight);
  }

  // ../story/src/parent-width/index.ts
  var import_fastdom11 = __toESM(require_fastdom());

  // ../story/src/dom-helpers/inner-size.ts
  var DIMENSION_STYLE_KEYS = {
    ["clientWidth" /* Width */]: ["padding-left", "padding-right", "border-left-width", "border-right-width"],
    ["clientHeight" /* Height */]: ["padding-top", "padding-bottom", "border-top-width", "border-bottom-width"]
  };
  function getInnerWidth(element) {
    return getInnerDimension(element, "clientWidth" /* Width */);
  }
  function getInnerHeight(element) {
    return getInnerDimension(element, "clientHeight" /* Height */);
  }
  function readDimension(element, dimension) {
    switch (dimension) {
      case "clientWidth" /* Width */:
        return element.clientWidth;
      case "clientHeight" /* Height */:
        return element.clientHeight;
    }
  }
  function getInnerDimension(element, dimension) {
    const styleKeys = DIMENSION_STYLE_KEYS[dimension];
    try {
      const computedStyles = window.getComputedStyle(element);
      const totalPadding = styleKeys.reduce((totalPadding2, prop) => {
        const paddingValue = computedStyles.getPropertyValue(prop);
        return totalPadding2 + pxValueToNumber(paddingValue);
      }, 0);
      return readDimension(element, dimension) - totalPadding;
    } catch (e) {
      throw new Error(`Couldn't get styles for element ${element} in getInnerDimension`);
    }
  }
  function pxValueToNumber(px2) {
    return parseInt(px2, 10);
  }

  // ../story/src/parent-width/index.ts
  var elementResizeDetectorMaker = require_element_resize_detector();
  var state7 = {
    elements: []
  };
  var elementResizeDetector = elementResizeDetectorMaker();
  function addParentWidthElement(element) {
    const { elements } = state7;
    if (elements.findIndex((f) => f.element === element) > -1) {
      return;
    }
    const resizableElement = {
      element,
      onResize() {
        updateElement(element);
      }
    };
    elements.push(resizableElement);
    updateElement(element, true);
    elementResizeDetector.listenTo(resizableElement.element.parentElement, resizableElement.onResize);
    initParentWidth();
  }
  function updateParentWidths() {
    const { elements } = state7;
    elements.forEach((el) => updateElement(el.element));
  }
  function updateElement(element, force = false) {
    import_fastdom11.default.measure(() => {
      const parent = element.parentNode;
      const parentWidth = parent ? getInnerWidth(parent) : -1;
      const elWidth = element.clientWidth;
      if (parentWidth !== elWidth || force) {
        import_fastdom11.default.mutate(() => {
          element.style.width = `${parentWidth}px`;
        });
      }
    });
  }
  function initParentWidth() {
    const els = document.getElementsByClassName("ParentWidth");
    Array.prototype.forEach.call(els, addParentWidthElement);
    updateParentWidths();
  }

  // ../story/src/scrollymoly/index.ts
  var import_fastdom12 = __toESM(require_fastdom());
  var running = false;
  function initScrollymoly(getTopOffset) {
    if (getTopOffset)
      scrollymoly.getTopOffset = getTopOffset;
    const moles = queryAll("[data-scrollymoly]");
    moles.forEach(initScrollymole);
    window.addEventListener("orientationchange", () => render4());
    if (!running) {
      running = true;
      window.addEventListener("resize", updateTopOffsets);
      addToLoop(render4);
    }
  }
  var scrollymoly = {
    moles: [],
    getTopOffset(el) {
      if (!document.documentElement) {
        console.error("Document element is not available.");
        return 0;
      }
      return el.getBoundingClientRect().top + document.documentElement.scrollTop;
    }
  };
  function initScrollymole(moleEl) {
    const effectsJson = moleEl.getAttribute("data-scrollymoly");
    try {
      const effects2 = JSON.parse(effectsJson).map((effect) => __spreadProps(__spreadValues({}, effect), {
        offset: Number.isFinite(effect.offset) ? effect.offset : 0
      }));
      const basisEl = moleEl.closest("[data-scrollymoly-basis]");
      const topOffset = scrollymoly.getTopOffset(basisEl);
      pushMole({ element: moleEl, basisEl, effects: effects2, topOffset, state: {} });
    } catch (e) {
      console.error(e);
    }
  }
  function pushMole(mole) {
    scrollymoly.moles.push(mole);
    render4();
  }
  function render4() {
    scrollymoly.moles.map(renderMole);
  }
  function updateTopOffsets() {
    scrollymoly.moles.forEach((mole) => {
      mole.topOffset = scrollymoly.getTopOffset(mole.basisEl);
    });
  }
  function renderMole(mole) {
    return new Promise((resolve, reject) => {
      import_fastdom12.default.measure(() => {
        mole.effects.forEach((effect) => {
          if (effect.kind in effects) {
            effects[effect.kind](mole, effect, resolve);
          } else {
            console.error(`Unknown effect type '${effect.kind}'`);
            resolve();
          }
        });
      });
    });
  }
  function calculatePercentage(effect, basisEl, topOffset) {
    const boundingRect = basisEl.firstElementChild.getBoundingClientRect();
    const threshold = effect.kind === "fadeIn" /* FadeIn */ ? boundingRect.top : boundingRect.bottom;
    const minimumOpacityPosition = display_container_default.getHeight() * effect.end;
    const maximumOpacityPosition = minimumOpacityPosition + Math.min(boundingRect.height, display_container_default.getHeight() * effect.start);
    const percentage = threshold > maximumOpacityPosition ? 1 : (threshold - minimumOpacityPosition) / (maximumOpacityPosition - minimumOpacityPosition);
    return Math.round(percentage * 100) / 100;
  }
  var effects = {
    fadeOut(mole, effect, resolve) {
      const percentage = calculatePercentage(effect, mole.basisEl, mole.topOffset);
      const opacity = Math.max(0, Math.min(1, percentage));
      if (mole.state.lastOpacity === opacity)
        return resolve();
      import_fastdom12.default.mutate(() => {
        mole.state.lastOpacity = opacity;
        mole.element.style.opacity = opacity.toString();
        resolve();
      });
    },
    fadeIn(mole, effect, resolve) {
      const percentage = calculatePercentage(effect, mole.basisEl, mole.topOffset);
      const opacity = Math.max(0, Math.min(1, 1 - percentage));
      if (mole.state.lastOpacity === opacity)
        return resolve();
      import_fastdom12.default.mutate(() => {
        mole.state.lastOpacity = opacity;
        mole.element.style.opacity = opacity.toString();
        resolve();
      });
    }
  };

  // ../story/src/social-share/index.ts
  var CONFIG = {
    facebook: {
      networkName: "Facebook",
      shareAction: "Share",
      popupWidth: 600,
      popupHeight: 420
    },
    twitter: {
      networkName: "Twitter",
      shareAction: "Tweet",
      popupWidth: 600,
      popupHeight: 250
    },
    linkedin: {
      networkName: "LinkedIn",
      shareAction: "Share",
      popupWidth: 600,
      popupHeight: 250
    }
  };
  function showPopup(url, config) {
    const left = Math.round(display_container_default.getWidth() / 2 - config.popupWidth / 2);
    let top = 0;
    if (display_container_default.getHeight() > config.popupHeight) {
      top = Math.round(display_container_default.getHeight() / 3 - config.popupHeight / 2);
    }
    const popupOptions = {
      left,
      top,
      width: config.popupWidth,
      height: config.popupHeight,
      personalbar: 0,
      toolbar: 0,
      scrollbars: 1,
      resizable: 1
    };
    const serializedPopupOptions = Object.keys(popupOptions).map((key) => `${key}=${popupOptions[key]}`).join(",");
    const windowName = "social-widget-" + config.networkName.replace(/\s+/, "-");
    const popup = window.open(url, windowName, serializedPopupOptions);
    if (popup) {
      popup.focus();
    } else {
      location.href = url;
    }
  }
  function onButtonClick(event) {
    event.preventDefault();
    const button = event.currentTarget;
    const buttonType = button.getAttribute("data-social-share");
    const buttonConfig = CONFIG[buttonType];
    const popupUrl = button.href;
    showPopup(popupUrl, buttonConfig);
  }
  function initButton(button) {
    const buttonType = button.getAttribute("data-social-share");
    if (buttonType in CONFIG) {
      button.addEventListener("click", onButtonClick, { passive: false });
    } else {
      console.error(`Social Share button of type ${buttonType} is not supported.`);
    }
  }
  function initSocialShareButtons(selector = "[data-social-share]") {
    const buttons = queryAll(selector);
    buttons.forEach(initButton);
  }

  // ../story/src/audioboss/index.ts
  var currentAudioSource = {};
  function makeAudioSourceListener(pauseFn, instance) {
    return () => {
      if (currentAudioSource.pause && currentAudioSource.instance !== instance) {
        currentAudioSource.pause();
      }
      currentAudioSource.pause = () => {
        delete currentAudioSource.pause;
        pauseFn();
      };
      currentAudioSource.instance = instance;
    };
  }

  // ../story/src/soundcloud/index.ts
  var API_SCRIPT_SRC = "https://w.soundcloud.com/player/api.js";
  var isApiScriptLoaded = false;
  var CLASSNAME_INITIALIZING = "SoundCloudPlayer--initializing";
  function ensureApiScriptLoaded(cb) {
    if (isApiScriptLoaded) {
      return cb();
    }
    const script = document.createElement("script");
    script.type = "text/javascript";
    script.async = true;
    script.addEventListener("load", cb);
    script.src = API_SCRIPT_SRC;
    const insertAnchor = document.getElementsByTagName("script")[0];
    insertAnchor.parentNode.insertBefore(script, insertAnchor);
  }
  function initializePlayer(element) {
    const src = element.getAttribute("data-src");
    const height = element.getAttribute("data-height");
    const iframe = makeSoundCloudWidget({ src, height });
    iframe.addEventListener("load", () => {
      ensureApiScriptLoaded(() => {
        element.classList.remove(CLASSNAME_INITIALIZING);
        const widget = new SC.Widget(iframe);
        setupAudioBoss(widget, iframe);
      });
    });
    element.appendChild(iframe);
  }
  function setupAudioBoss(widget, element) {
    const pause = widget.pause.bind(widget);
    widget.bind(SC.Widget.Events.READY, () => {
      widget.bind(SC.Widget.Events.PLAY, makeAudioSourceListener(pause, element));
    });
  }
  function makeSoundCloudWidget(options) {
    const iframe = document.createElement("iframe");
    const attributes = {
      width: "100%",
      scrolling: "no",
      frameborder: "no",
      src: options.src,
      height: options.height
    };
    Object.keys(attributes).forEach((key) => iframe.setAttribute(key, attributes[key]));
    return iframe;
  }
  function initSoundCloudWidgets() {
    const placeholders = queryAll("[data-soundcloud]");
    window.addEventListener("load", () => {
      setTimeout(() => placeholders.forEach(initializePlayer), 100);
    });
  }

  // ../story/src/split-layout/index.ts
  function initSplitLayouts() {
    queryAll(".SplitLayout").forEach(initSplitLayout);
  }
  function initSplitLayout(splitLayout) {
    const fixedCoverBackgrounds = queryAll(".FullSize__fixedChild.ObjectFit--cover", splitLayout);
    if (doYouEvenFitObjects()) {
      fixedCoverBackgrounds.forEach(addParentWidthElement);
    }
  }

  // ../story/src/stacked-content/index.ts
  var import_fastdom13 = __toESM(require_fastdom());
  function initStackContentEl(el) {
    const fillEls = queryAll("[data-stacked-content-fill]", el);
    const basisEls = queryAll("[data-stacked-content-basis]", el);
    const render5 = () => update(el, fillEls, basisEls);
    render5();
    addToLoop(render5);
    return () => unLoop(render5);
  }
  function update(rootEl, fillEls, basisEls) {
    if (fillEls.length === 0)
      return;
    import_fastdom13.default.measure(() => {
      const rootHeight = getInnerHeight(rootEl);
      if (!rootHeight)
        return;
      const basisElsHeight = basisEls.reduce((acc, el) => acc + el.clientHeight, 0);
      const fillElHeight = (rootHeight - basisElsHeight) / fillEls.length;
      import_fastdom13.default.mutate(() => {
        fillEls.forEach((el) => el.style.maxHeight = `${fillElHeight}px`);
      });
    });
  }
  function initStackedContent() {
    const stackedContents = queryAll("[data-stacked-content]");
    return stackedContents.map(initStackContentEl);
  }

  // ../story/src/stock-media/unsplash.ts
  function trackView(appId, stockMediaId) {
    const viewTrackingUrl = `https://views.unsplash.com/v?app_id=${appId}&photo_id=${stockMediaId}`;
    fetch(viewTrackingUrl).catch((error) => console.log(error));
  }
  function initUnsplash() {
    queryAll("[data-unsplash-ids]").forEach((element) => {
      const ids = element.getAttribute("data-unsplash-ids");
      const appId = element.getAttribute("data-unsplash-app");
      trackView(appId, ids);
    });
  }

  // ../story/src/core/error.ts
  var ResponseError = class extends Error {
    constructor(response) {
      super(response.statusText);
      this.response = response;
    }
  };
  function checkStatus(response) {
    if (response.status >= 200 && response.status < 300) {
      return response;
    }
    const error = new ResponseError(response);
    error.response = response;
    throw error;
  }
  function checkType(response, contentType, message) {
    const contentTypeHeader = response.headers.get("content-type");
    if (contentTypeHeader && contentTypeHeader.includes(contentType)) {
      return response;
    }
    throw new TypeError(message);
  }

  // ../story/src/gallery-renderer/gallery-renderer.ts
  function renderGallery(url, mode, next) {
    fetch(url).then(checkStatus).then((res) => checkType(res, "application/json", "Incorrect data for Gallery")).then((response) => response.json()).then((data) => {
      const itemlist = data.items.filter((item) => item.url.replace(/index\.html$/, "") !== window.location.href.replace(/index\.html$/, "")).map((item) => {
        const imageClass = mode === "tiles" ? `class="ObjectFit--cover"` : "";
        const img = item.mediaSrc ? `<img alt="" src="${item.mediaSrc}" ${imageClass}>` : "";
        const target = item.openInNewWindow ? 'target="_blank"' : "";
        const rel = item.isNoFollow ? 'rel="nofollow"' : "";
        return `
              <li class="Theme-Layer-Gallery-Item" style="overflow:hidden">
                <a href="${item.url ? item.url : "/"}" ${target} ${rel}>
                  <div class="Theme-Layer-Gallery-Item-Media">
                  ${img}
                  </div>
                  <div class="Theme-Layer-Gallery-Item-Text">
                    <h4 class="Theme-Layer-Gallery-Item-Title">${item.title ? item.title : ""}</h4>
                    <div class="Theme-Layer-Gallery-Item-Description">${item.description ? item.description : ""}</div>
                  </div>
                </a>
              </li>
            `;
      }).join("");
      const html = `
          <h3 class="Layout Theme-Layer-Gallery-Heading">${data.title ? data.title : ""}</h3>
          <ul class="Layout Theme-Layer-Gallery-List">${itemlist}</ul>
        `;
      if (next) {
        return next(html);
      }
      return html;
    }).catch((error) => {
      console.log("Gallery was unable to parse external data", error);
    });
  }

  // ../story/src/story-gallery-renderer/init-sections.ts
  var CLASSNAME_INITIALIZING2 = "GalleryRenderer--initializing";
  function initSection(section) {
    const url = section.getAttribute("data-url");
    const mode = section.getAttribute("data-mode");
    renderGallery(url, mode, (html) => {
      section.innerHTML = html;
      section.classList.remove(CLASSNAME_INITIALIZING2);
      initObjectFit();
    });
  }
  function init() {
    const sectionsList = queryAll("[data-galleryrenderer]");
    sectionsList.forEach(initSection);
  }

  // ../story/src/text-size/index.ts
  function noop2() {
  }

  // ../story/src/dom-helpers/classy.ts
  var import_fastdom14 = __toESM(require_fastdom());
  function toggleClassName(el, className, force) {
    if (force !== void 0) {
      return ensureClassName(el, className, force);
    }
    return el.classList.toggle(className);
  }
  function ensureClassName(el, className, toggle) {
    const existingClasses = el.className.split(/\s+/);
    const isExists = existingClasses.includes(className);
    const classes = toggle && !isExists ? [...existingClasses, className] : !toggle && isExists ? existingClasses.filter((cx3) => cx3 !== className) : existingClasses;
    el.className = classes.join(" ");
  }

  // ../story/src/transition-in/fade-in.ts
  var defaultOptions = {
    mainSelector: ".TransitionIn--fade",
    fadeInClass: "TransitionIn--fadeIn"
  };
  function initColumnTransitions(options = defaultOptions) {
    const transitionables = queryAll(options.mainSelector);
    transitionables.forEach((el) => {
      watchTransitionedColumn(el, {
        fadeInClass: options.fadeInClass
      });
    });
  }
  function watchTransitionedColumn(element, options) {
    const onEntry = (entry) => {
      const rootBoundsTop = entry.rootBounds ? entry.rootBounds.top : 0;
      const isScrollingThroughBottom = entry.boundingClientRect.top < rootBoundsTop && !entry.isIntersecting;
      if (isScrollingThroughBottom)
        return;
      toggleTransitionable(element, options.fadeInClass, isVisible(entry));
    };
    element.classList.add(options.fadeInClass);
    observe(element, onEntry, { triggerPoint: "mostly visible" /* Mostly */ });
    return () => unobserve(element);
  }
  function toggleTransitionable(element, fadeInClass, visibility) {
    toggleClassName(element, fadeInClass, visibility);
  }

  // ../story/src/transition-in/index.ts
  function inTransitionIn() {
    initColumnTransitions();
  }

  // ../story/src/navigation/prevent-story-scroll.ts
  var px = (n) => `${n}px`;
  function disableStoryScroll(htmlElement) {
    const { width, height, top } = htmlElement.getBoundingClientRect();
    Object.assign(htmlElement.style, {
      // fixed position will disable scrolling
      position: "fixed",
      // maintain 'scroll position' whilst scrolling is disabled
      // will jump to title section without this
      top: px(top),
      width: px(width),
      height: px(height),
      // force scrollbar to remain (we assume there's a scrollbar)
      overflowY: "scroll"
    });
  }
  function enableStoryScroll(htmlElement) {
    const previousScrollY = parseInt(htmlElement.style.top, 10);
    Object.assign(htmlElement.style, {
      position: "",
      top: "",
      width: "",
      height: "",
      overflowY: ""
    });
    window.scrollTo(0, -previousScrollY);
  }

  // ../story/src/orientation/index.ts
  function determineOrientation() {
    return display_container_default.getWidth() < 900 ? "portrait" : "landscape";
  }
  var orientationListeners = [];
  var currentOrientation;
  function getCurrentOrientation() {
    if (!currentOrientation) {
      currentOrientation = determineOrientation();
    }
    return currentOrientation;
  }
  function addOrientationListener(listener) {
    if (orientationListeners.length === 0) {
      initOrientation();
    }
    orientationListeners.push(listener);
  }
  function onOrientationChange() {
    const orientation = determineOrientation();
    if (orientation !== currentOrientation) {
      currentOrientation = orientation;
      orientationListeners.forEach((fn) => fn(orientation));
    }
  }
  function initOrientation() {
    window.addEventListener("resize", onOrientationChange, { passive: true });
    window.addEventListener("orientationchange", onOrientationChange, { passive: true });
  }

  // ../story/src/videoplayer/foreground-autoplay.ts
  var AutoplayReplayButtonClassName = "AutoplayReplayButton";
  var AutoplayReplayButtonText = {
    unmuteAndReplay: "Unmute & Replay Video",
    replay: "Replay Video"
  };
  var autoplayTracking = {
    /** IDs of videos that are currently playing in viewport */
    nowPlaying: [],
    /**
     * IDs of videos that are currently paused by a means other than being scrolled
     * out of view, i.e. the video has been paused by the user or by the video ending.
     * Note that a looping video doesn't trigger an ended event.
     */
    nowPaused: [],
    /**
     * For determining whether we need to concern ourselves with checking if
     * multiple videos are playing in viewport
     */
    volumeHasBeenInteractedWith: false,
    /**
     * ID of the first video to have its volume changed, which is used to ensure that when
     * there are multiple videos in view, and the user selects our replay video button or
     * turns the volume up on a foreground video (which also effectively selects and
     * hides the replay buttons) that isn't closest to the center, that it unmutes
     * the volume for the video they touched, as opposed to the volume of the video that's
     * closest to center. After the ID has been set and the volume is changed for a new video,
     * this gets permanently set back to null
     */
    firstVideoWithVolumeInteraction: null,
    /**
     * Set to true when multiple videos are playing within the viewport and
     * we're checking for the center-most video on scroll
     */
    scrollListenerIsActive: false,
    /**
     * The ID of the video that is currently closest to the vertical center
     * of the viewport, when multiple videos are in the viewport
     */
    videoClosestToCenterY: null
  };
  var io = new IntersectionObserver(handleAutoplayIntersection, {
    root: null,
    rootMargin: "0px",
    threshold: 0.1
  });
  function unobserveAutoplayVideo(videoplayer) {
    io.unobserve(videoplayer);
  }
  function observeAutoplayVideo(videoplayer) {
    io.observe(videoplayer);
  }
  function setupAutoplay(media, videoId, orientation) {
    media.dataset.autoplay = "true";
    media.dataset.id = videoId;
    media.preload = "auto";
    media.defaultMuted = true;
    media.muted = true;
    media.classList.remove("video-play");
    const [src] = getVideoSourceForOrientation(media, orientation);
    media.src = src;
    media.load();
  }
  function setupAutoplayControls(media, videoplayer, replayButton) {
    media.controls = true;
    media.addEventListener("volumechange", initialAutoplayVolumeChangeChecks);
    if (replayButton) {
      const replayButtonEl = document.createElement("button");
      replayButtonEl.textContent = AutoplayReplayButtonText[replayButton];
      replayButtonEl.classList.add(AutoplayReplayButtonClassName);
      videoplayer.append(replayButtonEl);
      videoplayer.addEventListener("click", ({ target }) => {
        if (target.classList.contains(AutoplayReplayButtonClassName)) {
          handleAutoplayReplayButtonSelection(media);
        }
      });
    }
  }
  function handleAutoplayReplayButtonSelection(media) {
    media.currentTime = 0;
    media.muted = false;
    media.play();
  }
  function initialAutoplayVolumeChangeChecks({ target }) {
    if (!autoplayTracking.volumeHasBeenInteractedWith) {
      autoplayTracking.volumeHasBeenInteractedWith = true;
      autoplayTracking.firstVideoWithVolumeInteraction = target.dataset.id;
      document.querySelectorAll(`.${AutoplayReplayButtonClassName}`).forEach((btn) => btn.remove());
      const videos = document.querySelectorAll("video[data-controls=true]");
      unmuteAll(videos);
    } else if (target.dataset.id !== autoplayTracking.firstVideoWithVolumeInteraction) {
      autoplayTracking.firstVideoWithVolumeInteraction = null;
      const videos = document.querySelectorAll("video[data-controls=true]");
      videos.forEach((video) => video.removeEventListener("volumechange", initialAutoplayVolumeChangeChecks));
    }
    checkTrackingOfMultipleVideos();
  }
  function handleAutoplayIntersection(entries) {
    for (const entry of entries) {
      const { target, isIntersecting } = entry;
      const media = target.querySelector("video");
      const videoId = media.dataset.id;
      const videoplayer = media.closest("[data-videoplayer]");
      if (isIntersecting) {
        media.play().then(() => setVideoClass("video-playing", videoplayer)).catch((err) => {
          const replayButtonEl = videoplayer.querySelector(`.${AutoplayReplayButtonClassName}`);
          if (replayButtonEl)
            replayButtonEl.remove();
          console.error("Playback of video failed: ", err);
        });
      } else {
        if (autoplayTracking.nowPlaying.includes(videoId)) {
          autoplayTracking.nowPlaying = autoplayTracking.nowPlaying.filter((id) => id !== videoId);
        }
        media.pause();
      }
    }
  }
  function postAutoplayPlayChecks(media, videoplayer, videoHasControls) {
    const videoId = media.dataset.id;
    if (videoHasControls) {
      autoplayTracking.nowPlaying.push(videoId);
      checkTrackingOfMultipleVideos();
      if (autoplayTracking.nowPaused.includes(videoId)) {
        observeAutoplayVideo(videoplayer);
        autoplayTracking.nowPaused = autoplayTracking.nowPaused.filter((id) => id !== videoId);
      }
    }
  }
  function postAutoplayPauseChecks(media, videoplayer) {
    const videoId = media.dataset.id;
    if (autoplayTracking.nowPlaying.includes(videoId)) {
      unobserveAutoplayVideo(videoplayer);
      autoplayTracking.nowPaused.push(videoId);
      autoplayTracking.nowPlaying = autoplayTracking.nowPlaying.filter((id) => id !== videoId);
    }
    checkTrackingOfMultipleVideos();
  }
  function checkTrackingOfMultipleVideos() {
    if (!autoplayTracking.volumeHasBeenInteractedWith)
      return;
    if (autoplayTracking.nowPlaying.length > 1) {
      if (!autoplayTracking.scrollListenerIsActive) {
        document.addEventListener("scroll", muteAllExceptCenterVideo);
        autoplayTracking.scrollListenerIsActive = true;
        if (autoplayTracking.firstVideoWithVolumeInteraction) {
          const videoToUnmute = document.querySelector(
            `[data-id="${autoplayTracking.firstVideoWithVolumeInteraction}"]`
          );
          muteAllExcept(videoToUnmute);
        } else {
          muteAllExceptCenterVideo();
        }
      }
    } else {
      document.removeEventListener("scroll", muteAllExceptCenterVideo);
      autoplayTracking.scrollListenerIsActive = false;
      autoplayTracking.videoClosestToCenterY = null;
    }
  }
  function muteAllExcept(video) {
    unmute(video);
    for (const id of autoplayTracking.nowPlaying) {
      if (id !== video.dataset.id) {
        const videoToMute = document.querySelector(`[data-id="${id}"]`);
        videoToMute.muted = true;
      }
    }
  }
  function unmuteAll(videos) {
    videos.forEach((video) => unmute(video));
  }
  function unmute(video) {
    video.muted = false;
  }
  function muteAllExceptCenterVideo() {
    let currentVideoClosestToCenterY = null;
    let currentVideoClosestToCenterYDistance = null;
    for (let i = 0; i < autoplayTracking.nowPlaying.length; i++) {
      const video = document.querySelector(`[data-id="${autoplayTracking.nowPlaying[i]}"]`);
      const videoRelPos = getDifferenceInPositionFromCenter(video);
      if (currentVideoClosestToCenterY === null || videoRelPos <= currentVideoClosestToCenterYDistance) {
        currentVideoClosestToCenterY = autoplayTracking.nowPlaying[i];
        currentVideoClosestToCenterYDistance = videoRelPos;
      }
    }
    if (autoplayTracking.videoClosestToCenterY !== currentVideoClosestToCenterY) {
      autoplayTracking.videoClosestToCenterY = currentVideoClosestToCenterY;
      const centerVideo = document.querySelector(`[data-id="${autoplayTracking.videoClosestToCenterY}"]`);
      muteAllExcept(centerVideo);
    }
  }
  function getDifferenceInPositionFromCenter(el) {
    const viewportCenterPositionY = getViewportCenterPositionY();
    const elMiddlePos = getMiddlePosition(el);
    return Math.abs(viewportCenterPositionY - elMiddlePos);
  }
  function getMiddlePosition(el) {
    const { top, bottom } = el.getBoundingClientRect();
    return (top + bottom) / 2;
  }
  function getViewportCenterPositionY() {
    return window.innerHeight / 2;
  }

  // ../story/src/videoplayer/youtube.ts
  var DEFAULT_SELECTOR = "[data-videoplayer-youtube]";
  var DEFAULT_SELECTOR_360 = '[data-projection="360"]';
  var YOUTUBE_SCRIPT_ID = "__YOUTUBE_API_SCRIPT__";
  var state8 = {
    whenApiReady: false,
    players: []
  };
  function ensureYoutubeScript(onYouTubeIframeAPIReady) {
    if (queryAll('script[src="//www.youtube.com/player_api"]').length > 0)
      return;
    if (!state8.whenApiReady) {
      state8.whenApiReady = new Promise((resolve, reject) => {
        window.onYouTubeIframeAPIReady = () => resolve();
        const tag = document.createElement("script");
        tag.src = "//www.youtube.com/player_api";
        tag.id = YOUTUBE_SCRIPT_ID;
        tag.async = true;
        const firstScriptTag = document.getElementsByTagName("script")[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      });
    }
    state8.whenApiReady.then(onYouTubeIframeAPIReady);
  }
  function getVideoEventName(event) {
    const EVENT_NAMES = {
      [YT.PlayerState.PLAYING]: "play",
      [YT.PlayerState.PAUSED]: "pause",
      [YT.PlayerState.ENDED]: "end"
    };
    return EVENT_NAMES[event.data];
  }
  function initYoutubeVideo(placeholder) {
    const videoId = placeholder.getAttribute("data-video-id");
    const player = new YT.Player(placeholder, {
      videoId,
      playerVars: { rel: 0 },
      events: {
        onStateChange(event) {
          if (event.data === YT.PlayerState.PLAYING) {
            const player2 = event.target;
            const doPause = player2.pauseVideo.bind(player2);
            const onPlay = makeAudioSourceListener(doPause, player2.getIframe());
            onPlay();
          }
          const eventName = getVideoEventName(event);
          if (eventName) {
            logVideoEvent(eventName, event.target);
          }
        }
      }
    });
    return player;
  }
  function logVideoEvent(eventName, player) {
    const data = player.getVideoData();
    const videoName = `${data.title} (${data.video_id})`;
    logEvent("Videos", eventName, videoName);
  }
  function create360VideoLinks(videoPlaceholders360) {
    videoPlaceholders360.forEach((placeholder) => {
      const ytid = placeholder.getAttribute("data-video-id");
      const parent = placeholder.parentElement;
      const youtubeButton = document.createElement("div");
      const youtubeLink = document.createElement("a");
      placeholder.removeAttribute("data-videoplayer-youtube");
      parent.style.backgroundImage = "url('https://img.youtube.com/vi/" + ytid + "/maxresdefault.jpg')";
      parent.style.backgroundSize = "cover";
      youtubeLink.setAttribute("href", "http://www.youtube.com/watch?v=" + ytid);
      youtubeLink.setAttribute("target", "_blank");
      youtubeLink.className = "Theme-360Video-Link";
      parent.parentNode.insertBefore(youtubeLink, parent);
      youtubeLink.appendChild(parent);
      youtubeLink.appendChild(youtubeButton);
      youtubeButton.innerText = "Tap to view 360 video";
      youtubeButton.className = "Theme-360Video-Button";
    });
  }
  function initYoutubeVideos(selector = DEFAULT_SELECTOR, selector360 = DEFAULT_SELECTOR_360) {
    const videoPlaceholders360 = queryAll(selector360);
    if (getDeviceInfo().isiOS) {
      create360VideoLinks(videoPlaceholders360);
    }
    const videoPlaceholders = queryAll(selector);
    if (videoPlaceholders.length === 0) {
      return;
    }
    ensureYoutubeScript(() => {
      state8.players = videoPlaceholders.map(initYoutubeVideo);
    });
  }

  // ../story/src/videoplayer/index.ts
  var { isSafari: isSafari2 } = getDeviceInfo();
  var iconSvg = `<svg xmlns="http://www.w3.org/2000/svg">
  <symbol id="video-play-icon" viewBox="0 0 18 18"><path d="M15.562 8.1L3.87.225C3.052-.337 2 .225 2 1.125v15.75c0 .9 1.052 1.462 1.87.9L15.563 9.9c.584-.45.584-1.35 0-1.8z"/></symbol>
  <symbol id="video-error-icon" viewBox="0 0 24 24"><path d="M21.171,15.398l-5.912-9.854C14.483,4.251,13.296,3.511,12,3.511s-2.483,0.74-3.259,2.031l-5.912,9.856  c-0.786,1.309-0.872,2.705-0.235,3.83C3.23,20.354,4.472,21,6,21h12c1.528,0,2.77-0.646,3.406-1.771  C22.043,18.104,21.957,16.708,21.171,15.398z M12,17.549c-0.854,0-1.55-0.695-1.55-1.549c0-0.855,0.695-1.551,1.55-1.551  s1.55,0.696,1.55,1.551C13.55,16.854,12.854,17.549,12,17.549z M13.633,10.125c-0.011,0.031-1.401,3.468-1.401,3.468  c-0.038,0.094-0.13,0.156-0.231,0.156s-0.193-0.062-0.231-0.156l-1.391-3.438C10.289,9.922,10.25,9.712,10.25,9.5  c0-0.965,0.785-1.75,1.75-1.75s1.75,0.785,1.75,1.75C13.75,9.712,13.711,9.922,13.633,10.125z"/></symbol>
 </svg>`;
  function initVideoPlayer(videoplayer, media, orientation) {
    let isInitialLoad = true;
    let playing = false;
    let loadingDiv = null;
    let errorDiv = null;
    let loadingPoster = null;
    let currentOrientation2 = orientation;
    const {
      dataset: { autoplay, controls, replayButton, id: videoId },
      loop: doesLoop
    } = media;
    const autoplayIsActive = autoplay === "true";
    const hasControls = controls === "true";
    const showControls = autoplayIsActive ? hasControls : media.controls;
    if (autoplayIsActive) {
      setupAutoplay(media, videoId, orientation);
      if (hasControls) {
        setupAutoplayControls(media, videoplayer, replayButton);
      } else {
        media.controls = false;
        videoplayer.style.pointerEvents = "none";
      }
      if (!doesLoop) {
        media.addEventListener("ended", () => unobserveAutoplayVideo(videoplayer));
      }
      observeAutoplayVideo(videoplayer);
    }
    updatePosterForOrientation(orientation);
    media.controls = false;
    function onReady() {
      if (isInitialLoad) {
        isInitialLoad = false;
        setVideoClass("video-stopped", videoplayer);
        videoplayer.removeAttribute("data-lazyload-video");
      }
    }
    function updatePosterForOrientation(orientation2) {
      const poster = media.getAttribute(`data-${orientation2}-poster`);
      if (poster && poster !== media.poster) {
        let onPosterLoaded = function() {
          if (loadingPoster === img) {
            media.poster = poster;
            onReady();
          }
        };
        const img = document.createElement("img");
        img.addEventListener("load", onPosterLoaded);
        img.addEventListener("error", onPosterLoaded);
        img.src = poster;
        loadingPoster = img;
      } else {
        onReady();
      }
    }
    function updateVideoOrientation(orientation2) {
      currentOrientation2 = orientation2;
      if (media.src) {
        const [src] = getVideoSourceForOrientation(media, orientation2);
        if (src && src !== media.src) {
          if (playing) {
            media.pause();
            playing = false;
          }
          removeErrorOverlay();
          if (!isInitialLoad) {
            setVideoClass("video-stopped", videoplayer);
          }
          media.src = src;
        }
      }
      updatePosterForOrientation(orientation2);
    }
    function addLoadingOverlay() {
      if (loadingDiv === null) {
        loadingDiv = document.createElement("div");
        loadingDiv.className = "Lazyload__spinner Theme-Lazyload-Spinner";
        videoplayer.appendChild(loadingDiv);
      }
    }
    function removeLoadingOverlay() {
      if (loadingDiv !== null) {
        loadingDiv.remove();
        loadingDiv = null;
        return true;
      } else {
        return false;
      }
    }
    function addErrorOverlay() {
      if (errorDiv === null) {
        errorDiv = document.createElement("div");
        errorDiv.className = "video-error-container";
        errorDiv.innerHTML = '<div class="video-error-block"><svg><use xlink:href="#video-error-icon"/></svg><span>THERE WAS AN ERROR LOADING THIS VIDEO</span></div>';
        videoplayer.appendChild(errorDiv);
        const replayButtonEl = videoplayer.querySelector(`.${AutoplayReplayButtonClassName}`);
        if (replayButtonEl)
          replayButtonEl.remove();
      }
    }
    function removeErrorOverlay() {
      if (errorDiv !== null) {
        errorDiv.remove();
        errorDiv = null;
        return true;
      } else {
        return false;
      }
    }
    function manualPlay() {
      if (media.readyState === 0) {
        if (loadingDiv === null) {
          addLoadingOverlay();
          setVideoClass("video-loading", videoplayer);
          const [src, mime] = getVideoSourceForOrientation(media, currentOrientation2);
          if (isSafari2) {
            let onLoad = function() {
              media.removeEventListener("canplay", onLoad);
              if (mime !== "video/mp4") {
                setTimeout(() => {
                  media.play();
                }, 1e3);
              } else {
                media.play();
              }
            };
            media.addEventListener("canplay", onLoad);
            media.src = src;
            media.load();
          } else {
            media.autoplay = true;
            media.src = src;
          }
        }
      } else {
        media.play().catch();
      }
    }
    function firstPlay(event) {
      if (!playing) {
        event.preventDefault();
        manualPlay();
        videoplayer.removeEventListener("click", firstPlay);
      }
    }
    media.addEventListener("play", () => {
      if (autoplayIsActive) {
        postAutoplayPlayChecks(media, videoplayer, hasControls);
      }
    });
    media.addEventListener("error", () => {
      if (removeLoadingOverlay()) {
        addErrorOverlay();
        setVideoClass("video-error", videoplayer);
      }
    });
    media.addEventListener("pause", () => {
      setVideoClass("video-paused", videoplayer);
      playing = false;
      postAutoplayPauseChecks(media, videoplayer);
      logEvent("Videos", "pause", media.currentSrc);
    });
    media.addEventListener("playing", () => {
      removeErrorOverlay();
      removeLoadingOverlay();
      setVideoClass("video-playing", videoplayer);
      if (!autoplayIsActive) {
        makeAudioSourceListener(media.pause.bind(media), media)();
      }
      playing = true;
      media.controls = showControls;
      logEvent("Videos", "play", media.currentSrc);
    });
    media.addEventListener("ended", () => {
      setVideoClass("video-paused", videoplayer);
      playing = false;
      logEvent("Videos", "ended", media.currentSrc);
    });
    videoplayer.addEventListener("click", firstPlay);
    const docEl = document.documentElement;
    const layer = videoplayer.closest("[class*='Layer--']");
    media.addEventListener("fullscreenchange", () => {
      if (document.fullscreenElement === null) {
        enableStoryScroll(docEl);
        layer.classList.remove("Levels--god");
      } else {
        disableStoryScroll(docEl);
        layer.classList.add("Levels--god");
      }
    });
    addOrientationListener(updateVideoOrientation);
  }
  function initVideoPlayers(options = {}) {
    if (options.body && !options.iconUrl) {
      const svgParser = new DOMParser();
      const svg = svgParser.parseFromString(iconSvg, "image/svg+xml");
      const svgContainer = document.createElement("div");
      svgContainer.style.display = "none";
      svgContainer.id = "__PLYR_SVGICON_CONTAINER__";
      svgContainer.appendChild(svg.childNodes[0]);
      options.body.appendChild(svgContainer);
    }
    const videoplayers = queryAll("[data-videoplayer]");
    const orientation = getCurrentOrientation();
    videoplayers.forEach((videoplayer) => {
      const media = videoplayer.querySelector("[data-videoplayer-media]");
      if (media) {
        initVideoPlayer(videoplayer, media, orientation);
      }
    });
    initYoutubeVideos();
  }

  // ../story/src/_story.entry.js
  initDisplay();
  initDeviceDetect();
  initDisplayContainer();
  initLayout();
  initLazyload();
  initObjectFit();
  initStackedContent();
  initLoop();
  initOnVisible();
  noop2();
  initFocalPoints();
  inTransitionIn();
  initHideOffscreen();
  initNavItems();
  noop();
  initSoundCloudWidgets();
  initParentWidth();
  initVideoPlayers({ body: document.body });
  initBackgroundVideos();
  initSocialShareButtons();
  initAnalytics();
  init();
  initCardCanvases();
  initBackgroundScrollmations();
  initScrollymoly();
  initSplitLayouts();
  initMediaGalleries();
  initFootnotes();
  initBackgroundMedia();
  disableSmoothScroll();
  initUnsplash();
})();
/*! Bundled license information:

classnames/dedupe.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=story.local.min.js.map
